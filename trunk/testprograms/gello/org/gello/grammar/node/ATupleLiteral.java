/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.gello.grammar.node;

import org.gello.grammar.analysis.*;

@SuppressWarnings("nls")
public final class ATupleLiteral extends PTupleLiteral
{
    private TTuple _tuple_;
    private TLBrace _lBrace_;
    private PTupleLiteralList _tupleLiteralList_;
    private TRBrace _rBrace_;

    public ATupleLiteral()
    {
        // Constructor
    }

    public ATupleLiteral(
        @SuppressWarnings("hiding") TTuple _tuple_,
        @SuppressWarnings("hiding") TLBrace _lBrace_,
        @SuppressWarnings("hiding") PTupleLiteralList _tupleLiteralList_,
        @SuppressWarnings("hiding") TRBrace _rBrace_)
    {
        // Constructor
        setTuple(_tuple_);

        setLBrace(_lBrace_);

        setTupleLiteralList(_tupleLiteralList_);

        setRBrace(_rBrace_);

    }

    @Override
    public Object clone()
    {
        return new ATupleLiteral(
            cloneNode(this._tuple_),
            cloneNode(this._lBrace_),
            cloneNode(this._tupleLiteralList_),
            cloneNode(this._rBrace_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATupleLiteral(this);
    }

    public TTuple getTuple()
    {
        return this._tuple_;
    }

    public void setTuple(TTuple node)
    {
        if(this._tuple_ != null)
        {
            this._tuple_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tuple_ = node;
    }

    public TLBrace getLBrace()
    {
        return this._lBrace_;
    }

    public void setLBrace(TLBrace node)
    {
        if(this._lBrace_ != null)
        {
            this._lBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBrace_ = node;
    }

    public PTupleLiteralList getTupleLiteralList()
    {
        return this._tupleLiteralList_;
    }

    public void setTupleLiteralList(PTupleLiteralList node)
    {
        if(this._tupleLiteralList_ != null)
        {
            this._tupleLiteralList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tupleLiteralList_ = node;
    }

    public TRBrace getRBrace()
    {
        return this._rBrace_;
    }

    public void setRBrace(TRBrace node)
    {
        if(this._rBrace_ != null)
        {
            this._rBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBrace_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tuple_)
            + toString(this._lBrace_)
            + toString(this._tupleLiteralList_)
            + toString(this._rBrace_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tuple_ == child)
        {
            this._tuple_ = null;
            return;
        }

        if(this._lBrace_ == child)
        {
            this._lBrace_ = null;
            return;
        }

        if(this._tupleLiteralList_ == child)
        {
            this._tupleLiteralList_ = null;
            return;
        }

        if(this._rBrace_ == child)
        {
            this._rBrace_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tuple_ == oldChild)
        {
            setTuple((TTuple) newChild);
            return;
        }

        if(this._lBrace_ == oldChild)
        {
            setLBrace((TLBrace) newChild);
            return;
        }

        if(this._tupleLiteralList_ == oldChild)
        {
            setTupleLiteralList((PTupleLiteralList) newChild);
            return;
        }

        if(this._rBrace_ == oldChild)
        {
            setRBrace((TRBrace) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
