/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.gello.grammar.node;

import org.gello.grammar.analysis.*;

@SuppressWarnings("nls")
public final class AListCollectionList extends PCollectionList
{
    private PCollectionList _collectionList_;
    private TComma _comma_;
    private PCollectionLiteralArgument _collectionLiteralArgument_;

    public AListCollectionList()
    {
        // Constructor
    }

    public AListCollectionList(
        @SuppressWarnings("hiding") PCollectionList _collectionList_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PCollectionLiteralArgument _collectionLiteralArgument_)
    {
        // Constructor
        setCollectionList(_collectionList_);

        setComma(_comma_);

        setCollectionLiteralArgument(_collectionLiteralArgument_);

    }

    @Override
    public Object clone()
    {
        return new AListCollectionList(
            cloneNode(this._collectionList_),
            cloneNode(this._comma_),
            cloneNode(this._collectionLiteralArgument_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListCollectionList(this);
    }

    public PCollectionList getCollectionList()
    {
        return this._collectionList_;
    }

    public void setCollectionList(PCollectionList node)
    {
        if(this._collectionList_ != null)
        {
            this._collectionList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._collectionList_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PCollectionLiteralArgument getCollectionLiteralArgument()
    {
        return this._collectionLiteralArgument_;
    }

    public void setCollectionLiteralArgument(PCollectionLiteralArgument node)
    {
        if(this._collectionLiteralArgument_ != null)
        {
            this._collectionLiteralArgument_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._collectionLiteralArgument_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._collectionList_)
            + toString(this._comma_)
            + toString(this._collectionLiteralArgument_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._collectionList_ == child)
        {
            this._collectionList_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._collectionLiteralArgument_ == child)
        {
            this._collectionLiteralArgument_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._collectionList_ == oldChild)
        {
            setCollectionList((PCollectionList) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._collectionLiteralArgument_ == oldChild)
        {
            setCollectionLiteralArgument((PCollectionLiteralArgument) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
