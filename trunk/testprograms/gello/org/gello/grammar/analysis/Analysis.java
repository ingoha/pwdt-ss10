/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.gello.grammar.analysis;

import org.gello.grammar.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAExpressionGoal(AExpressionGoal node);
    void caseAContextGoal(AContextGoal node);
    void caseAContextExpression(AContextExpression node);
    void caseAExpression(AExpression node);
    void caseAIfLetExpression(AIfLetExpression node);
    void caseALetLetExpression(ALetLetExpression node);
    void caseAInClause(AInClause node);
    void caseAConditionalIfExpression(AConditionalIfExpression node);
    void caseAIfIfExpression(AIfIfExpression node);
    void caseAIntegerLiteralLiteral(AIntegerLiteralLiteral node);
    void caseAFloatingPointLiteralLiteral(AFloatingPointLiteralLiteral node);
    void caseAStringLiteralLiteral(AStringLiteralLiteral node);
    void caseACollectionLiteralLiteral(ACollectionLiteralLiteral node);
    void caseATupleLiteralLiteral(ATupleLiteralLiteral node);
    void caseASimpleNameName(ASimpleNameName node);
    void caseAQualifiedNameName(AQualifiedNameName node);
    void caseABasicGelloType(ABasicGelloType node);
    void caseACollectionGelloType(ACollectionGelloType node);
    void caseATupleGelloType(ATupleGelloType node);
    void caseAIntBasicType(AIntBasicType node);
    void caseAStringBasicType(AStringBasicType node);
    void caseARealBasicType(ARealBasicType node);
    void caseABooleanBasicType(ABooleanBasicType node);
    void caseASetCollectionType(ASetCollectionType node);
    void caseABagCollectionType(ABagCollectionType node);
    void caseASequenceCollectionType(ASequenceCollectionType node);
    void caseATupleType(ATupleType node);
    void caseALiteralPrimary(ALiteralPrimary node);
    void caseALParenPrimary(ALParenPrimary node);
    void caseAFieldAccessPrimary(AFieldAccessPrimary node);
    void caseAMethodInvocationPrimary(AMethodInvocationPrimary node);
    void caseAExpressionArgumentList(AExpressionArgumentList node);
    void caseAArgumentListArgumentList(AArgumentListArgumentList node);
    void caseAFieldAccess(AFieldAccess node);
    void caseANameMethodInvocation(ANameMethodInvocation node);
    void caseAPrimaryMethodInvocation(APrimaryMethodInvocation node);
    void caseANameCollectionMethodInvocation(ANameCollectionMethodInvocation node);
    void caseACollectionMethodInvocation(ACollectionMethodInvocation node);
    void caseANameTupleMethodInvocation(ANameTupleMethodInvocation node);
    void caseATupleMethodInvocation(ATupleMethodInvocation node);
    void caseAIdType(AIdType node);
    void caseAGelloType(AGelloType node);
    void caseASimpleCollectionArgument(ASimpleCollectionArgument node);
    void caseANamedCollectionArgument(ANamedCollectionArgument node);
    void caseATypedCollectionArgument(ATypedCollectionArgument node);
    void caseAIterateCollectionArgument(AIterateCollectionArgument node);
    void caseASimpleJoinCollection(ASimpleJoinCollection node);
    void caseAAliasedJoinCollection(AAliasedJoinCollection node);
    void caseASingleJoinCollectionList(ASingleJoinCollectionList node);
    void caseAListJoinCollectionList(AListJoinCollectionList node);
    void caseAJoinProperty(AJoinProperty node);
    void caseASingleJoinPropertyList(ASingleJoinPropertyList node);
    void caseAListJoinPropertyList(AListJoinPropertyList node);
    void caseAUnorderedJoinArgument(AUnorderedJoinArgument node);
    void caseAOrderedJoinArgument(AOrderedJoinArgument node);
    void caseAPrimaryPostfixExpression(APrimaryPostfixExpression node);
    void caseANamePostfixExpression(ANamePostfixExpression node);
    void caseAMinusUnaryExpression(AMinusUnaryExpression node);
    void caseANotUnaryExpression(ANotUnaryExpression node);
    void caseAPostfixUnaryExpression(APostfixUnaryExpression node);
    void caseAUnaryMultiplicativeExpression(AUnaryMultiplicativeExpression node);
    void caseAMultiplyMultiplicativeExpression(AMultiplyMultiplicativeExpression node);
    void caseADivideMultiplicativeExpression(ADivideMultiplicativeExpression node);
    void caseAIntdivMultiplicativeExpression(AIntdivMultiplicativeExpression node);
    void caseAModMultiplicativeExpression(AModMultiplicativeExpression node);
    void caseAMaxMultiplicativeExpression(AMaxMultiplicativeExpression node);
    void caseAMinMultiplicativeExpression(AMinMultiplicativeExpression node);
    void caseAMultiplyAdditiveExpression(AMultiplyAdditiveExpression node);
    void caseAPlusAdditiveExpression(APlusAdditiveExpression node);
    void caseAMinusAdditiveExpression(AMinusAdditiveExpression node);
    void caseAAdditiveExpressionRelationalExpression(AAdditiveExpressionRelationalExpression node);
    void caseALtRelationalExpression(ALtRelationalExpression node);
    void caseAGtRelationalExpression(AGtRelationalExpression node);
    void caseALteqRelationalExpression(ALteqRelationalExpression node);
    void caseAGteqRelationalExpression(AGteqRelationalExpression node);
    void caseAEqRelationalExpression(AEqRelationalExpression node);
    void caseANeqRelationalExpression(ANeqRelationalExpression node);
    void caseARelationalConditionalAndExpression(ARelationalConditionalAndExpression node);
    void caseAAndConditionalAndExpression(AAndConditionalAndExpression node);
    void caseAAndConditionalOrExpression(AAndConditionalOrExpression node);
    void caseAOrConditionalOrExpression(AOrConditionalOrExpression node);
    void caseAXorConditionalOrExpression(AXorConditionalOrExpression node);
    void caseAOrConditionalExpression(AOrConditionalExpression node);
    void caseAImpliesConditionalExpression(AImpliesConditionalExpression node);
    void caseAExpressionCollectionLiteralArgument(AExpressionCollectionLiteralArgument node);
    void caseARangeCollectionLiteralArgument(ARangeCollectionLiteralArgument node);
    void caseASingleCollectionList(ASingleCollectionList node);
    void caseAListCollectionList(AListCollectionList node);
    void caseACollectionLiteral(ACollectionLiteral node);
    void caseATypedVarDefinition(ATypedVarDefinition node);
    void caseABindingTupleLiteralList(ABindingTupleLiteralList node);
    void caseAListTupleLiteralList(AListTupleLiteralList node);
    void caseATupleLiteral(ATupleLiteral node);

    void caseTWhiteSpace(TWhiteSpace node);
    void caseTEndOfLineComment(TEndOfLineComment node);
    void caseTIf(TIf node);
    void caseTThen(TThen node);
    void caseTElse(TElse node);
    void caseTEndif(TEndif node);
    void caseTLet(TLet node);
    void caseTIn(TIn node);
    void caseTContext(TContext node);
    void caseTEndcontext(TEndcontext node);
    void caseTBoolean(TBoolean node);
    void caseTInt(TInt node);
    void caseTReal(TReal node);
    void caseTString(TString node);
    void caseTSet(TSet node);
    void caseTBag(TBag node);
    void caseTSequence(TSequence node);
    void caseTTuple(TTuple node);
    void caseTAnd(TAnd node);
    void caseTArrow(TArrow node);
    void caseTColon(TColon node);
    void caseTComma(TComma node);
    void caseTDivide(TDivide node);
    void caseTDot(TDot node);
    void caseTDotdot(TDotdot node);
    void caseTEq(TEq node);
    void caseTGteq(TGteq node);
    void caseTGt(TGt node);
    void caseTImplies(TImplies node);
    void caseTIntdiv(TIntdiv node);
    void caseTLteq(TLteq node);
    void caseTLt(TLt node);
    void caseTMax(TMax node);
    void caseTMin(TMin node);
    void caseTMinus(TMinus node);
    void caseTMod(TMod node);
    void caseTNeq(TNeq node);
    void caseTNot(TNot node);
    void caseTOr(TOr node);
    void caseTPlus(TPlus node);
    void caseTLParen(TLParen node);
    void caseTRParen(TRParen node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTSemicolon(TSemicolon node);
    void caseTStar(TStar node);
    void caseTPipe(TPipe node);
    void caseTXor(TXor node);
    void caseTDecimalIntegerLiteral(TDecimalIntegerLiteral node);
    void caseTFloatingPointLiteral(TFloatingPointLiteral node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTIdentifier(TIdentifier node);
    void caseEOF(EOF node);
}
