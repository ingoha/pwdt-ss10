/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.gello.grammar.analysis;

import java.util.*;
import org.gello.grammar.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPGoal().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAExpressionGoal(AExpressionGoal node)
    {
        defaultIn(node);
    }

    public void outAExpressionGoal(AExpressionGoal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionGoal(AExpressionGoal node)
    {
        inAExpressionGoal(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExpressionGoal(node);
    }

    public void inAContextGoal(AContextGoal node)
    {
        defaultIn(node);
    }

    public void outAContextGoal(AContextGoal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAContextGoal(AContextGoal node)
    {
        inAContextGoal(node);
        if(node.getContextExpression() != null)
        {
            node.getContextExpression().apply(this);
        }
        outAContextGoal(node);
    }

    public void inAContextExpression(AContextExpression node)
    {
        defaultIn(node);
    }

    public void outAContextExpression(AContextExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAContextExpression(AContextExpression node)
    {
        inAContextExpression(node);
        if(node.getContext() != null)
        {
            node.getContext().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getConditionalExpression() != null)
        {
            node.getConditionalExpression().apply(this);
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getEndcontext() != null)
        {
            node.getEndcontext().apply(this);
        }
        outAContextExpression(node);
    }

    public void inAExpression(AExpression node)
    {
        defaultIn(node);
    }

    public void outAExpression(AExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpression(AExpression node)
    {
        inAExpression(node);
        if(node.getLetExpression() != null)
        {
            node.getLetExpression().apply(this);
        }
        outAExpression(node);
    }

    public void inAIfLetExpression(AIfLetExpression node)
    {
        defaultIn(node);
    }

    public void outAIfLetExpression(AIfLetExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfLetExpression(AIfLetExpression node)
    {
        inAIfLetExpression(node);
        if(node.getIfExpression() != null)
        {
            node.getIfExpression().apply(this);
        }
        outAIfLetExpression(node);
    }

    public void inALetLetExpression(ALetLetExpression node)
    {
        defaultIn(node);
    }

    public void outALetLetExpression(ALetLetExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALetLetExpression(ALetLetExpression node)
    {
        inALetLetExpression(node);
        if(node.getLet() != null)
        {
            node.getLet().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getIfExpression() != null)
        {
            node.getIfExpression().apply(this);
        }
        if(node.getInClause() != null)
        {
            node.getInClause().apply(this);
        }
        outALetLetExpression(node);
    }

    public void inAInClause(AInClause node)
    {
        defaultIn(node);
    }

    public void outAInClause(AInClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInClause(AInClause node)
    {
        inAInClause(node);
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAInClause(node);
    }

    public void inAConditionalIfExpression(AConditionalIfExpression node)
    {
        defaultIn(node);
    }

    public void outAConditionalIfExpression(AConditionalIfExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionalIfExpression(AConditionalIfExpression node)
    {
        inAConditionalIfExpression(node);
        if(node.getConditionalExpression() != null)
        {
            node.getConditionalExpression().apply(this);
        }
        outAConditionalIfExpression(node);
    }

    public void inAIfIfExpression(AIfIfExpression node)
    {
        defaultIn(node);
    }

    public void outAIfIfExpression(AIfIfExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfIfExpression(AIfIfExpression node)
    {
        inAIfIfExpression(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getIfXpr() != null)
        {
            node.getIfXpr().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getThenXpr() != null)
        {
            node.getThenXpr().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getElseXpr() != null)
        {
            node.getElseXpr().apply(this);
        }
        if(node.getEndif() != null)
        {
            node.getEndif().apply(this);
        }
        outAIfIfExpression(node);
    }

    public void inAIntegerLiteralLiteral(AIntegerLiteralLiteral node)
    {
        defaultIn(node);
    }

    public void outAIntegerLiteralLiteral(AIntegerLiteralLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerLiteralLiteral(AIntegerLiteralLiteral node)
    {
        inAIntegerLiteralLiteral(node);
        if(node.getDecimalIntegerLiteral() != null)
        {
            node.getDecimalIntegerLiteral().apply(this);
        }
        outAIntegerLiteralLiteral(node);
    }

    public void inAFloatingPointLiteralLiteral(AFloatingPointLiteralLiteral node)
    {
        defaultIn(node);
    }

    public void outAFloatingPointLiteralLiteral(AFloatingPointLiteralLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatingPointLiteralLiteral(AFloatingPointLiteralLiteral node)
    {
        inAFloatingPointLiteralLiteral(node);
        if(node.getFloatingPointLiteral() != null)
        {
            node.getFloatingPointLiteral().apply(this);
        }
        outAFloatingPointLiteralLiteral(node);
    }

    public void inAStringLiteralLiteral(AStringLiteralLiteral node)
    {
        defaultIn(node);
    }

    public void outAStringLiteralLiteral(AStringLiteralLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringLiteralLiteral(AStringLiteralLiteral node)
    {
        inAStringLiteralLiteral(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStringLiteralLiteral(node);
    }

    public void inACollectionLiteralLiteral(ACollectionLiteralLiteral node)
    {
        defaultIn(node);
    }

    public void outACollectionLiteralLiteral(ACollectionLiteralLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACollectionLiteralLiteral(ACollectionLiteralLiteral node)
    {
        inACollectionLiteralLiteral(node);
        if(node.getCollectionLiteral() != null)
        {
            node.getCollectionLiteral().apply(this);
        }
        outACollectionLiteralLiteral(node);
    }

    public void inATupleLiteralLiteral(ATupleLiteralLiteral node)
    {
        defaultIn(node);
    }

    public void outATupleLiteralLiteral(ATupleLiteralLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATupleLiteralLiteral(ATupleLiteralLiteral node)
    {
        inATupleLiteralLiteral(node);
        if(node.getTupleLiteral() != null)
        {
            node.getTupleLiteral().apply(this);
        }
        outATupleLiteralLiteral(node);
    }

    public void inASimpleNameName(ASimpleNameName node)
    {
        defaultIn(node);
    }

    public void outASimpleNameName(ASimpleNameName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleNameName(ASimpleNameName node)
    {
        inASimpleNameName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outASimpleNameName(node);
    }

    public void inAQualifiedNameName(AQualifiedNameName node)
    {
        defaultIn(node);
    }

    public void outAQualifiedNameName(AQualifiedNameName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQualifiedNameName(AQualifiedNameName node)
    {
        inAQualifiedNameName(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAQualifiedNameName(node);
    }

    public void inABasicGelloType(ABasicGelloType node)
    {
        defaultIn(node);
    }

    public void outABasicGelloType(ABasicGelloType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABasicGelloType(ABasicGelloType node)
    {
        inABasicGelloType(node);
        if(node.getBasicType() != null)
        {
            node.getBasicType().apply(this);
        }
        outABasicGelloType(node);
    }

    public void inACollectionGelloType(ACollectionGelloType node)
    {
        defaultIn(node);
    }

    public void outACollectionGelloType(ACollectionGelloType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACollectionGelloType(ACollectionGelloType node)
    {
        inACollectionGelloType(node);
        if(node.getCollectionType() != null)
        {
            node.getCollectionType().apply(this);
        }
        outACollectionGelloType(node);
    }

    public void inATupleGelloType(ATupleGelloType node)
    {
        defaultIn(node);
    }

    public void outATupleGelloType(ATupleGelloType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATupleGelloType(ATupleGelloType node)
    {
        inATupleGelloType(node);
        if(node.getTupleType() != null)
        {
            node.getTupleType().apply(this);
        }
        outATupleGelloType(node);
    }

    public void inAIntBasicType(AIntBasicType node)
    {
        defaultIn(node);
    }

    public void outAIntBasicType(AIntBasicType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntBasicType(AIntBasicType node)
    {
        inAIntBasicType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntBasicType(node);
    }

    public void inAStringBasicType(AStringBasicType node)
    {
        defaultIn(node);
    }

    public void outAStringBasicType(AStringBasicType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringBasicType(AStringBasicType node)
    {
        inAStringBasicType(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringBasicType(node);
    }

    public void inARealBasicType(ARealBasicType node)
    {
        defaultIn(node);
    }

    public void outARealBasicType(ARealBasicType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealBasicType(ARealBasicType node)
    {
        inARealBasicType(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARealBasicType(node);
    }

    public void inABooleanBasicType(ABooleanBasicType node)
    {
        defaultIn(node);
    }

    public void outABooleanBasicType(ABooleanBasicType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanBasicType(ABooleanBasicType node)
    {
        inABooleanBasicType(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanBasicType(node);
    }

    public void inASetCollectionType(ASetCollectionType node)
    {
        defaultIn(node);
    }

    public void outASetCollectionType(ASetCollectionType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetCollectionType(ASetCollectionType node)
    {
        inASetCollectionType(node);
        if(node.getSet() != null)
        {
            node.getSet().apply(this);
        }
        outASetCollectionType(node);
    }

    public void inABagCollectionType(ABagCollectionType node)
    {
        defaultIn(node);
    }

    public void outABagCollectionType(ABagCollectionType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABagCollectionType(ABagCollectionType node)
    {
        inABagCollectionType(node);
        if(node.getBag() != null)
        {
            node.getBag().apply(this);
        }
        outABagCollectionType(node);
    }

    public void inASequenceCollectionType(ASequenceCollectionType node)
    {
        defaultIn(node);
    }

    public void outASequenceCollectionType(ASequenceCollectionType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASequenceCollectionType(ASequenceCollectionType node)
    {
        inASequenceCollectionType(node);
        if(node.getSequence() != null)
        {
            node.getSequence().apply(this);
        }
        outASequenceCollectionType(node);
    }

    public void inATupleType(ATupleType node)
    {
        defaultIn(node);
    }

    public void outATupleType(ATupleType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATupleType(ATupleType node)
    {
        inATupleType(node);
        if(node.getTuple() != null)
        {
            node.getTuple().apply(this);
        }
        outATupleType(node);
    }

    public void inALiteralPrimary(ALiteralPrimary node)
    {
        defaultIn(node);
    }

    public void outALiteralPrimary(ALiteralPrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALiteralPrimary(ALiteralPrimary node)
    {
        inALiteralPrimary(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        outALiteralPrimary(node);
    }

    public void inALParenPrimary(ALParenPrimary node)
    {
        defaultIn(node);
    }

    public void outALParenPrimary(ALParenPrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALParenPrimary(ALParenPrimary node)
    {
        inALParenPrimary(node);
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        outALParenPrimary(node);
    }

    public void inAFieldAccessPrimary(AFieldAccessPrimary node)
    {
        defaultIn(node);
    }

    public void outAFieldAccessPrimary(AFieldAccessPrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldAccessPrimary(AFieldAccessPrimary node)
    {
        inAFieldAccessPrimary(node);
        if(node.getFieldAccess() != null)
        {
            node.getFieldAccess().apply(this);
        }
        outAFieldAccessPrimary(node);
    }

    public void inAMethodInvocationPrimary(AMethodInvocationPrimary node)
    {
        defaultIn(node);
    }

    public void outAMethodInvocationPrimary(AMethodInvocationPrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodInvocationPrimary(AMethodInvocationPrimary node)
    {
        inAMethodInvocationPrimary(node);
        if(node.getMethodInvocation() != null)
        {
            node.getMethodInvocation().apply(this);
        }
        outAMethodInvocationPrimary(node);
    }

    public void inAExpressionArgumentList(AExpressionArgumentList node)
    {
        defaultIn(node);
    }

    public void outAExpressionArgumentList(AExpressionArgumentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionArgumentList(AExpressionArgumentList node)
    {
        inAExpressionArgumentList(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExpressionArgumentList(node);
    }

    public void inAArgumentListArgumentList(AArgumentListArgumentList node)
    {
        defaultIn(node);
    }

    public void outAArgumentListArgumentList(AArgumentListArgumentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgumentListArgumentList(AArgumentListArgumentList node)
    {
        inAArgumentListArgumentList(node);
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAArgumentListArgumentList(node);
    }

    public void inAFieldAccess(AFieldAccess node)
    {
        defaultIn(node);
    }

    public void outAFieldAccess(AFieldAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldAccess(AFieldAccess node)
    {
        inAFieldAccess(node);
        if(node.getPrimary() != null)
        {
            node.getPrimary().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAFieldAccess(node);
    }

    public void inANameMethodInvocation(ANameMethodInvocation node)
    {
        defaultIn(node);
    }

    public void outANameMethodInvocation(ANameMethodInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameMethodInvocation(ANameMethodInvocation node)
    {
        inANameMethodInvocation(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        outANameMethodInvocation(node);
    }

    public void inAPrimaryMethodInvocation(APrimaryMethodInvocation node)
    {
        defaultIn(node);
    }

    public void outAPrimaryMethodInvocation(APrimaryMethodInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryMethodInvocation(APrimaryMethodInvocation node)
    {
        inAPrimaryMethodInvocation(node);
        if(node.getPrimary() != null)
        {
            node.getPrimary().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        outAPrimaryMethodInvocation(node);
    }

    public void inANameCollectionMethodInvocation(ANameCollectionMethodInvocation node)
    {
        defaultIn(node);
    }

    public void outANameCollectionMethodInvocation(ANameCollectionMethodInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameCollectionMethodInvocation(ANameCollectionMethodInvocation node)
    {
        inANameCollectionMethodInvocation(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getArrow() != null)
        {
            node.getArrow().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getCollectionArgument() != null)
        {
            node.getCollectionArgument().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        outANameCollectionMethodInvocation(node);
    }

    public void inACollectionMethodInvocation(ACollectionMethodInvocation node)
    {
        defaultIn(node);
    }

    public void outACollectionMethodInvocation(ACollectionMethodInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACollectionMethodInvocation(ACollectionMethodInvocation node)
    {
        inACollectionMethodInvocation(node);
        if(node.getPrimary() != null)
        {
            node.getPrimary().apply(this);
        }
        if(node.getArrow() != null)
        {
            node.getArrow().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getCollectionArgument() != null)
        {
            node.getCollectionArgument().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        outACollectionMethodInvocation(node);
    }

    public void inANameTupleMethodInvocation(ANameTupleMethodInvocation node)
    {
        defaultIn(node);
    }

    public void outANameTupleMethodInvocation(ANameTupleMethodInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameTupleMethodInvocation(ANameTupleMethodInvocation node)
    {
        inANameTupleMethodInvocation(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getArrow() != null)
        {
            node.getArrow().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getJoinArgument() != null)
        {
            node.getJoinArgument().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        outANameTupleMethodInvocation(node);
    }

    public void inATupleMethodInvocation(ATupleMethodInvocation node)
    {
        defaultIn(node);
    }

    public void outATupleMethodInvocation(ATupleMethodInvocation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATupleMethodInvocation(ATupleMethodInvocation node)
    {
        inATupleMethodInvocation(node);
        if(node.getPrimary() != null)
        {
            node.getPrimary().apply(this);
        }
        if(node.getArrow() != null)
        {
            node.getArrow().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getJoinArgument() != null)
        {
            node.getJoinArgument().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        outATupleMethodInvocation(node);
    }

    public void inAIdType(AIdType node)
    {
        defaultIn(node);
    }

    public void outAIdType(AIdType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdType(AIdType node)
    {
        inAIdType(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdType(node);
    }

    public void inAGelloType(AGelloType node)
    {
        defaultIn(node);
    }

    public void outAGelloType(AGelloType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGelloType(AGelloType node)
    {
        inAGelloType(node);
        if(node.getGelloType() != null)
        {
            node.getGelloType().apply(this);
        }
        outAGelloType(node);
    }

    public void inASimpleCollectionArgument(ASimpleCollectionArgument node)
    {
        defaultIn(node);
    }

    public void outASimpleCollectionArgument(ASimpleCollectionArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleCollectionArgument(ASimpleCollectionArgument node)
    {
        inASimpleCollectionArgument(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outASimpleCollectionArgument(node);
    }

    public void inANamedCollectionArgument(ANamedCollectionArgument node)
    {
        defaultIn(node);
    }

    public void outANamedCollectionArgument(ANamedCollectionArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANamedCollectionArgument(ANamedCollectionArgument node)
    {
        inANamedCollectionArgument(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outANamedCollectionArgument(node);
    }

    public void inATypedCollectionArgument(ATypedCollectionArgument node)
    {
        defaultIn(node);
    }

    public void outATypedCollectionArgument(ATypedCollectionArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypedCollectionArgument(ATypedCollectionArgument node)
    {
        inATypedCollectionArgument(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outATypedCollectionArgument(node);
    }

    public void inAIterateCollectionArgument(AIterateCollectionArgument node)
    {
        defaultIn(node);
    }

    public void outAIterateCollectionArgument(AIterateCollectionArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIterateCollectionArgument(AIterateCollectionArgument node)
    {
        inAIterateCollectionArgument(node);
        if(node.getIterid() != null)
        {
            node.getIterid().apply(this);
        }
        if(node.getItercolon() != null)
        {
            node.getItercolon().apply(this);
        }
        if(node.getItertype() != null)
        {
            node.getItertype().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getAccid() != null)
        {
            node.getAccid().apply(this);
        }
        if(node.getAcccolon() != null)
        {
            node.getAcccolon().apply(this);
        }
        if(node.getAcctype() != null)
        {
            node.getAcctype().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getAccexpr() != null)
        {
            node.getAccexpr().apply(this);
        }
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        if(node.getFilterexpr() != null)
        {
            node.getFilterexpr().apply(this);
        }
        outAIterateCollectionArgument(node);
    }

    public void inASimpleJoinCollection(ASimpleJoinCollection node)
    {
        defaultIn(node);
    }

    public void outASimpleJoinCollection(ASimpleJoinCollection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleJoinCollection(ASimpleJoinCollection node)
    {
        inASimpleJoinCollection(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outASimpleJoinCollection(node);
    }

    public void inAAliasedJoinCollection(AAliasedJoinCollection node)
    {
        defaultIn(node);
    }

    public void outAAliasedJoinCollection(AAliasedJoinCollection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAliasedJoinCollection(AAliasedJoinCollection node)
    {
        inAAliasedJoinCollection(node);
        if(node.getAlias() != null)
        {
            node.getAlias().apply(this);
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getCollection() != null)
        {
            node.getCollection().apply(this);
        }
        outAAliasedJoinCollection(node);
    }

    public void inASingleJoinCollectionList(ASingleJoinCollectionList node)
    {
        defaultIn(node);
    }

    public void outASingleJoinCollectionList(ASingleJoinCollectionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleJoinCollectionList(ASingleJoinCollectionList node)
    {
        inASingleJoinCollectionList(node);
        if(node.getJoinCollection() != null)
        {
            node.getJoinCollection().apply(this);
        }
        outASingleJoinCollectionList(node);
    }

    public void inAListJoinCollectionList(AListJoinCollectionList node)
    {
        defaultIn(node);
    }

    public void outAListJoinCollectionList(AListJoinCollectionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListJoinCollectionList(AListJoinCollectionList node)
    {
        inAListJoinCollectionList(node);
        if(node.getJoinCollectionList() != null)
        {
            node.getJoinCollectionList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getJoinCollection() != null)
        {
            node.getJoinCollection().apply(this);
        }
        outAListJoinCollectionList(node);
    }

    public void inAJoinProperty(AJoinProperty node)
    {
        defaultIn(node);
    }

    public void outAJoinProperty(AJoinProperty node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJoinProperty(AJoinProperty node)
    {
        inAJoinProperty(node);
        if(node.getCollection() != null)
        {
            node.getCollection().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getMember() != null)
        {
            node.getMember().apply(this);
        }
        outAJoinProperty(node);
    }

    public void inASingleJoinPropertyList(ASingleJoinPropertyList node)
    {
        defaultIn(node);
    }

    public void outASingleJoinPropertyList(ASingleJoinPropertyList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleJoinPropertyList(ASingleJoinPropertyList node)
    {
        inASingleJoinPropertyList(node);
        if(node.getJoinProperty() != null)
        {
            node.getJoinProperty().apply(this);
        }
        outASingleJoinPropertyList(node);
    }

    public void inAListJoinPropertyList(AListJoinPropertyList node)
    {
        defaultIn(node);
    }

    public void outAListJoinPropertyList(AListJoinPropertyList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListJoinPropertyList(AListJoinPropertyList node)
    {
        inAListJoinPropertyList(node);
        if(node.getJoinPropertyList() != null)
        {
            node.getJoinPropertyList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getJoinProperty() != null)
        {
            node.getJoinProperty().apply(this);
        }
        outAListJoinPropertyList(node);
    }

    public void inAUnorderedJoinArgument(AUnorderedJoinArgument node)
    {
        defaultIn(node);
    }

    public void outAUnorderedJoinArgument(AUnorderedJoinArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnorderedJoinArgument(AUnorderedJoinArgument node)
    {
        inAUnorderedJoinArgument(node);
        if(node.getJoinCollectionList() != null)
        {
            node.getJoinCollectionList().apply(this);
        }
        if(node.getS1() != null)
        {
            node.getS1().apply(this);
        }
        if(node.getJoinPropertyList() != null)
        {
            node.getJoinPropertyList().apply(this);
        }
        if(node.getS2() != null)
        {
            node.getS2().apply(this);
        }
        if(node.getFilter() != null)
        {
            node.getFilter().apply(this);
        }
        outAUnorderedJoinArgument(node);
    }

    public void inAOrderedJoinArgument(AOrderedJoinArgument node)
    {
        defaultIn(node);
    }

    public void outAOrderedJoinArgument(AOrderedJoinArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrderedJoinArgument(AOrderedJoinArgument node)
    {
        inAOrderedJoinArgument(node);
        if(node.getJoinCollectionList() != null)
        {
            node.getJoinCollectionList().apply(this);
        }
        if(node.getS1() != null)
        {
            node.getS1().apply(this);
        }
        if(node.getJoinPropertyList() != null)
        {
            node.getJoinPropertyList().apply(this);
        }
        if(node.getS2() != null)
        {
            node.getS2().apply(this);
        }
        if(node.getFilter() != null)
        {
            node.getFilter().apply(this);
        }
        if(node.getS3() != null)
        {
            node.getS3().apply(this);
        }
        if(node.getOrder() != null)
        {
            node.getOrder().apply(this);
        }
        outAOrderedJoinArgument(node);
    }

    public void inAPrimaryPostfixExpression(APrimaryPostfixExpression node)
    {
        defaultIn(node);
    }

    public void outAPrimaryPostfixExpression(APrimaryPostfixExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryPostfixExpression(APrimaryPostfixExpression node)
    {
        inAPrimaryPostfixExpression(node);
        if(node.getPrimary() != null)
        {
            node.getPrimary().apply(this);
        }
        outAPrimaryPostfixExpression(node);
    }

    public void inANamePostfixExpression(ANamePostfixExpression node)
    {
        defaultIn(node);
    }

    public void outANamePostfixExpression(ANamePostfixExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANamePostfixExpression(ANamePostfixExpression node)
    {
        inANamePostfixExpression(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outANamePostfixExpression(node);
    }

    public void inAMinusUnaryExpression(AMinusUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAMinusUnaryExpression(AMinusUnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusUnaryExpression(AMinusUnaryExpression node)
    {
        inAMinusUnaryExpression(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        outAMinusUnaryExpression(node);
    }

    public void inANotUnaryExpression(ANotUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outANotUnaryExpression(ANotUnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotUnaryExpression(ANotUnaryExpression node)
    {
        inANotUnaryExpression(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        outANotUnaryExpression(node);
    }

    public void inAPostfixUnaryExpression(APostfixUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAPostfixUnaryExpression(APostfixUnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPostfixUnaryExpression(APostfixUnaryExpression node)
    {
        inAPostfixUnaryExpression(node);
        if(node.getPostfixExpression() != null)
        {
            node.getPostfixExpression().apply(this);
        }
        outAPostfixUnaryExpression(node);
    }

    public void inAUnaryMultiplicativeExpression(AUnaryMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outAUnaryMultiplicativeExpression(AUnaryMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryMultiplicativeExpression(AUnaryMultiplicativeExpression node)
    {
        inAUnaryMultiplicativeExpression(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        outAUnaryMultiplicativeExpression(node);
    }

    public void inAMultiplyMultiplicativeExpression(AMultiplyMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outAMultiplyMultiplicativeExpression(AMultiplyMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplyMultiplicativeExpression(AMultiplyMultiplicativeExpression node)
    {
        inAMultiplyMultiplicativeExpression(node);
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        outAMultiplyMultiplicativeExpression(node);
    }

    public void inADivideMultiplicativeExpression(ADivideMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outADivideMultiplicativeExpression(ADivideMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivideMultiplicativeExpression(ADivideMultiplicativeExpression node)
    {
        inADivideMultiplicativeExpression(node);
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        if(node.getDivide() != null)
        {
            node.getDivide().apply(this);
        }
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        outADivideMultiplicativeExpression(node);
    }

    public void inAIntdivMultiplicativeExpression(AIntdivMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outAIntdivMultiplicativeExpression(AIntdivMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntdivMultiplicativeExpression(AIntdivMultiplicativeExpression node)
    {
        inAIntdivMultiplicativeExpression(node);
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        if(node.getIntdiv() != null)
        {
            node.getIntdiv().apply(this);
        }
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        outAIntdivMultiplicativeExpression(node);
    }

    public void inAModMultiplicativeExpression(AModMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outAModMultiplicativeExpression(AModMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModMultiplicativeExpression(AModMultiplicativeExpression node)
    {
        inAModMultiplicativeExpression(node);
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        outAModMultiplicativeExpression(node);
    }

    public void inAMaxMultiplicativeExpression(AMaxMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outAMaxMultiplicativeExpression(AMaxMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaxMultiplicativeExpression(AMaxMultiplicativeExpression node)
    {
        inAMaxMultiplicativeExpression(node);
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        if(node.getMax() != null)
        {
            node.getMax().apply(this);
        }
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        outAMaxMultiplicativeExpression(node);
    }

    public void inAMinMultiplicativeExpression(AMinMultiplicativeExpression node)
    {
        defaultIn(node);
    }

    public void outAMinMultiplicativeExpression(AMinMultiplicativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinMultiplicativeExpression(AMinMultiplicativeExpression node)
    {
        inAMinMultiplicativeExpression(node);
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        if(node.getMin() != null)
        {
            node.getMin().apply(this);
        }
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        outAMinMultiplicativeExpression(node);
    }

    public void inAMultiplyAdditiveExpression(AMultiplyAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outAMultiplyAdditiveExpression(AMultiplyAdditiveExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplyAdditiveExpression(AMultiplyAdditiveExpression node)
    {
        inAMultiplyAdditiveExpression(node);
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        outAMultiplyAdditiveExpression(node);
    }

    public void inAPlusAdditiveExpression(APlusAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outAPlusAdditiveExpression(APlusAdditiveExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusAdditiveExpression(APlusAdditiveExpression node)
    {
        inAPlusAdditiveExpression(node);
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        outAPlusAdditiveExpression(node);
    }

    public void inAMinusAdditiveExpression(AMinusAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outAMinusAdditiveExpression(AMinusAdditiveExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusAdditiveExpression(AMinusAdditiveExpression node)
    {
        inAMinusAdditiveExpression(node);
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getMultiplicativeExpression() != null)
        {
            node.getMultiplicativeExpression().apply(this);
        }
        outAMinusAdditiveExpression(node);
    }

    public void inAAdditiveExpressionRelationalExpression(AAdditiveExpressionRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outAAdditiveExpressionRelationalExpression(AAdditiveExpressionRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdditiveExpressionRelationalExpression(AAdditiveExpressionRelationalExpression node)
    {
        inAAdditiveExpressionRelationalExpression(node);
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        outAAdditiveExpressionRelationalExpression(node);
    }

    public void inALtRelationalExpression(ALtRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outALtRelationalExpression(ALtRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtRelationalExpression(ALtRelationalExpression node)
    {
        inALtRelationalExpression(node);
        if(node.getRelationalExpression() != null)
        {
            node.getRelationalExpression().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        outALtRelationalExpression(node);
    }

    public void inAGtRelationalExpression(AGtRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outAGtRelationalExpression(AGtRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtRelationalExpression(AGtRelationalExpression node)
    {
        inAGtRelationalExpression(node);
        if(node.getRelationalExpression() != null)
        {
            node.getRelationalExpression().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        outAGtRelationalExpression(node);
    }

    public void inALteqRelationalExpression(ALteqRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outALteqRelationalExpression(ALteqRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALteqRelationalExpression(ALteqRelationalExpression node)
    {
        inALteqRelationalExpression(node);
        if(node.getRelationalExpression() != null)
        {
            node.getRelationalExpression().apply(this);
        }
        if(node.getLteq() != null)
        {
            node.getLteq().apply(this);
        }
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        outALteqRelationalExpression(node);
    }

    public void inAGteqRelationalExpression(AGteqRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outAGteqRelationalExpression(AGteqRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGteqRelationalExpression(AGteqRelationalExpression node)
    {
        inAGteqRelationalExpression(node);
        if(node.getRelationalExpression() != null)
        {
            node.getRelationalExpression().apply(this);
        }
        if(node.getGteq() != null)
        {
            node.getGteq().apply(this);
        }
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        outAGteqRelationalExpression(node);
    }

    public void inAEqRelationalExpression(AEqRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outAEqRelationalExpression(AEqRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqRelationalExpression(AEqRelationalExpression node)
    {
        inAEqRelationalExpression(node);
        if(node.getRelationalExpression() != null)
        {
            node.getRelationalExpression().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        outAEqRelationalExpression(node);
    }

    public void inANeqRelationalExpression(ANeqRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outANeqRelationalExpression(ANeqRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeqRelationalExpression(ANeqRelationalExpression node)
    {
        inANeqRelationalExpression(node);
        if(node.getRelationalExpression() != null)
        {
            node.getRelationalExpression().apply(this);
        }
        if(node.getNeq() != null)
        {
            node.getNeq().apply(this);
        }
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        outANeqRelationalExpression(node);
    }

    public void inARelationalConditionalAndExpression(ARelationalConditionalAndExpression node)
    {
        defaultIn(node);
    }

    public void outARelationalConditionalAndExpression(ARelationalConditionalAndExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelationalConditionalAndExpression(ARelationalConditionalAndExpression node)
    {
        inARelationalConditionalAndExpression(node);
        if(node.getRelationalExpression() != null)
        {
            node.getRelationalExpression().apply(this);
        }
        outARelationalConditionalAndExpression(node);
    }

    public void inAAndConditionalAndExpression(AAndConditionalAndExpression node)
    {
        defaultIn(node);
    }

    public void outAAndConditionalAndExpression(AAndConditionalAndExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndConditionalAndExpression(AAndConditionalAndExpression node)
    {
        inAAndConditionalAndExpression(node);
        if(node.getConditionalAndExpression() != null)
        {
            node.getConditionalAndExpression().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getRelationalExpression() != null)
        {
            node.getRelationalExpression().apply(this);
        }
        outAAndConditionalAndExpression(node);
    }

    public void inAAndConditionalOrExpression(AAndConditionalOrExpression node)
    {
        defaultIn(node);
    }

    public void outAAndConditionalOrExpression(AAndConditionalOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndConditionalOrExpression(AAndConditionalOrExpression node)
    {
        inAAndConditionalOrExpression(node);
        if(node.getConditionalAndExpression() != null)
        {
            node.getConditionalAndExpression().apply(this);
        }
        outAAndConditionalOrExpression(node);
    }

    public void inAOrConditionalOrExpression(AOrConditionalOrExpression node)
    {
        defaultIn(node);
    }

    public void outAOrConditionalOrExpression(AOrConditionalOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrConditionalOrExpression(AOrConditionalOrExpression node)
    {
        inAOrConditionalOrExpression(node);
        if(node.getConditionalOrExpression() != null)
        {
            node.getConditionalOrExpression().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getConditionalAndExpression() != null)
        {
            node.getConditionalAndExpression().apply(this);
        }
        outAOrConditionalOrExpression(node);
    }

    public void inAXorConditionalOrExpression(AXorConditionalOrExpression node)
    {
        defaultIn(node);
    }

    public void outAXorConditionalOrExpression(AXorConditionalOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorConditionalOrExpression(AXorConditionalOrExpression node)
    {
        inAXorConditionalOrExpression(node);
        if(node.getConditionalOrExpression() != null)
        {
            node.getConditionalOrExpression().apply(this);
        }
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        if(node.getConditionalAndExpression() != null)
        {
            node.getConditionalAndExpression().apply(this);
        }
        outAXorConditionalOrExpression(node);
    }

    public void inAOrConditionalExpression(AOrConditionalExpression node)
    {
        defaultIn(node);
    }

    public void outAOrConditionalExpression(AOrConditionalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrConditionalExpression(AOrConditionalExpression node)
    {
        inAOrConditionalExpression(node);
        if(node.getConditionalOrExpression() != null)
        {
            node.getConditionalOrExpression().apply(this);
        }
        outAOrConditionalExpression(node);
    }

    public void inAImpliesConditionalExpression(AImpliesConditionalExpression node)
    {
        defaultIn(node);
    }

    public void outAImpliesConditionalExpression(AImpliesConditionalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImpliesConditionalExpression(AImpliesConditionalExpression node)
    {
        inAImpliesConditionalExpression(node);
        if(node.getConditionalExpression() != null)
        {
            node.getConditionalExpression().apply(this);
        }
        if(node.getImplies() != null)
        {
            node.getImplies().apply(this);
        }
        if(node.getConditionalOrExpression() != null)
        {
            node.getConditionalOrExpression().apply(this);
        }
        outAImpliesConditionalExpression(node);
    }

    public void inAExpressionCollectionLiteralArgument(AExpressionCollectionLiteralArgument node)
    {
        defaultIn(node);
    }

    public void outAExpressionCollectionLiteralArgument(AExpressionCollectionLiteralArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionCollectionLiteralArgument(AExpressionCollectionLiteralArgument node)
    {
        inAExpressionCollectionLiteralArgument(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExpressionCollectionLiteralArgument(node);
    }

    public void inARangeCollectionLiteralArgument(ARangeCollectionLiteralArgument node)
    {
        defaultIn(node);
    }

    public void outARangeCollectionLiteralArgument(ARangeCollectionLiteralArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARangeCollectionLiteralArgument(ARangeCollectionLiteralArgument node)
    {
        inARangeCollectionLiteralArgument(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getBegin() != null)
        {
            node.getBegin().apply(this);
        }
        if(node.getDotdot() != null)
        {
            node.getDotdot().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outARangeCollectionLiteralArgument(node);
    }

    public void inASingleCollectionList(ASingleCollectionList node)
    {
        defaultIn(node);
    }

    public void outASingleCollectionList(ASingleCollectionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleCollectionList(ASingleCollectionList node)
    {
        inASingleCollectionList(node);
        if(node.getCollectionLiteralArgument() != null)
        {
            node.getCollectionLiteralArgument().apply(this);
        }
        outASingleCollectionList(node);
    }

    public void inAListCollectionList(AListCollectionList node)
    {
        defaultIn(node);
    }

    public void outAListCollectionList(AListCollectionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListCollectionList(AListCollectionList node)
    {
        inAListCollectionList(node);
        if(node.getCollectionList() != null)
        {
            node.getCollectionList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getCollectionLiteralArgument() != null)
        {
            node.getCollectionLiteralArgument().apply(this);
        }
        outAListCollectionList(node);
    }

    public void inACollectionLiteral(ACollectionLiteral node)
    {
        defaultIn(node);
    }

    public void outACollectionLiteral(ACollectionLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACollectionLiteral(ACollectionLiteral node)
    {
        inACollectionLiteral(node);
        if(node.getCollectionType() != null)
        {
            node.getCollectionType().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getCollectionList() != null)
        {
            node.getCollectionList().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outACollectionLiteral(node);
    }

    public void inATypedVarDefinition(ATypedVarDefinition node)
    {
        defaultIn(node);
    }

    public void outATypedVarDefinition(ATypedVarDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypedVarDefinition(ATypedVarDefinition node)
    {
        inATypedVarDefinition(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outATypedVarDefinition(node);
    }

    public void inABindingTupleLiteralList(ABindingTupleLiteralList node)
    {
        defaultIn(node);
    }

    public void outABindingTupleLiteralList(ABindingTupleLiteralList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABindingTupleLiteralList(ABindingTupleLiteralList node)
    {
        inABindingTupleLiteralList(node);
        if(node.getTypedVarDefinition() != null)
        {
            node.getTypedVarDefinition().apply(this);
        }
        outABindingTupleLiteralList(node);
    }

    public void inAListTupleLiteralList(AListTupleLiteralList node)
    {
        defaultIn(node);
    }

    public void outAListTupleLiteralList(AListTupleLiteralList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListTupleLiteralList(AListTupleLiteralList node)
    {
        inAListTupleLiteralList(node);
        if(node.getTupleLiteralList() != null)
        {
            node.getTupleLiteralList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getTypedVarDefinition() != null)
        {
            node.getTypedVarDefinition().apply(this);
        }
        outAListTupleLiteralList(node);
    }

    public void inATupleLiteral(ATupleLiteral node)
    {
        defaultIn(node);
    }

    public void outATupleLiteral(ATupleLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATupleLiteral(ATupleLiteral node)
    {
        inATupleLiteral(node);
        if(node.getTuple() != null)
        {
            node.getTuple().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getTupleLiteralList() != null)
        {
            node.getTupleLiteralList().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outATupleLiteral(node);
    }
}
