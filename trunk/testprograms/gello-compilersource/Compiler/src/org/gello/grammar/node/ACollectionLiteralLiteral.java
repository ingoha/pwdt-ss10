/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.gello.grammar.node;

import org.gello.grammar.analysis.*;

@SuppressWarnings("nls")
public final class ACollectionLiteralLiteral extends PLiteral
{
    private PCollectionLiteral _collectionLiteral_;

    public ACollectionLiteralLiteral()
    {
        // Constructor
    }

    public ACollectionLiteralLiteral(
        @SuppressWarnings("hiding") PCollectionLiteral _collectionLiteral_)
    {
        // Constructor
        setCollectionLiteral(_collectionLiteral_);

    }

    @Override
    public Object clone()
    {
        return new ACollectionLiteralLiteral(
            cloneNode(this._collectionLiteral_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACollectionLiteralLiteral(this);
    }

    public PCollectionLiteral getCollectionLiteral()
    {
        return this._collectionLiteral_;
    }

    public void setCollectionLiteral(PCollectionLiteral node)
    {
        if(this._collectionLiteral_ != null)
        {
            this._collectionLiteral_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._collectionLiteral_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._collectionLiteral_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._collectionLiteral_ == child)
        {
            this._collectionLiteral_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._collectionLiteral_ == oldChild)
        {
            setCollectionLiteral((PCollectionLiteral) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
