/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.gello.grammar.node;

import org.gello.grammar.analysis.*;

@SuppressWarnings("nls")
public final class ALetLetExpression extends PLetExpression
{
    private TLet _let_;
    private TIdentifier _identifier_;
    private TColon _colon_;
    private PType _type_;
    private TEq _eq_;
    private PIfExpression _ifExpression_;
    private PInClause _inClause_;

    public ALetLetExpression()
    {
        // Constructor
    }

    public ALetLetExpression(
        @SuppressWarnings("hiding") TLet _let_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") PType _type_,
        @SuppressWarnings("hiding") TEq _eq_,
        @SuppressWarnings("hiding") PIfExpression _ifExpression_,
        @SuppressWarnings("hiding") PInClause _inClause_)
    {
        // Constructor
        setLet(_let_);

        setIdentifier(_identifier_);

        setColon(_colon_);

        setType(_type_);

        setEq(_eq_);

        setIfExpression(_ifExpression_);

        setInClause(_inClause_);

    }

    @Override
    public Object clone()
    {
        return new ALetLetExpression(
            cloneNode(this._let_),
            cloneNode(this._identifier_),
            cloneNode(this._colon_),
            cloneNode(this._type_),
            cloneNode(this._eq_),
            cloneNode(this._ifExpression_),
            cloneNode(this._inClause_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALetLetExpression(this);
    }

    public TLet getLet()
    {
        return this._let_;
    }

    public void setLet(TLet node)
    {
        if(this._let_ != null)
        {
            this._let_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._let_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public PType getType()
    {
        return this._type_;
    }

    public void setType(PType node)
    {
        if(this._type_ != null)
        {
            this._type_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._type_ = node;
    }

    public TEq getEq()
    {
        return this._eq_;
    }

    public void setEq(TEq node)
    {
        if(this._eq_ != null)
        {
            this._eq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._eq_ = node;
    }

    public PIfExpression getIfExpression()
    {
        return this._ifExpression_;
    }

    public void setIfExpression(PIfExpression node)
    {
        if(this._ifExpression_ != null)
        {
            this._ifExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ifExpression_ = node;
    }

    public PInClause getInClause()
    {
        return this._inClause_;
    }

    public void setInClause(PInClause node)
    {
        if(this._inClause_ != null)
        {
            this._inClause_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._inClause_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._let_)
            + toString(this._identifier_)
            + toString(this._colon_)
            + toString(this._type_)
            + toString(this._eq_)
            + toString(this._ifExpression_)
            + toString(this._inClause_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._let_ == child)
        {
            this._let_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._type_ == child)
        {
            this._type_ = null;
            return;
        }

        if(this._eq_ == child)
        {
            this._eq_ = null;
            return;
        }

        if(this._ifExpression_ == child)
        {
            this._ifExpression_ = null;
            return;
        }

        if(this._inClause_ == child)
        {
            this._inClause_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._let_ == oldChild)
        {
            setLet((TLet) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(this._type_ == oldChild)
        {
            setType((PType) newChild);
            return;
        }

        if(this._eq_ == oldChild)
        {
            setEq((TEq) newChild);
            return;
        }

        if(this._ifExpression_ == oldChild)
        {
            setIfExpression((PIfExpression) newChild);
            return;
        }

        if(this._inClause_ == oldChild)
        {
            setInClause((PInClause) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
