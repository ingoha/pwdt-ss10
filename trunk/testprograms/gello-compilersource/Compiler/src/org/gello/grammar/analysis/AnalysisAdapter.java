/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.gello.grammar.analysis;

import java.util.*;
import org.gello.grammar.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAExpressionGoal(AExpressionGoal node)
    {
        defaultCase(node);
    }

    public void caseAContextGoal(AContextGoal node)
    {
        defaultCase(node);
    }

    public void caseAContextExpression(AContextExpression node)
    {
        defaultCase(node);
    }

    public void caseAExpression(AExpression node)
    {
        defaultCase(node);
    }

    public void caseAIfLetExpression(AIfLetExpression node)
    {
        defaultCase(node);
    }

    public void caseALetLetExpression(ALetLetExpression node)
    {
        defaultCase(node);
    }

    public void caseAInClause(AInClause node)
    {
        defaultCase(node);
    }

    public void caseAConditionalIfExpression(AConditionalIfExpression node)
    {
        defaultCase(node);
    }

    public void caseAIfIfExpression(AIfIfExpression node)
    {
        defaultCase(node);
    }

    public void caseAIntegerLiteralLiteral(AIntegerLiteralLiteral node)
    {
        defaultCase(node);
    }

    public void caseAFloatingPointLiteralLiteral(AFloatingPointLiteralLiteral node)
    {
        defaultCase(node);
    }

    public void caseAStringLiteralLiteral(AStringLiteralLiteral node)
    {
        defaultCase(node);
    }

    public void caseACollectionLiteralLiteral(ACollectionLiteralLiteral node)
    {
        defaultCase(node);
    }

    public void caseATupleLiteralLiteral(ATupleLiteralLiteral node)
    {
        defaultCase(node);
    }

    public void caseASimpleNameName(ASimpleNameName node)
    {
        defaultCase(node);
    }

    public void caseAQualifiedNameName(AQualifiedNameName node)
    {
        defaultCase(node);
    }

    public void caseABasicGelloType(ABasicGelloType node)
    {
        defaultCase(node);
    }

    public void caseACollectionGelloType(ACollectionGelloType node)
    {
        defaultCase(node);
    }

    public void caseATupleGelloType(ATupleGelloType node)
    {
        defaultCase(node);
    }

    public void caseAIntBasicType(AIntBasicType node)
    {
        defaultCase(node);
    }

    public void caseAStringBasicType(AStringBasicType node)
    {
        defaultCase(node);
    }

    public void caseARealBasicType(ARealBasicType node)
    {
        defaultCase(node);
    }

    public void caseABooleanBasicType(ABooleanBasicType node)
    {
        defaultCase(node);
    }

    public void caseASetCollectionType(ASetCollectionType node)
    {
        defaultCase(node);
    }

    public void caseABagCollectionType(ABagCollectionType node)
    {
        defaultCase(node);
    }

    public void caseASequenceCollectionType(ASequenceCollectionType node)
    {
        defaultCase(node);
    }

    public void caseATupleType(ATupleType node)
    {
        defaultCase(node);
    }

    public void caseALiteralPrimary(ALiteralPrimary node)
    {
        defaultCase(node);
    }

    public void caseALParenPrimary(ALParenPrimary node)
    {
        defaultCase(node);
    }

    public void caseAFieldAccessPrimary(AFieldAccessPrimary node)
    {
        defaultCase(node);
    }

    public void caseAMethodInvocationPrimary(AMethodInvocationPrimary node)
    {
        defaultCase(node);
    }

    public void caseAExpressionArgumentList(AExpressionArgumentList node)
    {
        defaultCase(node);
    }

    public void caseAArgumentListArgumentList(AArgumentListArgumentList node)
    {
        defaultCase(node);
    }

    public void caseAFieldAccess(AFieldAccess node)
    {
        defaultCase(node);
    }

    public void caseANameMethodInvocation(ANameMethodInvocation node)
    {
        defaultCase(node);
    }

    public void caseAPrimaryMethodInvocation(APrimaryMethodInvocation node)
    {
        defaultCase(node);
    }

    public void caseANameCollectionMethodInvocation(ANameCollectionMethodInvocation node)
    {
        defaultCase(node);
    }

    public void caseACollectionMethodInvocation(ACollectionMethodInvocation node)
    {
        defaultCase(node);
    }

    public void caseANameTupleMethodInvocation(ANameTupleMethodInvocation node)
    {
        defaultCase(node);
    }

    public void caseATupleMethodInvocation(ATupleMethodInvocation node)
    {
        defaultCase(node);
    }

    public void caseAIdType(AIdType node)
    {
        defaultCase(node);
    }

    public void caseAGelloType(AGelloType node)
    {
        defaultCase(node);
    }

    public void caseASimpleCollectionArgument(ASimpleCollectionArgument node)
    {
        defaultCase(node);
    }

    public void caseANamedCollectionArgument(ANamedCollectionArgument node)
    {
        defaultCase(node);
    }

    public void caseATypedCollectionArgument(ATypedCollectionArgument node)
    {
        defaultCase(node);
    }

    public void caseAIterateCollectionArgument(AIterateCollectionArgument node)
    {
        defaultCase(node);
    }

    public void caseASimpleJoinCollection(ASimpleJoinCollection node)
    {
        defaultCase(node);
    }

    public void caseAAliasedJoinCollection(AAliasedJoinCollection node)
    {
        defaultCase(node);
    }

    public void caseASingleJoinCollectionList(ASingleJoinCollectionList node)
    {
        defaultCase(node);
    }

    public void caseAListJoinCollectionList(AListJoinCollectionList node)
    {
        defaultCase(node);
    }

    public void caseAJoinProperty(AJoinProperty node)
    {
        defaultCase(node);
    }

    public void caseASingleJoinPropertyList(ASingleJoinPropertyList node)
    {
        defaultCase(node);
    }

    public void caseAListJoinPropertyList(AListJoinPropertyList node)
    {
        defaultCase(node);
    }

    public void caseAUnorderedJoinArgument(AUnorderedJoinArgument node)
    {
        defaultCase(node);
    }

    public void caseAOrderedJoinArgument(AOrderedJoinArgument node)
    {
        defaultCase(node);
    }

    public void caseAPrimaryPostfixExpression(APrimaryPostfixExpression node)
    {
        defaultCase(node);
    }

    public void caseANamePostfixExpression(ANamePostfixExpression node)
    {
        defaultCase(node);
    }

    public void caseAMinusUnaryExpression(AMinusUnaryExpression node)
    {
        defaultCase(node);
    }

    public void caseANotUnaryExpression(ANotUnaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAPostfixUnaryExpression(APostfixUnaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAUnaryMultiplicativeExpression(AUnaryMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseAMultiplyMultiplicativeExpression(AMultiplyMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseADivideMultiplicativeExpression(ADivideMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseAIntdivMultiplicativeExpression(AIntdivMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseAModMultiplicativeExpression(AModMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseAMaxMultiplicativeExpression(AMaxMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseAMinMultiplicativeExpression(AMinMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    public void caseAMultiplyAdditiveExpression(AMultiplyAdditiveExpression node)
    {
        defaultCase(node);
    }

    public void caseAPlusAdditiveExpression(APlusAdditiveExpression node)
    {
        defaultCase(node);
    }

    public void caseAMinusAdditiveExpression(AMinusAdditiveExpression node)
    {
        defaultCase(node);
    }

    public void caseAAdditiveExpressionRelationalExpression(AAdditiveExpressionRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseALtRelationalExpression(ALtRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseAGtRelationalExpression(AGtRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseALteqRelationalExpression(ALteqRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseAGteqRelationalExpression(AGteqRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseAEqRelationalExpression(AEqRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseANeqRelationalExpression(ANeqRelationalExpression node)
    {
        defaultCase(node);
    }

    public void caseARelationalConditionalAndExpression(ARelationalConditionalAndExpression node)
    {
        defaultCase(node);
    }

    public void caseAAndConditionalAndExpression(AAndConditionalAndExpression node)
    {
        defaultCase(node);
    }

    public void caseAAndConditionalOrExpression(AAndConditionalOrExpression node)
    {
        defaultCase(node);
    }

    public void caseAOrConditionalOrExpression(AOrConditionalOrExpression node)
    {
        defaultCase(node);
    }

    public void caseAXorConditionalOrExpression(AXorConditionalOrExpression node)
    {
        defaultCase(node);
    }

    public void caseAOrConditionalExpression(AOrConditionalExpression node)
    {
        defaultCase(node);
    }

    public void caseAImpliesConditionalExpression(AImpliesConditionalExpression node)
    {
        defaultCase(node);
    }

    public void caseAExpressionCollectionLiteralArgument(AExpressionCollectionLiteralArgument node)
    {
        defaultCase(node);
    }

    public void caseARangeCollectionLiteralArgument(ARangeCollectionLiteralArgument node)
    {
        defaultCase(node);
    }

    public void caseASingleCollectionList(ASingleCollectionList node)
    {
        defaultCase(node);
    }

    public void caseAListCollectionList(AListCollectionList node)
    {
        defaultCase(node);
    }

    public void caseACollectionLiteral(ACollectionLiteral node)
    {
        defaultCase(node);
    }

    public void caseATypedVarDefinition(ATypedVarDefinition node)
    {
        defaultCase(node);
    }

    public void caseABindingTupleLiteralList(ABindingTupleLiteralList node)
    {
        defaultCase(node);
    }

    public void caseAListTupleLiteralList(AListTupleLiteralList node)
    {
        defaultCase(node);
    }

    public void caseATupleLiteral(ATupleLiteral node)
    {
        defaultCase(node);
    }

    public void caseTWhiteSpace(TWhiteSpace node)
    {
        defaultCase(node);
    }

    public void caseTEndOfLineComment(TEndOfLineComment node)
    {
        defaultCase(node);
    }

    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    public void caseTThen(TThen node)
    {
        defaultCase(node);
    }

    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    public void caseTEndif(TEndif node)
    {
        defaultCase(node);
    }

    public void caseTLet(TLet node)
    {
        defaultCase(node);
    }

    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }

    public void caseTContext(TContext node)
    {
        defaultCase(node);
    }

    public void caseTEndcontext(TEndcontext node)
    {
        defaultCase(node);
    }

    public void caseTBoolean(TBoolean node)
    {
        defaultCase(node);
    }

    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    public void caseTReal(TReal node)
    {
        defaultCase(node);
    }

    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    public void caseTSet(TSet node)
    {
        defaultCase(node);
    }

    public void caseTBag(TBag node)
    {
        defaultCase(node);
    }

    public void caseTSequence(TSequence node)
    {
        defaultCase(node);
    }

    public void caseTTuple(TTuple node)
    {
        defaultCase(node);
    }

    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    public void caseTArrow(TArrow node)
    {
        defaultCase(node);
    }

    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTDivide(TDivide node)
    {
        defaultCase(node);
    }

    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    public void caseTDotdot(TDotdot node)
    {
        defaultCase(node);
    }

    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    public void caseTGteq(TGteq node)
    {
        defaultCase(node);
    }

    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    public void caseTImplies(TImplies node)
    {
        defaultCase(node);
    }

    public void caseTIntdiv(TIntdiv node)
    {
        defaultCase(node);
    }

    public void caseTLteq(TLteq node)
    {
        defaultCase(node);
    }

    public void caseTLt(TLt node)
    {
        defaultCase(node);
    }

    public void caseTMax(TMax node)
    {
        defaultCase(node);
    }

    public void caseTMin(TMin node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    public void caseTNeq(TNeq node)
    {
        defaultCase(node);
    }

    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTLParen(TLParen node)
    {
        defaultCase(node);
    }

    public void caseTRParen(TRParen node)
    {
        defaultCase(node);
    }

    public void caseTLBrace(TLBrace node)
    {
        defaultCase(node);
    }

    public void caseTRBrace(TRBrace node)
    {
        defaultCase(node);
    }

    public void caseTLBracket(TLBracket node)
    {
        defaultCase(node);
    }

    public void caseTRBracket(TRBracket node)
    {
        defaultCase(node);
    }

    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    public void caseTStar(TStar node)
    {
        defaultCase(node);
    }

    public void caseTPipe(TPipe node)
    {
        defaultCase(node);
    }

    public void caseTXor(TXor node)
    {
        defaultCase(node);
    }

    public void caseTDecimalIntegerLiteral(TDecimalIntegerLiteral node)
    {
        defaultCase(node);
    }

    public void caseTFloatingPointLiteral(TFloatingPointLiteral node)
    {
        defaultCase(node);
    }

    public void caseTStringLiteral(TStringLiteral node)
    {
        defaultCase(node);
    }

    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
