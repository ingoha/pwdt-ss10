/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.gello.grammar.node;

import org.gello.grammar.analysis.*;

@SuppressWarnings("nls")
public final class AIterateCollectionArgument extends PCollectionArgument
{
    private TIdentifier _iterid_;
    private TColon _itercolon_;
    private PType _itertype_;
    private TSemicolon _semicolon_;
    private TIdentifier _accid_;
    private TColon _acccolon_;
    private PType _acctype_;
    private TEq _eq_;
    private PExpression _accexpr_;
    private TPipe _pipe_;
    private PExpression _filterexpr_;

    public AIterateCollectionArgument()
    {
        // Constructor
    }

    public AIterateCollectionArgument(
        @SuppressWarnings("hiding") TIdentifier _iterid_,
        @SuppressWarnings("hiding") TColon _itercolon_,
        @SuppressWarnings("hiding") PType _itertype_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_,
        @SuppressWarnings("hiding") TIdentifier _accid_,
        @SuppressWarnings("hiding") TColon _acccolon_,
        @SuppressWarnings("hiding") PType _acctype_,
        @SuppressWarnings("hiding") TEq _eq_,
        @SuppressWarnings("hiding") PExpression _accexpr_,
        @SuppressWarnings("hiding") TPipe _pipe_,
        @SuppressWarnings("hiding") PExpression _filterexpr_)
    {
        // Constructor
        setIterid(_iterid_);

        setItercolon(_itercolon_);

        setItertype(_itertype_);

        setSemicolon(_semicolon_);

        setAccid(_accid_);

        setAcccolon(_acccolon_);

        setAcctype(_acctype_);

        setEq(_eq_);

        setAccexpr(_accexpr_);

        setPipe(_pipe_);

        setFilterexpr(_filterexpr_);

    }

    @Override
    public Object clone()
    {
        return new AIterateCollectionArgument(
            cloneNode(this._iterid_),
            cloneNode(this._itercolon_),
            cloneNode(this._itertype_),
            cloneNode(this._semicolon_),
            cloneNode(this._accid_),
            cloneNode(this._acccolon_),
            cloneNode(this._acctype_),
            cloneNode(this._eq_),
            cloneNode(this._accexpr_),
            cloneNode(this._pipe_),
            cloneNode(this._filterexpr_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIterateCollectionArgument(this);
    }

    public TIdentifier getIterid()
    {
        return this._iterid_;
    }

    public void setIterid(TIdentifier node)
    {
        if(this._iterid_ != null)
        {
            this._iterid_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._iterid_ = node;
    }

    public TColon getItercolon()
    {
        return this._itercolon_;
    }

    public void setItercolon(TColon node)
    {
        if(this._itercolon_ != null)
        {
            this._itercolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._itercolon_ = node;
    }

    public PType getItertype()
    {
        return this._itertype_;
    }

    public void setItertype(PType node)
    {
        if(this._itertype_ != null)
        {
            this._itertype_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._itertype_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return this._semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this._semicolon_ != null)
        {
            this._semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semicolon_ = node;
    }

    public TIdentifier getAccid()
    {
        return this._accid_;
    }

    public void setAccid(TIdentifier node)
    {
        if(this._accid_ != null)
        {
            this._accid_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._accid_ = node;
    }

    public TColon getAcccolon()
    {
        return this._acccolon_;
    }

    public void setAcccolon(TColon node)
    {
        if(this._acccolon_ != null)
        {
            this._acccolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._acccolon_ = node;
    }

    public PType getAcctype()
    {
        return this._acctype_;
    }

    public void setAcctype(PType node)
    {
        if(this._acctype_ != null)
        {
            this._acctype_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._acctype_ = node;
    }

    public TEq getEq()
    {
        return this._eq_;
    }

    public void setEq(TEq node)
    {
        if(this._eq_ != null)
        {
            this._eq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._eq_ = node;
    }

    public PExpression getAccexpr()
    {
        return this._accexpr_;
    }

    public void setAccexpr(PExpression node)
    {
        if(this._accexpr_ != null)
        {
            this._accexpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._accexpr_ = node;
    }

    public TPipe getPipe()
    {
        return this._pipe_;
    }

    public void setPipe(TPipe node)
    {
        if(this._pipe_ != null)
        {
            this._pipe_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pipe_ = node;
    }

    public PExpression getFilterexpr()
    {
        return this._filterexpr_;
    }

    public void setFilterexpr(PExpression node)
    {
        if(this._filterexpr_ != null)
        {
            this._filterexpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._filterexpr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._iterid_)
            + toString(this._itercolon_)
            + toString(this._itertype_)
            + toString(this._semicolon_)
            + toString(this._accid_)
            + toString(this._acccolon_)
            + toString(this._acctype_)
            + toString(this._eq_)
            + toString(this._accexpr_)
            + toString(this._pipe_)
            + toString(this._filterexpr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._iterid_ == child)
        {
            this._iterid_ = null;
            return;
        }

        if(this._itercolon_ == child)
        {
            this._itercolon_ = null;
            return;
        }

        if(this._itertype_ == child)
        {
            this._itertype_ = null;
            return;
        }

        if(this._semicolon_ == child)
        {
            this._semicolon_ = null;
            return;
        }

        if(this._accid_ == child)
        {
            this._accid_ = null;
            return;
        }

        if(this._acccolon_ == child)
        {
            this._acccolon_ = null;
            return;
        }

        if(this._acctype_ == child)
        {
            this._acctype_ = null;
            return;
        }

        if(this._eq_ == child)
        {
            this._eq_ = null;
            return;
        }

        if(this._accexpr_ == child)
        {
            this._accexpr_ = null;
            return;
        }

        if(this._pipe_ == child)
        {
            this._pipe_ = null;
            return;
        }

        if(this._filterexpr_ == child)
        {
            this._filterexpr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._iterid_ == oldChild)
        {
            setIterid((TIdentifier) newChild);
            return;
        }

        if(this._itercolon_ == oldChild)
        {
            setItercolon((TColon) newChild);
            return;
        }

        if(this._itertype_ == oldChild)
        {
            setItertype((PType) newChild);
            return;
        }

        if(this._semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        if(this._accid_ == oldChild)
        {
            setAccid((TIdentifier) newChild);
            return;
        }

        if(this._acccolon_ == oldChild)
        {
            setAcccolon((TColon) newChild);
            return;
        }

        if(this._acctype_ == oldChild)
        {
            setAcctype((PType) newChild);
            return;
        }

        if(this._eq_ == oldChild)
        {
            setEq((TEq) newChild);
            return;
        }

        if(this._accexpr_ == oldChild)
        {
            setAccexpr((PExpression) newChild);
            return;
        }

        if(this._pipe_ == oldChild)
        {
            setPipe((TPipe) newChild);
            return;
        }

        if(this._filterexpr_ == oldChild)
        {
            setFilterexpr((PExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
