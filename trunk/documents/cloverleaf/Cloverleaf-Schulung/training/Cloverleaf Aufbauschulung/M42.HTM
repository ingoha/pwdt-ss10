<HTML>
<HEAD>
        <TITLE>Integrator Level II Training</TITLE><LINK href="training.css" type=text/css rel=stylesheet>
</HEAD>
<BODY>



<h1>
<img src="images/hie_box.gif" align="middle" hspace=7> 
 Integrator - Level II Training </H1>

<h1> Module 42: Code fragments, part II </h1>





Tcl procedures of type <em>Code Fragment</em>
are used within the UPoCs available in the translation thread. 
Code Fragments have been introduced in
<a href="m30.htm">Module 30: Code Fragments, part I</a>. That module also lists the UPoCs
where Code Fragments are used.
<p>

Code Fragments (pre-proc, Xlt CALL, post-proc) can be created using the Custom Scripts tool.
The framework of a <em>xltp</em> procedure is as follows:

<PRE>proc procName {} {
    upvar xlateId       xlateId        \
          xlateInList   xlateInList    \
          xlateInTypes  xlateInTypes   \
          xlateInVals   xlateInVals    \
          xlateOutList  xlateOutList   \
          xlateOutTypes xlateOutTypes  \
          xlateOutVals  xlateOutVals     

    # &lt;- Here: Body of the Tcl procedure.
}
</PRE> 
The <em>upvar</em> command creates local variables 
(which in this case happen to have the exact same names as the global variables)
whose initial value will be equal to the global variable.

<h3> xlateId </h3>
The variable xlateId contains the XPM handle. See <a href="m41.htm">Module 41: XPM & GRM</a>.
<h3> xlateInList, xlateInTypes, xlateInVals </h3>
These variables each contain information regarding the source fields involved in a
translation action. The content of these variables is formatted as Tcl-lists.<BR>
The xlateInList variable contains a list of symbolic identifiers (pathnames) of
the source fields involved in a translation action.
The xlateInVals variable contains a list of values of
the source fields involved in a translation action (i.e. the datum objects' VALUE).
The xlateInTypes variable contains a list of data types
of the source fields involved in a translation action (i.e. the datum objects' TYPE).
<h3> xlateOutList, xlateOutTypes, xlateOutVals </h3>
These variables each contain information regarding the destination fields involved in a
translation action. The content of these variables is formatted as Tcl-lists.<BR>
The xlateOutList variable contains a list of symbolic identifiers (pathnames) of
the destination fields involved in a translation action.
The xlateOutVals variable contains a list of values of
the destination fields involved in a translation action (i.e. the datum objects' VALUE).
The xlateOutTypes variable contains a list of data types
of the destination fields involved in a translation action (i.e. the datum objects' TYPE).

<h2>Example</h2>

Suppose the translation action "CALL procName (Amount_1 Currency -> Dest_Amount)" is used. 
The various lists provided to the code fragment contain the following: <br>
&nbsp;&nbsp;&nbsp;&nbsp; xlateInList: {Amount_1 Currency} <br>
&nbsp;&nbsp;&nbsp;&nbsp; xlateInType: {ai ch} <br>
&nbsp;&nbsp;&nbsp;&nbsp; xlateInVals: {10000 DEM} <br>
&nbsp;&nbsp;&nbsp;&nbsp; xlateOutList: {Dest_Amount} <br>
&nbsp;&nbsp;&nbsp;&nbsp; xlateOutTypes: {ch} <br>
&nbsp;&nbsp;&nbsp;&nbsp; xlateOutVals: (unknown)

<h2> Differences between the Xlate UPoCs </h2>
<center><img src="images/codefrag.gif"><BR>
Figure 42.1 Xlate thread: translation actions</center>
<p>

Pre-Proc (2)
<UL>
<LI>Typically used to modify the values involved in the translation, e.g. 'put to uppercase',
'strip characters off'. Generally no value-based 'logic' is involved.
<LI>Source values are available via the xlateInVals list (components of 1);
<LI>Modified field-values can be stored in the xlateOutVals list (xlateOutTypes can be optionally changed as well) (components of 3);
<LI>The engine itself will perform the required grmstore operations.
</UL>

Xlt CALL (4)
<UL>
<LI>Typically used to create your own translation action based on value-based 'logic'.
Please make sure your non-standard mapping can't be covered by the IF/THEN/ELSE 
translation action before writing a CALL Tcl procedure.
<LI>Source values are available via the xlateInVals list and/or by using xpmfetch (components of 3);
<LI>Modified field-values have to be stored using xpmstore (components of 5);
<LI>Symbolic identifiers, based on xltInList/xltOutList or hardcoded, as well
as @ and ~ pathnames can be used by xpmfetch and xpmstore;
The xpm object can be accessed via its handle xlated.
<LI>This is the most powerful translation-related UPoC.
</UL>

Post-Proc (6)
<UL>
<LI>Typically used to modify the values involved in the translation, e.g. 'put to uppercase',
'strip characters off'. Generally no value-based 'logic' is involved.
<LI>Source values are available via the xlateInVals list (components of 5);
<LI>Modified field-values have to be stored using xpmstore (components of 7);
    Modifying the xlateOutVals list has no effect whatsoever.
</UL>

<p>
See also the <a href="m42v.htm">Examples and supporting procedures</a>.

<p>
Copyright 1998,2002 Health-Comm GmbH [30]
</BODY>
</HTML>
