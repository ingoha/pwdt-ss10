<HTML>
<HEAD>
	<TITLE>Integrator Level II+ Training</TITLE><LINK href="training.css" type=text/css rel=stylesheet>
</HEAD>
<BODY>



<h1>
<img src="images/hie_box.gif" align="middle" hspace=7>
 Integrator - ODBC Training </H1>

<h1> Module 230: Retrieving results </h1>





Once a SQL statement has been prepared and/or executed, information
related to the result set and the result itself (if the statement was executed)
are made available for retrieval. A result can either be a result set or the number of
rows that were affected by a statement - a rowcount. Catalog functions and SQL SELECT
statements both return result sets, while SQL UPDATE, INSERT and DELETE statements 
return a rowcount. The rowcount can be retrieved by executing the SQLRowCount function.
<p>
A <em>result set</em> is the set of rows and columns that have been spcified by a SQL
statement or catalog function. This information is not available by way of output
operators of an odbc function, special steps are required to return the data.
Result sets have a definite order set explicitly with an ORDER BY clause or implicitly 
by DBMS defined rules (e.g. by primary key). A <em>database cursor</em> marks the active
position (i.e. row) in a result set. A cursor is automatically generated for each result set.
<p>
The list below contains a description and the usage of some of the ODBC functions.
The flag that preceeds the procedure name (**,* or --) indicates
the frequency of use of the procedure (frequently, regularly, almost never)
and hence its importance.

<TABLE>
<TR><TD bgcolor=#999999 valign="top">
** </TD><TD><b>odbc SQLNumResultCols hstmt colNbrVarName</b><br>
   Purpose: This function returns the number of columns that are available in a result set 
            generated by a prepared or executed statement (e.g. SELECT).<BR>
            <TABLE BORDER="1" WIDTH=600>
            <TR><TD>hstmt</TD><TD>input</TD><TD>Statement handle
            <TR><TD>colNbrVarName</TD><TD>Output</TD><TD>The number of columns in the result set
            </TABLE>
   Return codes: SQL_SUCCESS, SQL_SUCCESS_WITH_INFO, SQL_STILL_EXECUTING,
                 SQL_ERROR, SQL_INVALID_HANDLE.
                 Note that this Tcl procedure may return a TCL_ERROR if a severe
                 error occurs in the Tcl extension layer unrelated to ODBC. <br>
   Notes: If a statement does not return <em>Result</em> columns (e.g. INSERT, DELETE, UPDATE)
         then colNbrVarName will return 0. Use SQLRowCount to retrieve the number of
         rows affected by the SQL statement. A state value of S1010 indicates that
         a statement was neither prepared nor executed. <BR>
   Examples:

<PRE># catch omitted. hstmt assumed to be a statement handle
set rc [odbc SQLNumResultCols $hstmt cols ]
echo "Columns in result set: $cols"
</PRE>
</TD><TR>

<TR><TD bgcolor=#999999 valign="top">
* </TD><TD><b>odbc SQLRowCount hstmt rowsVarName </b><br>
   Purpose: This function returns the number of rows affected by a SQL statement
            that doesn't return a result set. (e.g. UPDATE, DELETE, INSERT)<BR>
            <TABLE BORDER="1" WIDTH=600>
            <TR><TD>hstmt</TD><TD>input</TD><TD>Statement handle
            <TR><TD>rowsVarName</TD><TD>output</TD><TD>Number of rows affected by 
                     the request; or -1 if unavailable.
            </TABLE>
   Return codes: SQL_SUCCESS, SQL_SUCCESS_WITH_INFO,
                 SQL_ERROR, SQL_INVALID_HANDLE.
                 Note that this Tcl procedure may return a TCL_ERROR if a severe
                 error occurs in the Tcl extension layer unrelated to ODBC. <br>
   Notes: Do not use this function to determine the number of rows in a result set, 
          this function was not intended to be used that way by odbc standard 
          and the data source may return an unreliable result value. <BR>
   Examples:

<PRE>odbc SQLExecDirect $hstmt "INSERT INTO Users VALUES ( 100, 'Johnson' )"
odbc SQLRowCount $hstmt rows
echo "Rows affected by insert: $rows"
</PRE>
</TD><TR>


<TR><TD bgcolor=#999999 valign="top">
* </TD><TD><b>odbc SQLDescribeCol hstmt colNbr colNameVar colNameMax colNameLen sqlTypeVar 
                   colDefVar scaleVar nullableVar</b><br>
   Purpose: This function returns the name, type, precision, scale and nullability
            of a column in the result set. <BR>
            <TABLE BORDER="1" WIDTH=600>
            <TR><TD>hstmt</TD><TD>Input</TD><TD>Statement handle
            <TR><TD valign="top">colNbr</TD><TD valign="top">Input</TD><TD>Column number of result data, ordered 
                        sequentially left to right, starting with 1.
            <TR><TD valign="top">colNameVar</TD><TD valign="top">Output</TD><TD>Column name
            <TR><TD valign="top">colNameMax</TD><TD valign="top">Input</TD><TD>Maximum length of the column name 
                  to be returned in <em>colNameVar</em>. Use SQLGetInfo / SQL_MAX_COLUMN_NAME_LEN to
                  determine the maximum length of column names supported by the data source.
            <TR><TD valign="top">colNameLen</TD><TD valign="top">Output</TD><TD>The length of the column name 
                   returned in <em>colNameVar</em>.
            <TR><TD valign="top">sqlTypeVar</TD><TD valign="top">Output</TD><TD>The SQL Type of the column.
            <TR><TD valign="top">colDefVar</TD><TD valign="top">Output</TD><TD>The precision of the column on the 
                   data source. (column 'character' width in bytes)
            <TR><TD valign="top">scaleVar</TD><TD valign="top">Output</TD><TD>The scale of the column.
            <TR><TD valign="top">nullableVar</TD><TD valign="top">Output</TD><TD>Indicates whether a column allows 
                 NULL values. Contains either SQL_NO_NULLS, SQL_NULLABLE or 
                 SQL_NULLABLE_UNKNOWN.
            </TABLE>
   Return codes: SQL_SUCCESS, SQL_SUCCESS_WITH_INFO, SQL_STILL_EXECUTING,
                 SQL_ERROR, SQL_INVALID_HANDLE.
                 Note that this Tcl procedure may return a TCL_ERROR if a severe
                 error occurs in the Tcl extension layer unrelated to ODBC. <br>
   Notes: <BR>
   Examples:

<PRE># we assume that a result set (associated with hstmt) is pending
# catches and error checking omitted.

set rc [odbc SQLNumResultCols $hstmt cols ]
for { set i 1 } { $i &lt = $cols } { incr i } {
  odbc SQLDescribeCol $hstmt $i colName 50 colNameLen \
                                sqlType colDef scale nullable
  echo "Column $i ($colName) is of type $sqlType and width $colDef"
}
</PRE>
</TD><TR>

<TR><TD bgcolor=#999999 valign="top">
- </TD><TD><b>odbc SQLColAttributes .......... </b><br>
   Purpose: This function returns detailed descriptor information for a column in a result set.
            The information returned is a superset of the information returned by SQLDescribeCol.<BR>
   Notes: See other documentation for details. <BR>
</TD><TR>

<TR><TD bgcolor=#999999 valign="top">
** </TD><TD><b>odbc SQLBindCol hstmt colNbr CType valueVarName maxValueLen SQL_NTS</b><br>
   Purpose: This function specifies storage for result set data that is to be fetched.<BR>
            <TABLE BORDER="1" WIDTH=600>
            <TR><TD>hstmt</TD><TD>input</TD><TD>Statement handle
            <TR><TD valign="top">colNbr</TD><TD valign="top">Input</TD><TD>Column number of result data, ordered sequentially
                left to right, starting at 1.
            <TR><TD valign="top">Ctype</TD><TD valign="top">Input</TD><TD>The C data type of the valueVarName. When using a Tcl string,
                  set to SQL_C_CHAR. Other types are valid, but SQL_C_CHAR will effectively be used.
                  The syntax of the CType parameter can be specified as fCtype or {Ctype HCIVAR}
                  or {Ctype HCIDAT} or {Ctype HCIMSG}. In all cases exept HCIMSG the
                  fCtype is effectively ignored and SQL_C_CHAR is assumed, since the
                  structure used to store data is a Tcl string.
            <TR><TD valign="top">valueVarName</TD><TD valign="top">Input</TD><TD>The name of a Tcl variable. The content
                of this variable will be set to the value of the corresponing column once
                the result set is Fetched.
            <TR><TD valign="top">maxValueLen</TD><TD valign="top">Input</TD><TD>Maximum length of data that will
                be stored in <em>valueVarName</em>.
            </TABLE>
   Return codes: SQL_SUCCESS, SQL_SUCCESS_WITH_INFO, SQL_NO_DATA_FOUND, 
                 SQL_ERROR, SQL_INVALID_HANDLE.
                 Note that this Tcl procedure may return a TCL_ERROR if a severe
                 error occurs in the Tcl extension layer unrelated to ODBC. <br>
   Notes: If the column contains binary data, use CType {SQL_C_BINARY HCIMSG}. 
          The column value will be stored in a message object, which is the only object
          in the Integrator able to hold binary data, including NULL values.
          Call SQLNumResults prior to using this function. 
          SQLDescribeCol can be used for the retrieval of column information needed
          to bind a variable to a column.<BR>
          It is not required to bind all columns to variables in order to retrieve
          the result set.
   Examples:

<PRE>set rc [odbc SQLNumResultCols $hstmt cols ]
# error checking omitted
echo "Columns in result set: $cols"
for { set i 1 } { $i &lt = $cols } { incr i } {
  set rc [odbc SQLBindCol $hstmt $i SQL_C_CHAR data($i) 64 SQL_NTS]
  # error checking omitted
}
</PRE>
</TD><TR>

<TR><TD bgcolor=#999999 valign="top">
** </TD><TD><b>odbc SQLFetch hstmt</b><br>
   Purpose: This function fetches one row of data from a result set. The cursor
            is moved one row forward before the row is fetched.<BR>
            <TABLE BORDER="1" WIDTH=600>
            <TR><TD>hstmt</TD><TD>Input</TD><TD>Statement handle
            </TABLE>
   Return codes: SQL_SUCCESS, SQL_SUCCESS_WITH_INFO, SQL_NO_DATA_FOUND, 
                 SQL_STILL_EXECUTING, SQL_ERROR, SQL_INVALID_HANDLE.
                 Note that this Tcl procedure may return a TCL_ERROR if a severe
                 error occurs in the Tcl extension layer unrelated to ODBC. <br>
   Notes: To be called repeatedly until SQL_NO_DATA_FOUND is returned.<BR>
   Examples:

<PRE># no error checking
odbc SQLExecDirect $hstmt "SELECT * FROM Users"
odbc SQLNumResultCols $hstmt cols
for { set i 1 } { $i &lt = $cols } { incr i } {
  odbc SQLBindCol $hstmt $i SQL_C_CHAR data($i) 64 SQL_NTS
}
while 1 {
  set rc [ odbc SQLFetch $hstmt ]
  if [cequal $rc SQL_NO_DATA_FOUND] { break }
  # dump array of bound varaiables
  parray data 
}
# unbind columns
odbc SQLFreeStmt $hstmt SQL_UNBIND
# close (reset) cursor
odbc SQLFreeStmt $hstmt SQL_CLOSE
</PRE>
</TD><TR>


<!---------------------


<TR><TD bgcolor=#999999 valign="top">
** </TD><TD><b>odbc SQL </b><br>
   Purpose: This function <BR>
            <TABLE BORDER="1" WIDTH=600>
            <TR><TD>henv</TD><TD>input</TD><TD>Environment handle or SQL_NULL_HENV
            <TR><TD>hdbc</TD><TD>input</TD><TD>Connection handle or SQL_NULL_HDBC
            <TR><TD>hstmt</TD><TD>input</TD><TD>Statement handle or SQL_NULL_HSTMT
            </TABLE>
   Return codes: SQL_SUCCESS, SQL_SUCCESS_WITH_INFO, SQL_NO_DATA_FOUND, 
                 SQL_ERROR, SQL_INVALID_HANDLE.
                 Note that this Tcl procedure may return a TCL_ERROR if a severe
                 error occurs in the Tcl extension layer unrelated to ODBC. <br>
   Notes: <BR>
   Examples:

<PRE>
</PRE>
</TD><TR>

----------------------------->

</TABLE>


<p>
Copyright 1998 HIE Europe
</BODY>
</HTML>
