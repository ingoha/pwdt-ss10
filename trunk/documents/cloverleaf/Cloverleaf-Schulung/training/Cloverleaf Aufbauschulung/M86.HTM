<HTML>
<HEAD>
        <TITLE>Integrator Level II Training</TITLE><LINK href="training.css" type=text/css rel=stylesheet>
</HEAD>
<BODY>


<h1>
 <img src="images/hie_box.gif" align="middle" hspace=7> 
 Integrator - Level II Training </H1>

<h1> Module 86: Customized PDLS and ACKs</h1>






we will now discuss a number of typical protocols that require a customized PDL,
or an IB-TPS script as well as a customized PDL.

<p>
<center>
<img src="images/pdl_c.gif"> &nbsp; &nbsp; &nbsp; <img src="images/pdl_e.gif">
<BR>Figure 85.1 Ack/Nak message flow, ack created by IB-TPS script
</center>
<p>
The above figure shows a typical ack/nak protocol, where the receipt of each
message is confirmed by either an Ack or a Nak. One has to determine whether
the protocol in question can't be dealt with by an acknak style PDL.
Note that the ack or nak generated for incoming messages isn't created within the 
PDL but it is created in the IB-TPS instead. 
<p>

<p>
Acking and nacking should be done according to where in the OSI network
 layer the acking and nacking is
taking place. 

<p>For example, in a TCP/IP socket connection the protocol-layer
acking and nacking is done for you by the sockets library and happens
transparently to the application. If you do acking and nacking there it is
probably at an application layer or at the data layer, as when you send an
MSA indicating that you got a valid HL7 message. We implement this type of
acking and nacking in TCL.

<p>On the other hand, you may need to do lower-level acking and nacking when 
the transport layer does not provide guaranteed delivery, as in every async
connection I have ever heard of. This is where part of the message includes a 
field that can be used to verify the integrity of the message. This type of
acking and nacking is a network protocol-level function and would more properly
be done in a pdl. 

<p>In other words, an ACK from a PDL means "I got the same data 
that you sent", whereas an ACK from a IB-TPS proc means "I find the data you
sent to be formatted acceptably".  

<p>Would there ever be a situation where you would have BOTH pdl n/acking 
AND TCL n/acking? Quite possibly yes, as in the case of HL7 messages coming 
over an unreliable transport from a system that logically separates 
transmission errors from application errrors. 
<P>
Before writing any code, consider using
a PDL style (see S.4).
<p>
Before a PDL can be written, the entire message flow has to be taken
into consideration. One of the aspects involved is the resending of messsages after
a nak has been received from the remote system. 
The PDL itself may contain a resending mechanism or the resending can be left to the 
Integrator engine (Network configurator/ thread/ outbound/ outbound retries).
<p>
If the ack (or nak) that has to be sent back to the remote system is complex in nature
and/or based on multiple fields in the inbound message than it may be preferrable
to construct the ack (or nak) in an IB-TPS where one has the ability to access the
data within the inbound message at a datailed level (grm, msg fuctions).
<p>
The PDL itself sends messages to the remote system, and listens for an ack/nak.
Inbound messages are forwarded to the engine, the ack/nak is generated by an IB-TPS 
script.
<p>
<em>See mlacknak.pdl (send-only), terrano_async.pdl (read-only) and 
mlp_tcp_fo.pdl (bi-directional, use in combination with the .... IB-Tps script)
for examples of this type of PDL.</em>

<p>
<center>
<img src="images/pdl_c.gif">&nbsp; &nbsp; &nbsp; <img src="images/pdl_d.gif">
<BR>Figure 85.2 Ack/Nak message flow, ack created by PDL
</center>
<p>
The above figure shows
<p>
<em>See sms_async_64.pdl for an example of this type of PDL.</em>


<p>
<center>
<img src="images/pdl_f.gif"> &nbsp; &nbsp; &nbsp; <img src="images/pdl_e.gif">
<BR>Figure 85.3 Ack/Nak/Reply message flow, Ack/Nak/Reply created by IB-TPS
</center>
<p>
application level ack/nak/reply <BR>
The above figure shows
<p>
The "expect_replies" option may be used here, in which case the returned message will
be processed as a 'reply' message and not a 'data' message.

<p>
Copyright 1998,2001 Health-Comm GmbH
</BODY>
</HTML>
