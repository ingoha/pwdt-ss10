<HTML>
<HEAD>
        <TITLE>Integrator Level II Training</TITLE><LINK href="training.css" type=text/css rel=stylesheet>
</HEAD>
<BODY>



<h1>
 <img src="images/hie_box.gif" align="middle" hspace=7> 
 Integrator - Level II Training </H1>

<h1> Module 54: Transliteration, examples </h1>


<h2>Transliteration, standard encodings</h2>

<PRE>######################################################################
# Name:      gc_convertFromCharset
# Purpose:   Change the character encoding as used by an inbound 
#            8-bit character stream into the system encoding.
#            Can be used in combination with any of the standard
#            protocol drivers, with the exception of UPoC protocol 
#            drivers that use 'fconfigure -encoding' within their Tcl
#            code.
# UPoC type: IB-tps
# Args:      tps keyedlist containing the following keys:
#            MODE    run mode ("start", "run" or "time")
#            MSGID   message handle
#            ARGS    user-supplied arguments:
#               FROM  Id of the charset to decode from. The Id must be 
#                     one of the charsets defined in Tcl, use the
#                     'encoding names' command to retrieve a full list.
#
# Returns: tps disposition list:
#          CONTINUE   Of all messages
#
# Note: Requires the use of Tcl 8.3+. Use proc in Cloverleaf v3.8+ or
#       Integrator v5.0+

proc gc_convertFromCharset { args } {
    keylget args MODE mode              	;# Fetch mode
    keylget args ARGS uarg
    set dispList {}				;# Nothing to return

    switch -exact -- $mode {
        start { }

        run {
            # 'run' mode always has a MSGID; fetch and process it
            keylget args MSGID mh
            set charset "none"
            keylget uarg FROM charset
            if ![cequal $charset "none"] {
               msgset $mh [encoding convertfrom $charset [msgget $mh]]
               set meta [msgmetaget $mh USERDATA]
               keylset meta CHARSET $charset
               msgmetaset $mh USERDATA $meta
            }
            lappend dispList "CONTINUE $mh"
        }

        shutdown { }
    }
    return $dispList
}


######################################################################
# Name:      gc_convertToCharset
# Purpose:   Change the 8-bit system character encoding into the
#            character encoding as used by an outbound byte stream.
#            Can be used in combination with any of the standard
#            protocol drivers, with the exception of UPoC protocol 
#            drivers that use 'fconfigure -encoding' within their Tcl
#            code.
# UPoC type: OB-tps
# Args:      tps keyedlist containing the following keys:
#            MODE    run mode ("start", "run" or "time")
#            MSGID   message handle
#            ARGS    user-supplied arguments:
#               TO  Id of the charset to encode to. The Id must be 
#                   one of the charsets defined in Tcl, use the
#                   'encoding names' command to retrieve a full list.
#
# Returns: tps disposition list:
#          CONTINUE   Of all messages
#
# Note: Requires the use of Tcl 8.3+. Use proc in Cloverleaf v3.8+ or
#       Integrator v5.0+

proc gc_convertToCharset { args } {
    keylget args MODE mode              	;# Fetch mode
    keylget args ARGS uarg
    set dispList {}				;# Nothing to return

    switch -exact -- $mode {
        start { }

        run {
            # 'run' mode always has a MSGID; fetch and process it
            keylget args MSGID mh
            set charset "none"
            keylget uarg TO charset
            if ![cequal $charset "none"] {
               msgset $mh [encoding convertto $charset [msgget $mh]]
               set meta [msgmetaget $mh USERDATA]
               keylset meta CHARSET $charset
               msgmetaset $mh USERDATA $meta
            }
            lappend dispList "CONTINUE $mh"
        }
        
        shutdown { }
    }
    return $dispList
}
</PRE>


<h2>Transliteration, non-standard encodings</h2>

The following example contains the definition of a datamap for the transliteration
of EBCDIC encoded characters to iso8858-1. Note that the standard datamaps provided with
Integrator (ibm_e2a, ibmtext_e2a and hci_e2a) map to U.S. ASCII, they don't provide support for extended characters.


<PRE>######################################################################
# Name:		EBCDICtoLatin1
# Purpose:	Map all characters from the EBCDIC character set to
#               the Latin1 ASCII (ISO 8859/1) character set.
# UPoC type:	tps
# Args: 	tps keyedlist containing the following keys:
#       	MODE    run mode ("start", "run" or "time")
#       	MSGID   message handle
#       	ARGS    user-supplied arguments:
#               	None.
#
# Returns: tps disposition list:
#          CONTINUE 	of all messages.
#

proc EBCDICtoLatin1 { args } {
    keylget args MODE mode              	;# Fetch mode

    set dispList {}				;# Nothing to return

    switch -exact -- $mode {
        start {
             # Define EBCDIC --> (Latin1) ASCII
             set e2latin1 [list \
		0x00 0x01 0x02 0x03 0x9C 0x09 0x86 0x7F \
		0x97 0x8D 0x8E 0x0B 0x0C 0x0D 0x0E 0x0F \
		0x10 0x11 0x12 0x13 0x9D 0x85 0x08 0x87 \
		0x18 0x19 0x92 0x8F 0x1C 0x1D 0x1E 0x1F \
		0x80 0x81 0x82 0x83 0x84 0x0A 0x17 0x1B \
		0x88 0x89 0x8A 0x8B 0x8C 0x05 0x06 0x07 \
		0x90 0x91 0x16 0x93 0x94 0x95 0x96 0x04 \
		0x98 0x99 0x9A 0x9B 0x14 0x15 0x9E 0x1A \
		0x20 0xA0 0xA1 0xA2 0xA3 0xA4 0xA5 0x7D \
		0xA7 0xA8 0x23 0x2E 0x3C 0x28 0x2B 0x5D \
		0x26 0xA9 0xAA 0xAB 0xAC 0xAD 0xAE 0xAF \
		0xB0 0xB1 0x21 0xC5 0x2A 0x29 0x3B 0x5E \
		0x2D 0x2F 0xB2 0xB3 0xB4 0xB5 0xB6 0x24 \
		0xB8 0xB9 0xF8 0x2C 0x25 0x5F 0x3E 0x3F \
		0x7C 0xBB 0xBC 0xBD 0xBE 0xBF 0xC0 0xC1 \
		0xC2 0x60 0x3A 0xC6 0xD8 0x27 0x3D 0x22 \
		0x40 0x61 0x62 0x63 0x64 0x65 0x66 0x67 \
		0x68 0x69 0xC4 0xC5 0xC6 0xC7 0xC8 0xC9 \
		0xCA 0x6A 0x6B 0x6C 0x6D 0x6E 0x6F 0x70 \
		0x71 0x72 0xCB 0xCC 0x7B 0xCE 0xCF 0xD0 \
		0xD1 0x7E 0x73 0x74 0x75 0x76 0x77 0x78 \
		0x79 0x7A 0xD2 0xD3 0xD4 0xD5 0xD6 0xD7 \
		0xD8 0xD9 0xDA 0xDB 0xDC 0xDD 0xDE 0xDF \
		0xE0 0xE1 0xE2 0xE3 0xE4 0xE5 0xE6 0xE7 \
		0xE6 0x41 0x42 0x43 0x44 0x45 0x46 0x47 \
		0x48 0x49 0xE8 0xE9 0xEA 0xEB 0xEC 0xED \
		0xE5 0x4A 0x4B 0x4C 0x4D 0x4E 0x4F 0x50 \
		0x51 0x52 0xEE 0xEF 0xF0 0xF1 0xF2 0xF3 \
		0x5C 0x9F 0x53 0x54 0x55 0x56 0x57 0x58 \
		0x59 0x5A 0xF4 0xF5 0xF6 0xF7 0xF8 0xF9 \
		0x30 0x31 0x32 0x33 0x34 0x35 0x36 0x37 \
		0x38 0x39 0xFA 0xFB 0xFC 0xFD 0xFE 0xFF]

             adddatamap e2latin1 $e2latin1
        }

        run {
	    # 'run' mode always has a MSGID; fetch and process it
            keylget args MSGID mh
            msgmapdata $mh e2latin1
            lappend dispList "CONTINUE $mh"
        }

        shutdown {
        }

        default {
	    error "Unknown mode '$mode' in EBCDICtoLatin1"
        }
    }

    return $dispList
}
</PRE>


The following example maps a set of special characters (characters with an
umlaut) to an alternative set of characters. The datamap itself is created once in
the 'start' mode and made available for later use by the 'adddatamap' function.
The datamap is used in the 'run' mode in order to map the appropriate characters
within each message.


<PRE>######################################################################
# Name:		removeUmlaut
# Purpose:      Use the 'msgmapdata' function to map all characters
#               with 'umlauts' to their closest U.S. equivalent.
# UPoC type:	tps
# Args: 	tps keyedlist containing the following keys:
#       	MODE    run mode ("start", "run" or "test")
#       	MSGID   message handle
#
# Returns: tps disposition list:
#          CONTINUE      of all messages
#

proc removeUmlaut { args } {
    keylget args MODE mode              	;# Fetch mode
    set dispList {}

    switch -exact -- $mode {
        start {
               # Perform special init functions

               for { set i 0 } { $i &lt; 256 } { incr i } { lappend clist $i }
               # map char 252 (u umlaut) to 117 (u).
               lvarpop clist 252 117
               # map char 220 (U umlaut) to 85 (U).
               lvarpop clist 220 85

               # Note: normally one would simply specify the entire table, e.g.
               #       set clist { \x00 \x01 \x02 .... \xFF }
               
               adddatamap no-umlaut $clist
         }

        run {
	    # 'run' mode always has a MSGID; fetch and process it
            keylget args MSGID mh

            msgmapdata $mh no-umlaut

            lappend dispList "CONTINUE $mh"
        }

        shutdown {
        }

        default {
	    error "Unknown mode '$mode' in removeUmlaut"
        }
    }
    return $dispList
}
</PRE>


<p>
Copyright 1998,2002
</BODY>
</HTML>
