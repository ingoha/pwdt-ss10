/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.gello.grammar.node;

import org.gello.grammar.analysis.*;

@SuppressWarnings("nls")
public final class AIfIfExpression extends PIfExpression
{
    private TIf _if_;
    private PExpression _ifXpr_;
    private TThen _then_;
    private PExpression _thenXpr_;
    private TElse _else_;
    private PExpression _elseXpr_;
    private TEndif _endif_;

    public AIfIfExpression()
    {
        // Constructor
    }

    public AIfIfExpression(
        @SuppressWarnings("hiding") TIf _if_,
        @SuppressWarnings("hiding") PExpression _ifXpr_,
        @SuppressWarnings("hiding") TThen _then_,
        @SuppressWarnings("hiding") PExpression _thenXpr_,
        @SuppressWarnings("hiding") TElse _else_,
        @SuppressWarnings("hiding") PExpression _elseXpr_,
        @SuppressWarnings("hiding") TEndif _endif_)
    {
        // Constructor
        setIf(_if_);

        setIfXpr(_ifXpr_);

        setThen(_then_);

        setThenXpr(_thenXpr_);

        setElse(_else_);

        setElseXpr(_elseXpr_);

        setEndif(_endif_);

    }

    @Override
    public Object clone()
    {
        return new AIfIfExpression(
            cloneNode(this._if_),
            cloneNode(this._ifXpr_),
            cloneNode(this._then_),
            cloneNode(this._thenXpr_),
            cloneNode(this._else_),
            cloneNode(this._elseXpr_),
            cloneNode(this._endif_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfIfExpression(this);
    }

    public TIf getIf()
    {
        return this._if_;
    }

    public void setIf(TIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public PExpression getIfXpr()
    {
        return this._ifXpr_;
    }

    public void setIfXpr(PExpression node)
    {
        if(this._ifXpr_ != null)
        {
            this._ifXpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ifXpr_ = node;
    }

    public TThen getThen()
    {
        return this._then_;
    }

    public void setThen(TThen node)
    {
        if(this._then_ != null)
        {
            this._then_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._then_ = node;
    }

    public PExpression getThenXpr()
    {
        return this._thenXpr_;
    }

    public void setThenXpr(PExpression node)
    {
        if(this._thenXpr_ != null)
        {
            this._thenXpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._thenXpr_ = node;
    }

    public TElse getElse()
    {
        return this._else_;
    }

    public void setElse(TElse node)
    {
        if(this._else_ != null)
        {
            this._else_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._else_ = node;
    }

    public PExpression getElseXpr()
    {
        return this._elseXpr_;
    }

    public void setElseXpr(PExpression node)
    {
        if(this._elseXpr_ != null)
        {
            this._elseXpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elseXpr_ = node;
    }

    public TEndif getEndif()
    {
        return this._endif_;
    }

    public void setEndif(TEndif node)
    {
        if(this._endif_ != null)
        {
            this._endif_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endif_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._ifXpr_)
            + toString(this._then_)
            + toString(this._thenXpr_)
            + toString(this._else_)
            + toString(this._elseXpr_)
            + toString(this._endif_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._ifXpr_ == child)
        {
            this._ifXpr_ = null;
            return;
        }

        if(this._then_ == child)
        {
            this._then_ = null;
            return;
        }

        if(this._thenXpr_ == child)
        {
            this._thenXpr_ = null;
            return;
        }

        if(this._else_ == child)
        {
            this._else_ = null;
            return;
        }

        if(this._elseXpr_ == child)
        {
            this._elseXpr_ = null;
            return;
        }

        if(this._endif_ == child)
        {
            this._endif_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(this._ifXpr_ == oldChild)
        {
            setIfXpr((PExpression) newChild);
            return;
        }

        if(this._then_ == oldChild)
        {
            setThen((TThen) newChild);
            return;
        }

        if(this._thenXpr_ == oldChild)
        {
            setThenXpr((PExpression) newChild);
            return;
        }

        if(this._else_ == oldChild)
        {
            setElse((TElse) newChild);
            return;
        }

        if(this._elseXpr_ == oldChild)
        {
            setElseXpr((PExpression) newChild);
            return;
        }

        if(this._endif_ == oldChild)
        {
            setEndif((TEndif) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
