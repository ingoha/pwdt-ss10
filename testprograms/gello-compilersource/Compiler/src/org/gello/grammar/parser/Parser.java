/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.gello.grammar.parser;

import org.gello.grammar.lexer.*;
import org.gello.grammar.node.*;
import org.gello.grammar.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AExpressionGoal */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AContextGoal */
		    {
			ArrayList list = new1();
			push(goTo(0), list, false);
		    }
		    break;
                    case 2: /* reduce AAcontextexpression1ContextExpression */
		    {
			ArrayList list = new2();
			push(goTo(1), list, false);
		    }
		    break;
                    case 3: /* reduce AAcontextexpression2ContextExpression */
		    {
			ArrayList list = new3();
			push(goTo(1), list, false);
		    }
		    break;
                    case 4: /* reduce AExpression */
		    {
			ArrayList list = new4();
			push(goTo(2), list, false);
		    }
		    break;
                    case 5: /* reduce AIfLetExpression */
		    {
			ArrayList list = new5();
			push(goTo(3), list, false);
		    }
		    break;
                    case 6: /* reduce AAletletexpression1LetExpression */
		    {
			ArrayList list = new6();
			push(goTo(3), list, false);
		    }
		    break;
                    case 7: /* reduce AAletletexpression2LetExpression */
		    {
			ArrayList list = new7();
			push(goTo(3), list, false);
		    }
		    break;
                    case 8: /* reduce AInClause */
		    {
			ArrayList list = new8();
			push(goTo(4), list, false);
		    }
		    break;
                    case 9: /* reduce AConditionalIfExpression */
		    {
			ArrayList list = new9();
			push(goTo(5), list, false);
		    }
		    break;
                    case 10: /* reduce AIfIfExpression */
		    {
			ArrayList list = new10();
			push(goTo(5), list, false);
		    }
		    break;
                    case 11: /* reduce AIntegerLiteralLiteral */
		    {
			ArrayList list = new11();
			push(goTo(6), list, false);
		    }
		    break;
                    case 12: /* reduce AFloatingPointLiteralLiteral */
		    {
			ArrayList list = new12();
			push(goTo(6), list, false);
		    }
		    break;
                    case 13: /* reduce AStringLiteralLiteral */
		    {
			ArrayList list = new13();
			push(goTo(6), list, false);
		    }
		    break;
                    case 14: /* reduce ACollectionLiteralLiteral */
		    {
			ArrayList list = new14();
			push(goTo(6), list, false);
		    }
		    break;
                    case 15: /* reduce ATupleLiteralLiteral */
		    {
			ArrayList list = new15();
			push(goTo(6), list, false);
		    }
		    break;
                    case 16: /* reduce ASimpleNameName */
		    {
			ArrayList list = new16();
			push(goTo(7), list, false);
		    }
		    break;
                    case 17: /* reduce AQualifiedNameName */
		    {
			ArrayList list = new17();
			push(goTo(7), list, false);
		    }
		    break;
                    case 18: /* reduce ABasicGelloType */
		    {
			ArrayList list = new18();
			push(goTo(8), list, false);
		    }
		    break;
                    case 19: /* reduce ACollectionGelloType */
		    {
			ArrayList list = new19();
			push(goTo(8), list, false);
		    }
		    break;
                    case 20: /* reduce ATupleGelloType */
		    {
			ArrayList list = new20();
			push(goTo(8), list, false);
		    }
		    break;
                    case 21: /* reduce AIntBasicType */
		    {
			ArrayList list = new21();
			push(goTo(9), list, false);
		    }
		    break;
                    case 22: /* reduce AStringBasicType */
		    {
			ArrayList list = new22();
			push(goTo(9), list, false);
		    }
		    break;
                    case 23: /* reduce ARealBasicType */
		    {
			ArrayList list = new23();
			push(goTo(9), list, false);
		    }
		    break;
                    case 24: /* reduce ABooleanBasicType */
		    {
			ArrayList list = new24();
			push(goTo(9), list, false);
		    }
		    break;
                    case 25: /* reduce ASetCollectionType */
		    {
			ArrayList list = new25();
			push(goTo(10), list, false);
		    }
		    break;
                    case 26: /* reduce ABagCollectionType */
		    {
			ArrayList list = new26();
			push(goTo(10), list, false);
		    }
		    break;
                    case 27: /* reduce ASequenceCollectionType */
		    {
			ArrayList list = new27();
			push(goTo(10), list, false);
		    }
		    break;
                    case 28: /* reduce ATupleType */
		    {
			ArrayList list = new28();
			push(goTo(11), list, false);
		    }
		    break;
                    case 29: /* reduce ALiteralPrimary */
		    {
			ArrayList list = new29();
			push(goTo(12), list, false);
		    }
		    break;
                    case 30: /* reduce ALParenPrimary */
		    {
			ArrayList list = new30();
			push(goTo(12), list, false);
		    }
		    break;
                    case 31: /* reduce AFieldAccessPrimary */
		    {
			ArrayList list = new31();
			push(goTo(12), list, false);
		    }
		    break;
                    case 32: /* reduce AMethodInvocationPrimary */
		    {
			ArrayList list = new32();
			push(goTo(12), list, false);
		    }
		    break;
                    case 33: /* reduce AExpressionArgumentList */
		    {
			ArrayList list = new33();
			push(goTo(13), list, false);
		    }
		    break;
                    case 34: /* reduce AArgumentListArgumentList */
		    {
			ArrayList list = new34();
			push(goTo(13), list, false);
		    }
		    break;
                    case 35: /* reduce AFieldAccess */
		    {
			ArrayList list = new35();
			push(goTo(14), list, false);
		    }
		    break;
                    case 36: /* reduce AAnamemethodinvocation1MethodInvocation */
		    {
			ArrayList list = new36();
			push(goTo(15), list, false);
		    }
		    break;
                    case 37: /* reduce AAnamemethodinvocation2MethodInvocation */
		    {
			ArrayList list = new37();
			push(goTo(15), list, false);
		    }
		    break;
                    case 38: /* reduce AAprimarymethodinvocation1MethodInvocation */
		    {
			ArrayList list = new38();
			push(goTo(15), list, false);
		    }
		    break;
                    case 39: /* reduce AAprimarymethodinvocation2MethodInvocation */
		    {
			ArrayList list = new39();
			push(goTo(15), list, false);
		    }
		    break;
                    case 40: /* reduce AAnamecollectionmethodinvocation1MethodInvocation */
		    {
			ArrayList list = new40();
			push(goTo(15), list, false);
		    }
		    break;
                    case 41: /* reduce AAnamecollectionmethodinvocation2MethodInvocation */
		    {
			ArrayList list = new41();
			push(goTo(15), list, false);
		    }
		    break;
                    case 42: /* reduce AAcollectionmethodinvocation1MethodInvocation */
		    {
			ArrayList list = new42();
			push(goTo(15), list, false);
		    }
		    break;
                    case 43: /* reduce AAcollectionmethodinvocation2MethodInvocation */
		    {
			ArrayList list = new43();
			push(goTo(15), list, false);
		    }
		    break;
                    case 44: /* reduce ANameTupleMethodInvocation */
		    {
			ArrayList list = new44();
			push(goTo(15), list, false);
		    }
		    break;
                    case 45: /* reduce ATupleMethodInvocation */
		    {
			ArrayList list = new45();
			push(goTo(15), list, false);
		    }
		    break;
                    case 46: /* reduce AIdType */
		    {
			ArrayList list = new46();
			push(goTo(16), list, false);
		    }
		    break;
                    case 47: /* reduce AGelloType */
		    {
			ArrayList list = new47();
			push(goTo(16), list, false);
		    }
		    break;
                    case 48: /* reduce ASimpleCollectionArgument */
		    {
			ArrayList list = new48();
			push(goTo(17), list, false);
		    }
		    break;
                    case 49: /* reduce ANamedCollectionArgument */
		    {
			ArrayList list = new49();
			push(goTo(17), list, false);
		    }
		    break;
                    case 50: /* reduce ATypedCollectionArgument */
		    {
			ArrayList list = new50();
			push(goTo(17), list, false);
		    }
		    break;
                    case 51: /* reduce AIterateCollectionArgument */
		    {
			ArrayList list = new51();
			push(goTo(17), list, false);
		    }
		    break;
                    case 52: /* reduce ASimpleJoinCollection */
		    {
			ArrayList list = new52();
			push(goTo(18), list, false);
		    }
		    break;
                    case 53: /* reduce AAliasedJoinCollection */
		    {
			ArrayList list = new53();
			push(goTo(18), list, false);
		    }
		    break;
                    case 54: /* reduce ASingleJoinCollectionList */
		    {
			ArrayList list = new54();
			push(goTo(19), list, false);
		    }
		    break;
                    case 55: /* reduce AListJoinCollectionList */
		    {
			ArrayList list = new55();
			push(goTo(19), list, false);
		    }
		    break;
                    case 56: /* reduce AJoinProperty */
		    {
			ArrayList list = new56();
			push(goTo(20), list, false);
		    }
		    break;
                    case 57: /* reduce ASingleJoinPropertyList */
		    {
			ArrayList list = new57();
			push(goTo(21), list, false);
		    }
		    break;
                    case 58: /* reduce AListJoinPropertyList */
		    {
			ArrayList list = new58();
			push(goTo(21), list, false);
		    }
		    break;
                    case 59: /* reduce AUnorderedJoinArgument */
		    {
			ArrayList list = new59();
			push(goTo(22), list, false);
		    }
		    break;
                    case 60: /* reduce AOrderedJoinArgument */
		    {
			ArrayList list = new60();
			push(goTo(22), list, false);
		    }
		    break;
                    case 61: /* reduce APrimaryPostfixExpression */
		    {
			ArrayList list = new61();
			push(goTo(23), list, false);
		    }
		    break;
                    case 62: /* reduce ANamePostfixExpression */
		    {
			ArrayList list = new62();
			push(goTo(23), list, false);
		    }
		    break;
                    case 63: /* reduce AMinusUnaryExpression */
		    {
			ArrayList list = new63();
			push(goTo(24), list, false);
		    }
		    break;
                    case 64: /* reduce ANotUnaryExpression */
		    {
			ArrayList list = new64();
			push(goTo(24), list, false);
		    }
		    break;
                    case 65: /* reduce APostfixUnaryExpression */
		    {
			ArrayList list = new65();
			push(goTo(24), list, false);
		    }
		    break;
                    case 66: /* reduce AUnaryMultiplicativeExpression */
		    {
			ArrayList list = new66();
			push(goTo(25), list, false);
		    }
		    break;
                    case 67: /* reduce AMultiplyMultiplicativeExpression */
		    {
			ArrayList list = new67();
			push(goTo(25), list, false);
		    }
		    break;
                    case 68: /* reduce ADivideMultiplicativeExpression */
		    {
			ArrayList list = new68();
			push(goTo(25), list, false);
		    }
		    break;
                    case 69: /* reduce AIntdivMultiplicativeExpression */
		    {
			ArrayList list = new69();
			push(goTo(25), list, false);
		    }
		    break;
                    case 70: /* reduce AModMultiplicativeExpression */
		    {
			ArrayList list = new70();
			push(goTo(25), list, false);
		    }
		    break;
                    case 71: /* reduce AMaxMultiplicativeExpression */
		    {
			ArrayList list = new71();
			push(goTo(25), list, false);
		    }
		    break;
                    case 72: /* reduce AMinMultiplicativeExpression */
		    {
			ArrayList list = new72();
			push(goTo(25), list, false);
		    }
		    break;
                    case 73: /* reduce AMultiplyAdditiveExpression */
		    {
			ArrayList list = new73();
			push(goTo(26), list, false);
		    }
		    break;
                    case 74: /* reduce APlusAdditiveExpression */
		    {
			ArrayList list = new74();
			push(goTo(26), list, false);
		    }
		    break;
                    case 75: /* reduce AMinusAdditiveExpression */
		    {
			ArrayList list = new75();
			push(goTo(26), list, false);
		    }
		    break;
                    case 76: /* reduce AAdditiveExpressionRelationalExpression */
		    {
			ArrayList list = new76();
			push(goTo(27), list, false);
		    }
		    break;
                    case 77: /* reduce ALtRelationalExpression */
		    {
			ArrayList list = new77();
			push(goTo(27), list, false);
		    }
		    break;
                    case 78: /* reduce AGtRelationalExpression */
		    {
			ArrayList list = new78();
			push(goTo(27), list, false);
		    }
		    break;
                    case 79: /* reduce ALteqRelationalExpression */
		    {
			ArrayList list = new79();
			push(goTo(27), list, false);
		    }
		    break;
                    case 80: /* reduce AGteqRelationalExpression */
		    {
			ArrayList list = new80();
			push(goTo(27), list, false);
		    }
		    break;
                    case 81: /* reduce AEqRelationalExpression */
		    {
			ArrayList list = new81();
			push(goTo(27), list, false);
		    }
		    break;
                    case 82: /* reduce ANeqRelationalExpression */
		    {
			ArrayList list = new82();
			push(goTo(27), list, false);
		    }
		    break;
                    case 83: /* reduce ARelationalConditionalAndExpression */
		    {
			ArrayList list = new83();
			push(goTo(28), list, false);
		    }
		    break;
                    case 84: /* reduce AAndConditionalAndExpression */
		    {
			ArrayList list = new84();
			push(goTo(28), list, false);
		    }
		    break;
                    case 85: /* reduce AAndConditionalOrExpression */
		    {
			ArrayList list = new85();
			push(goTo(29), list, false);
		    }
		    break;
                    case 86: /* reduce AOrConditionalOrExpression */
		    {
			ArrayList list = new86();
			push(goTo(29), list, false);
		    }
		    break;
                    case 87: /* reduce AXorConditionalOrExpression */
		    {
			ArrayList list = new87();
			push(goTo(29), list, false);
		    }
		    break;
                    case 88: /* reduce AOrConditionalExpression */
		    {
			ArrayList list = new88();
			push(goTo(30), list, false);
		    }
		    break;
                    case 89: /* reduce AImpliesConditionalExpression */
		    {
			ArrayList list = new89();
			push(goTo(30), list, false);
		    }
		    break;
                    case 90: /* reduce AExpressionCollectionLiteralArgument */
		    {
			ArrayList list = new90();
			push(goTo(31), list, false);
		    }
		    break;
                    case 91: /* reduce ARangeCollectionLiteralArgument */
		    {
			ArrayList list = new91();
			push(goTo(31), list, false);
		    }
		    break;
                    case 92: /* reduce ASingleCollectionList */
		    {
			ArrayList list = new92();
			push(goTo(32), list, false);
		    }
		    break;
                    case 93: /* reduce AListCollectionList */
		    {
			ArrayList list = new93();
			push(goTo(32), list, false);
		    }
		    break;
                    case 94: /* reduce AAcollectionliteral1CollectionLiteral */
		    {
			ArrayList list = new94();
			push(goTo(33), list, false);
		    }
		    break;
                    case 95: /* reduce AAcollectionliteral2CollectionLiteral */
		    {
			ArrayList list = new95();
			push(goTo(33), list, false);
		    }
		    break;
                    case 96: /* reduce ATypedVarDefinition */
		    {
			ArrayList list = new96();
			push(goTo(34), list, false);
		    }
		    break;
                    case 97: /* reduce ABindingTupleLiteralList */
		    {
			ArrayList list = new97();
			push(goTo(35), list, false);
		    }
		    break;
                    case 98: /* reduce AListTupleLiteralList */
		    {
			ArrayList list = new98();
			push(goTo(35), list, false);
		    }
		    break;
                    case 99: /* reduce AAtupleliteral1TupleLiteral */
		    {
			ArrayList list = new99();
			push(goTo(36), list, false);
		    }
		    break;
                    case 100: /* reduce AAtupleliteral2TupleLiteral */
		    {
			ArrayList list = new100();
			push(goTo(36), list, false);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PGoal node1 = (PGoal) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AExpressionGoal */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PGoal pgoalNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        pgoalNode1 = new AExpressionGoal(pexpressionNode2);
        }
	nodeList.add(pgoalNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AContextGoal */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PGoal pgoalNode1;
        {
            // Block
        PContextExpression pcontextexpressionNode2;
        pcontextexpressionNode2 = (PContextExpression)nodeArrayList1.get(0);

        pgoalNode1 = new AContextGoal(pcontextexpressionNode2);
        }
	nodeList.add(pgoalNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AAcontextexpression1ContextExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PContextExpression pcontextexpressionNode1;
        {
            // Block
        TContext tcontextNode2;
        TIdentifier tidentifierNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TIn tinNode5;
        PExpression pexpressionNode6;
        TEndcontext tendcontextNode7;
        tcontextNode2 = (TContext)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tinNode5 = (TIn)nodeArrayList3.get(0);
        pexpressionNode6 = (PExpression)nodeArrayList4.get(0);
        tendcontextNode7 = (TEndcontext)nodeArrayList5.get(0);

        pcontextexpressionNode1 = new AContextExpression(tcontextNode2, tidentifierNode3, null, tinNode5, pexpressionNode6, tendcontextNode7);
        }
	nodeList.add(pcontextexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AAcontextexpression2ContextExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PContextExpression pcontextexpressionNode1;
        {
            // Block
        TContext tcontextNode2;
        TIdentifier tidentifierNode3;
        PConditionalExpression pconditionalexpressionNode4;
        TIn tinNode5;
        PExpression pexpressionNode6;
        TEndcontext tendcontextNode7;
        tcontextNode2 = (TContext)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        pconditionalexpressionNode4 = (PConditionalExpression)nodeArrayList3.get(0);
        tinNode5 = (TIn)nodeArrayList4.get(0);
        pexpressionNode6 = (PExpression)nodeArrayList5.get(0);
        tendcontextNode7 = (TEndcontext)nodeArrayList6.get(0);

        pcontextexpressionNode1 = new AContextExpression(tcontextNode2, tidentifierNode3, pconditionalexpressionNode4, tinNode5, pexpressionNode6, tendcontextNode7);
        }
	nodeList.add(pcontextexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PLetExpression pletexpressionNode2;
        pletexpressionNode2 = (PLetExpression)nodeArrayList1.get(0);

        pexpressionNode1 = new AExpression(pletexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AIfLetExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLetExpression pletexpressionNode1;
        {
            // Block
        PIfExpression pifexpressionNode2;
        pifexpressionNode2 = (PIfExpression)nodeArrayList1.get(0);

        pletexpressionNode1 = new AIfLetExpression(pifexpressionNode2);
        }
	nodeList.add(pletexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AAletletexpression1LetExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLetExpression pletexpressionNode1;
        {
            // Block
        TLet tletNode2;
        TIdentifier tidentifierNode3;
        TColon tcolonNode4;
        PType ptypeNode5;
        TEq teqNode6;
        PIfExpression pifexpressionNode7;
        @SuppressWarnings("unused") Object nullNode8 = null;
        tletNode2 = (TLet)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        ptypeNode5 = (PType)nodeArrayList4.get(0);
        teqNode6 = (TEq)nodeArrayList5.get(0);
        pifexpressionNode7 = (PIfExpression)nodeArrayList6.get(0);

        pletexpressionNode1 = new ALetLetExpression(tletNode2, tidentifierNode3, tcolonNode4, ptypeNode5, teqNode6, pifexpressionNode7, null);
        }
	nodeList.add(pletexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AAletletexpression2LetExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLetExpression pletexpressionNode1;
        {
            // Block
        TLet tletNode2;
        TIdentifier tidentifierNode3;
        TColon tcolonNode4;
        PType ptypeNode5;
        TEq teqNode6;
        PIfExpression pifexpressionNode7;
        PInClause pinclauseNode8;
        tletNode2 = (TLet)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        ptypeNode5 = (PType)nodeArrayList4.get(0);
        teqNode6 = (TEq)nodeArrayList5.get(0);
        pifexpressionNode7 = (PIfExpression)nodeArrayList6.get(0);
        pinclauseNode8 = (PInClause)nodeArrayList7.get(0);

        pletexpressionNode1 = new ALetLetExpression(tletNode2, tidentifierNode3, tcolonNode4, ptypeNode5, teqNode6, pifexpressionNode7, pinclauseNode8);
        }
	nodeList.add(pletexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AInClause */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PInClause pinclauseNode1;
        {
            // Block
        TIn tinNode2;
        PExpression pexpressionNode3;
        tinNode2 = (TIn)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pinclauseNode1 = new AInClause(tinNode2, pexpressionNode3);
        }
	nodeList.add(pinclauseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AConditionalIfExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIfExpression pifexpressionNode1;
        {
            // Block
        PConditionalExpression pconditionalexpressionNode2;
        pconditionalexpressionNode2 = (PConditionalExpression)nodeArrayList1.get(0);

        pifexpressionNode1 = new AConditionalIfExpression(pconditionalexpressionNode2);
        }
	nodeList.add(pifexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AIfIfExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIfExpression pifexpressionNode1;
        {
            // Block
        TIf tifNode2;
        PExpression pexpressionNode3;
        TThen tthenNode4;
        PExpression pexpressionNode5;
        TElse telseNode6;
        PExpression pexpressionNode7;
        TEndif tendifNode8;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList4.get(0);
        telseNode6 = (TElse)nodeArrayList5.get(0);
        pexpressionNode7 = (PExpression)nodeArrayList6.get(0);
        tendifNode8 = (TEndif)nodeArrayList7.get(0);

        pifexpressionNode1 = new AIfIfExpression(tifNode2, pexpressionNode3, tthenNode4, pexpressionNode5, telseNode6, pexpressionNode7, tendifNode8);
        }
	nodeList.add(pifexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AIntegerLiteralLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TDecimalIntegerLiteral tdecimalintegerliteralNode2;
        tdecimalintegerliteralNode2 = (TDecimalIntegerLiteral)nodeArrayList1.get(0);

        pliteralNode1 = new AIntegerLiteralLiteral(tdecimalintegerliteralNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AFloatingPointLiteralLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TFloatingPointLiteral tfloatingpointliteralNode2;
        tfloatingpointliteralNode2 = (TFloatingPointLiteral)nodeArrayList1.get(0);

        pliteralNode1 = new AFloatingPointLiteralLiteral(tfloatingpointliteralNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AStringLiteralLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);

        pliteralNode1 = new AStringLiteralLiteral(tstringliteralNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce ACollectionLiteralLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        PCollectionLiteral pcollectionliteralNode2;
        pcollectionliteralNode2 = (PCollectionLiteral)nodeArrayList1.get(0);

        pliteralNode1 = new ACollectionLiteralLiteral(pcollectionliteralNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce ATupleLiteralLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        PTupleLiteral ptupleliteralNode2;
        ptupleliteralNode2 = (PTupleLiteral)nodeArrayList1.get(0);

        pliteralNode1 = new ATupleLiteralLiteral(ptupleliteralNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce ASimpleNameName */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PName pnameNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pnameNode1 = new ASimpleNameName(tidentifierNode2);
        }
	nodeList.add(pnameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AQualifiedNameName */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PName pnameNode1;
        {
            // Block
        PName pnameNode2;
        TDot tdotNode3;
        TIdentifier tidentifierNode4;
        pnameNode2 = (PName)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);

        pnameNode1 = new AQualifiedNameName(pnameNode2, tdotNode3, tidentifierNode4);
        }
	nodeList.add(pnameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce ABasicGelloType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PGelloType pgellotypeNode1;
        {
            // Block
        PBasicType pbasictypeNode2;
        pbasictypeNode2 = (PBasicType)nodeArrayList1.get(0);

        pgellotypeNode1 = new ABasicGelloType(pbasictypeNode2);
        }
	nodeList.add(pgellotypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce ACollectionGelloType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PGelloType pgellotypeNode1;
        {
            // Block
        PCollectionType pcollectiontypeNode2;
        pcollectiontypeNode2 = (PCollectionType)nodeArrayList1.get(0);

        pgellotypeNode1 = new ACollectionGelloType(pcollectiontypeNode2);
        }
	nodeList.add(pgellotypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce ATupleGelloType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PGelloType pgellotypeNode1;
        {
            // Block
        PTupleType ptupletypeNode2;
        ptupletypeNode2 = (PTupleType)nodeArrayList1.get(0);

        pgellotypeNode1 = new ATupleGelloType(ptupletypeNode2);
        }
	nodeList.add(pgellotypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AIntBasicType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBasicType pbasictypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        pbasictypeNode1 = new AIntBasicType(tintNode2);
        }
	nodeList.add(pbasictypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AStringBasicType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBasicType pbasictypeNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pbasictypeNode1 = new AStringBasicType(tstringNode2);
        }
	nodeList.add(pbasictypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce ARealBasicType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBasicType pbasictypeNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        pbasictypeNode1 = new ARealBasicType(trealNode2);
        }
	nodeList.add(pbasictypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce ABooleanBasicType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBasicType pbasictypeNode1;
        {
            // Block
        TBoolean tbooleanNode2;
        tbooleanNode2 = (TBoolean)nodeArrayList1.get(0);

        pbasictypeNode1 = new ABooleanBasicType(tbooleanNode2);
        }
	nodeList.add(pbasictypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce ASetCollectionType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCollectionType pcollectiontypeNode1;
        {
            // Block
        TSet tsetNode2;
        tsetNode2 = (TSet)nodeArrayList1.get(0);

        pcollectiontypeNode1 = new ASetCollectionType(tsetNode2);
        }
	nodeList.add(pcollectiontypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce ABagCollectionType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCollectionType pcollectiontypeNode1;
        {
            // Block
        TBag tbagNode2;
        tbagNode2 = (TBag)nodeArrayList1.get(0);

        pcollectiontypeNode1 = new ABagCollectionType(tbagNode2);
        }
	nodeList.add(pcollectiontypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce ASequenceCollectionType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCollectionType pcollectiontypeNode1;
        {
            // Block
        TSequence tsequenceNode2;
        tsequenceNode2 = (TSequence)nodeArrayList1.get(0);

        pcollectiontypeNode1 = new ASequenceCollectionType(tsequenceNode2);
        }
	nodeList.add(pcollectiontypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce ATupleType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTupleType ptupletypeNode1;
        {
            // Block
        TTuple ttupleNode2;
        ttupleNode2 = (TTuple)nodeArrayList1.get(0);

        ptupletypeNode1 = new ATupleType(ttupleNode2);
        }
	nodeList.add(ptupletypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce ALiteralPrimary */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPrimary pprimaryNode1;
        {
            // Block
        PLiteral pliteralNode2;
        pliteralNode2 = (PLiteral)nodeArrayList1.get(0);

        pprimaryNode1 = new ALiteralPrimary(pliteralNode2);
        }
	nodeList.add(pprimaryNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce ALParenPrimary */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPrimary pprimaryNode1;
        {
            // Block
        TLParen tlparenNode2;
        PExpression pexpressionNode3;
        TRParen trparenNode4;
        tlparenNode2 = (TLParen)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        trparenNode4 = (TRParen)nodeArrayList3.get(0);

        pprimaryNode1 = new ALParenPrimary(tlparenNode2, pexpressionNode3, trparenNode4);
        }
	nodeList.add(pprimaryNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AFieldAccessPrimary */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPrimary pprimaryNode1;
        {
            // Block
        PFieldAccess pfieldaccessNode2;
        pfieldaccessNode2 = (PFieldAccess)nodeArrayList1.get(0);

        pprimaryNode1 = new AFieldAccessPrimary(pfieldaccessNode2);
        }
	nodeList.add(pprimaryNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce AMethodInvocationPrimary */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPrimary pprimaryNode1;
        {
            // Block
        PMethodInvocation pmethodinvocationNode2;
        pmethodinvocationNode2 = (PMethodInvocation)nodeArrayList1.get(0);

        pprimaryNode1 = new AMethodInvocationPrimary(pmethodinvocationNode2);
        }
	nodeList.add(pprimaryNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce AExpressionArgumentList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArgumentList pargumentlistNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        pargumentlistNode1 = new AExpressionArgumentList(pexpressionNode2);
        }
	nodeList.add(pargumentlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce AArgumentListArgumentList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArgumentList pargumentlistNode1;
        {
            // Block
        PArgumentList pargumentlistNode2;
        TComma tcommaNode3;
        PExpression pexpressionNode4;
        pargumentlistNode2 = (PArgumentList)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pargumentlistNode1 = new AArgumentListArgumentList(pargumentlistNode2, tcommaNode3, pexpressionNode4);
        }
	nodeList.add(pargumentlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce AFieldAccess */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFieldAccess pfieldaccessNode1;
        {
            // Block
        PPrimary pprimaryNode2;
        TDot tdotNode3;
        TIdentifier tidentifierNode4;
        pprimaryNode2 = (PPrimary)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);

        pfieldaccessNode1 = new AFieldAccess(pprimaryNode2, tdotNode3, tidentifierNode4);
        }
	nodeList.add(pfieldaccessNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce AAnamemethodinvocation1MethodInvocation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethodInvocation pmethodinvocationNode1;
        {
            // Block
        PName pnameNode2;
        TLParen tlparenNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRParen trparenNode5;
        pnameNode2 = (PName)nodeArrayList1.get(0);
        tlparenNode3 = (TLParen)nodeArrayList2.get(0);
        trparenNode5 = (TRParen)nodeArrayList3.get(0);

        pmethodinvocationNode1 = new ANameMethodInvocation(pnameNode2, tlparenNode3, null, trparenNode5);
        }
	nodeList.add(pmethodinvocationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce AAnamemethodinvocation2MethodInvocation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethodInvocation pmethodinvocationNode1;
        {
            // Block
        PName pnameNode2;
        TLParen tlparenNode3;
        PArgumentList pargumentlistNode4;
        TRParen trparenNode5;
        pnameNode2 = (PName)nodeArrayList1.get(0);
        tlparenNode3 = (TLParen)nodeArrayList2.get(0);
        pargumentlistNode4 = (PArgumentList)nodeArrayList3.get(0);
        trparenNode5 = (TRParen)nodeArrayList4.get(0);

        pmethodinvocationNode1 = new ANameMethodInvocation(pnameNode2, tlparenNode3, pargumentlistNode4, trparenNode5);
        }
	nodeList.add(pmethodinvocationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce AAprimarymethodinvocation1MethodInvocation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethodInvocation pmethodinvocationNode1;
        {
            // Block
        PPrimary pprimaryNode2;
        TDot tdotNode3;
        TIdentifier tidentifierNode4;
        TLParen tlparenNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TRParen trparenNode7;
        pprimaryNode2 = (PPrimary)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);
        tlparenNode5 = (TLParen)nodeArrayList4.get(0);
        trparenNode7 = (TRParen)nodeArrayList5.get(0);

        pmethodinvocationNode1 = new APrimaryMethodInvocation(pprimaryNode2, tdotNode3, tidentifierNode4, tlparenNode5, null, trparenNode7);
        }
	nodeList.add(pmethodinvocationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce AAprimarymethodinvocation2MethodInvocation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethodInvocation pmethodinvocationNode1;
        {
            // Block
        PPrimary pprimaryNode2;
        TDot tdotNode3;
        TIdentifier tidentifierNode4;
        TLParen tlparenNode5;
        PArgumentList pargumentlistNode6;
        TRParen trparenNode7;
        pprimaryNode2 = (PPrimary)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);
        tlparenNode5 = (TLParen)nodeArrayList4.get(0);
        pargumentlistNode6 = (PArgumentList)nodeArrayList5.get(0);
        trparenNode7 = (TRParen)nodeArrayList6.get(0);

        pmethodinvocationNode1 = new APrimaryMethodInvocation(pprimaryNode2, tdotNode3, tidentifierNode4, tlparenNode5, pargumentlistNode6, trparenNode7);
        }
	nodeList.add(pmethodinvocationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce AAnamecollectionmethodinvocation1MethodInvocation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethodInvocation pmethodinvocationNode1;
        {
            // Block
        PName pnameNode2;
        TArrow tarrowNode3;
        TIdentifier tidentifierNode4;
        TLParen tlparenNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TRParen trparenNode7;
        pnameNode2 = (PName)nodeArrayList1.get(0);
        tarrowNode3 = (TArrow)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);
        tlparenNode5 = (TLParen)nodeArrayList4.get(0);
        trparenNode7 = (TRParen)nodeArrayList5.get(0);

        pmethodinvocationNode1 = new ANameCollectionMethodInvocation(pnameNode2, tarrowNode3, tidentifierNode4, tlparenNode5, null, trparenNode7);
        }
	nodeList.add(pmethodinvocationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce AAnamecollectionmethodinvocation2MethodInvocation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethodInvocation pmethodinvocationNode1;
        {
            // Block
        PName pnameNode2;
        TArrow tarrowNode3;
        TIdentifier tidentifierNode4;
        TLParen tlparenNode5;
        PCollectionArgument pcollectionargumentNode6;
        TRParen trparenNode7;
        pnameNode2 = (PName)nodeArrayList1.get(0);
        tarrowNode3 = (TArrow)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);
        tlparenNode5 = (TLParen)nodeArrayList4.get(0);
        pcollectionargumentNode6 = (PCollectionArgument)nodeArrayList5.get(0);
        trparenNode7 = (TRParen)nodeArrayList6.get(0);

        pmethodinvocationNode1 = new ANameCollectionMethodInvocation(pnameNode2, tarrowNode3, tidentifierNode4, tlparenNode5, pcollectionargumentNode6, trparenNode7);
        }
	nodeList.add(pmethodinvocationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce AAcollectionmethodinvocation1MethodInvocation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethodInvocation pmethodinvocationNode1;
        {
            // Block
        PPrimary pprimaryNode2;
        TArrow tarrowNode3;
        TIdentifier tidentifierNode4;
        TLParen tlparenNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TRParen trparenNode7;
        pprimaryNode2 = (PPrimary)nodeArrayList1.get(0);
        tarrowNode3 = (TArrow)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);
        tlparenNode5 = (TLParen)nodeArrayList4.get(0);
        trparenNode7 = (TRParen)nodeArrayList5.get(0);

        pmethodinvocationNode1 = new ACollectionMethodInvocation(pprimaryNode2, tarrowNode3, tidentifierNode4, tlparenNode5, null, trparenNode7);
        }
	nodeList.add(pmethodinvocationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce AAcollectionmethodinvocation2MethodInvocation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethodInvocation pmethodinvocationNode1;
        {
            // Block
        PPrimary pprimaryNode2;
        TArrow tarrowNode3;
        TIdentifier tidentifierNode4;
        TLParen tlparenNode5;
        PCollectionArgument pcollectionargumentNode6;
        TRParen trparenNode7;
        pprimaryNode2 = (PPrimary)nodeArrayList1.get(0);
        tarrowNode3 = (TArrow)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);
        tlparenNode5 = (TLParen)nodeArrayList4.get(0);
        pcollectionargumentNode6 = (PCollectionArgument)nodeArrayList5.get(0);
        trparenNode7 = (TRParen)nodeArrayList6.get(0);

        pmethodinvocationNode1 = new ACollectionMethodInvocation(pprimaryNode2, tarrowNode3, tidentifierNode4, tlparenNode5, pcollectionargumentNode6, trparenNode7);
        }
	nodeList.add(pmethodinvocationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce ANameTupleMethodInvocation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethodInvocation pmethodinvocationNode1;
        {
            // Block
        PName pnameNode2;
        TArrow tarrowNode3;
        TIdentifier tidentifierNode4;
        TLParen tlparenNode5;
        PJoinArgument pjoinargumentNode6;
        TRParen trparenNode7;
        pnameNode2 = (PName)nodeArrayList1.get(0);
        tarrowNode3 = (TArrow)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);
        tlparenNode5 = (TLParen)nodeArrayList4.get(0);
        pjoinargumentNode6 = (PJoinArgument)nodeArrayList5.get(0);
        trparenNode7 = (TRParen)nodeArrayList6.get(0);

        pmethodinvocationNode1 = new ANameTupleMethodInvocation(pnameNode2, tarrowNode3, tidentifierNode4, tlparenNode5, pjoinargumentNode6, trparenNode7);
        }
	nodeList.add(pmethodinvocationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce ATupleMethodInvocation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethodInvocation pmethodinvocationNode1;
        {
            // Block
        PPrimary pprimaryNode2;
        TArrow tarrowNode3;
        TIdentifier tidentifierNode4;
        TLParen tlparenNode5;
        PJoinArgument pjoinargumentNode6;
        TRParen trparenNode7;
        pprimaryNode2 = (PPrimary)nodeArrayList1.get(0);
        tarrowNode3 = (TArrow)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);
        tlparenNode5 = (TLParen)nodeArrayList4.get(0);
        pjoinargumentNode6 = (PJoinArgument)nodeArrayList5.get(0);
        trparenNode7 = (TRParen)nodeArrayList6.get(0);

        pmethodinvocationNode1 = new ATupleMethodInvocation(pprimaryNode2, tarrowNode3, tidentifierNode4, tlparenNode5, pjoinargumentNode6, trparenNode7);
        }
	nodeList.add(pmethodinvocationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce AIdType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        ptypeNode1 = new AIdType(tidentifierNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce AGelloType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PGelloType pgellotypeNode2;
        pgellotypeNode2 = (PGelloType)nodeArrayList1.get(0);

        ptypeNode1 = new AGelloType(pgellotypeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce ASimpleCollectionArgument */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCollectionArgument pcollectionargumentNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        pcollectionargumentNode1 = new ASimpleCollectionArgument(pexpressionNode2);
        }
	nodeList.add(pcollectionargumentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce ANamedCollectionArgument */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCollectionArgument pcollectionargumentNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TPipe tpipeNode3;
        PExpression pexpressionNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tpipeNode3 = (TPipe)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pcollectionargumentNode1 = new ANamedCollectionArgument(tidentifierNode2, tpipeNode3, pexpressionNode4);
        }
	nodeList.add(pcollectionargumentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce ATypedCollectionArgument */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCollectionArgument pcollectionargumentNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TColon tcolonNode3;
        PType ptypeNode4;
        TPipe tpipeNode5;
        PExpression pexpressionNode6;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        ptypeNode4 = (PType)nodeArrayList3.get(0);
        tpipeNode5 = (TPipe)nodeArrayList4.get(0);
        pexpressionNode6 = (PExpression)nodeArrayList5.get(0);

        pcollectionargumentNode1 = new ATypedCollectionArgument(tidentifierNode2, tcolonNode3, ptypeNode4, tpipeNode5, pexpressionNode6);
        }
	nodeList.add(pcollectionargumentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce AIterateCollectionArgument */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCollectionArgument pcollectionargumentNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TColon tcolonNode3;
        PType ptypeNode4;
        TSemicolon tsemicolonNode5;
        TIdentifier tidentifierNode6;
        TColon tcolonNode7;
        PType ptypeNode8;
        TEq teqNode9;
        PExpression pexpressionNode10;
        TPipe tpipeNode11;
        PExpression pexpressionNode12;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        ptypeNode4 = (PType)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);
        tidentifierNode6 = (TIdentifier)nodeArrayList5.get(0);
        tcolonNode7 = (TColon)nodeArrayList6.get(0);
        ptypeNode8 = (PType)nodeArrayList7.get(0);
        teqNode9 = (TEq)nodeArrayList8.get(0);
        pexpressionNode10 = (PExpression)nodeArrayList9.get(0);
        tpipeNode11 = (TPipe)nodeArrayList10.get(0);
        pexpressionNode12 = (PExpression)nodeArrayList11.get(0);

        pcollectionargumentNode1 = new AIterateCollectionArgument(tidentifierNode2, tcolonNode3, ptypeNode4, tsemicolonNode5, tidentifierNode6, tcolonNode7, ptypeNode8, teqNode9, pexpressionNode10, tpipeNode11, pexpressionNode12);
        }
	nodeList.add(pcollectionargumentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce ASimpleJoinCollection */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PJoinCollection pjoincollectionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pjoincollectionNode1 = new ASimpleJoinCollection(tidentifierNode2);
        }
	nodeList.add(pjoincollectionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce AAliasedJoinCollection */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PJoinCollection pjoincollectionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TIn tinNode3;
        TIdentifier tidentifierNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tinNode3 = (TIn)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);

        pjoincollectionNode1 = new AAliasedJoinCollection(tidentifierNode2, tinNode3, tidentifierNode4);
        }
	nodeList.add(pjoincollectionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new54() /* reduce ASingleJoinCollectionList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PJoinCollectionList pjoincollectionlistNode1;
        {
            // Block
        PJoinCollection pjoincollectionNode2;
        pjoincollectionNode2 = (PJoinCollection)nodeArrayList1.get(0);

        pjoincollectionlistNode1 = new ASingleJoinCollectionList(pjoincollectionNode2);
        }
	nodeList.add(pjoincollectionlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new55() /* reduce AListJoinCollectionList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PJoinCollectionList pjoincollectionlistNode1;
        {
            // Block
        PJoinCollectionList pjoincollectionlistNode2;
        TComma tcommaNode3;
        PJoinCollection pjoincollectionNode4;
        pjoincollectionlistNode2 = (PJoinCollectionList)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pjoincollectionNode4 = (PJoinCollection)nodeArrayList3.get(0);

        pjoincollectionlistNode1 = new AListJoinCollectionList(pjoincollectionlistNode2, tcommaNode3, pjoincollectionNode4);
        }
	nodeList.add(pjoincollectionlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new56() /* reduce AJoinProperty */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PJoinProperty pjoinpropertyNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TDot tdotNode3;
        TIdentifier tidentifierNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);

        pjoinpropertyNode1 = new AJoinProperty(tidentifierNode2, tdotNode3, tidentifierNode4);
        }
	nodeList.add(pjoinpropertyNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new57() /* reduce ASingleJoinPropertyList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PJoinPropertyList pjoinpropertylistNode1;
        {
            // Block
        PJoinProperty pjoinpropertyNode2;
        pjoinpropertyNode2 = (PJoinProperty)nodeArrayList1.get(0);

        pjoinpropertylistNode1 = new ASingleJoinPropertyList(pjoinpropertyNode2);
        }
	nodeList.add(pjoinpropertylistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new58() /* reduce AListJoinPropertyList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PJoinPropertyList pjoinpropertylistNode1;
        {
            // Block
        PJoinPropertyList pjoinpropertylistNode2;
        TComma tcommaNode3;
        PJoinProperty pjoinpropertyNode4;
        pjoinpropertylistNode2 = (PJoinPropertyList)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pjoinpropertyNode4 = (PJoinProperty)nodeArrayList3.get(0);

        pjoinpropertylistNode1 = new AListJoinPropertyList(pjoinpropertylistNode2, tcommaNode3, pjoinpropertyNode4);
        }
	nodeList.add(pjoinpropertylistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new59() /* reduce AUnorderedJoinArgument */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PJoinArgument pjoinargumentNode1;
        {
            // Block
        PJoinCollectionList pjoincollectionlistNode2;
        TSemicolon tsemicolonNode3;
        PJoinPropertyList pjoinpropertylistNode4;
        TSemicolon tsemicolonNode5;
        PExpression pexpressionNode6;
        pjoincollectionlistNode2 = (PJoinCollectionList)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);
        pjoinpropertylistNode4 = (PJoinPropertyList)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);
        pexpressionNode6 = (PExpression)nodeArrayList5.get(0);

        pjoinargumentNode1 = new AUnorderedJoinArgument(pjoincollectionlistNode2, tsemicolonNode3, pjoinpropertylistNode4, tsemicolonNode5, pexpressionNode6);
        }
	nodeList.add(pjoinargumentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new60() /* reduce AOrderedJoinArgument */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PJoinArgument pjoinargumentNode1;
        {
            // Block
        PJoinCollectionList pjoincollectionlistNode2;
        TSemicolon tsemicolonNode3;
        PJoinPropertyList pjoinpropertylistNode4;
        TSemicolon tsemicolonNode5;
        PExpression pexpressionNode6;
        TSemicolon tsemicolonNode7;
        PExpression pexpressionNode8;
        pjoincollectionlistNode2 = (PJoinCollectionList)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);
        pjoinpropertylistNode4 = (PJoinPropertyList)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);
        pexpressionNode6 = (PExpression)nodeArrayList5.get(0);
        tsemicolonNode7 = (TSemicolon)nodeArrayList6.get(0);
        pexpressionNode8 = (PExpression)nodeArrayList7.get(0);

        pjoinargumentNode1 = new AOrderedJoinArgument(pjoincollectionlistNode2, tsemicolonNode3, pjoinpropertylistNode4, tsemicolonNode5, pexpressionNode6, tsemicolonNode7, pexpressionNode8);
        }
	nodeList.add(pjoinargumentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new61() /* reduce APrimaryPostfixExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPostfixExpression ppostfixexpressionNode1;
        {
            // Block
        PPrimary pprimaryNode2;
        pprimaryNode2 = (PPrimary)nodeArrayList1.get(0);

        ppostfixexpressionNode1 = new APrimaryPostfixExpression(pprimaryNode2);
        }
	nodeList.add(ppostfixexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new62() /* reduce ANamePostfixExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPostfixExpression ppostfixexpressionNode1;
        {
            // Block
        PName pnameNode2;
        pnameNode2 = (PName)nodeArrayList1.get(0);

        ppostfixexpressionNode1 = new ANamePostfixExpression(pnameNode2);
        }
	nodeList.add(ppostfixexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new63() /* reduce AMinusUnaryExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PUnaryExpression punaryexpressionNode1;
        {
            // Block
        TMinus tminusNode2;
        PUnaryExpression punaryexpressionNode3;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        punaryexpressionNode3 = (PUnaryExpression)nodeArrayList2.get(0);

        punaryexpressionNode1 = new AMinusUnaryExpression(tminusNode2, punaryexpressionNode3);
        }
	nodeList.add(punaryexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new64() /* reduce ANotUnaryExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PUnaryExpression punaryexpressionNode1;
        {
            // Block
        TNot tnotNode2;
        PUnaryExpression punaryexpressionNode3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        punaryexpressionNode3 = (PUnaryExpression)nodeArrayList2.get(0);

        punaryexpressionNode1 = new ANotUnaryExpression(tnotNode2, punaryexpressionNode3);
        }
	nodeList.add(punaryexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new65() /* reduce APostfixUnaryExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PUnaryExpression punaryexpressionNode1;
        {
            // Block
        PPostfixExpression ppostfixexpressionNode2;
        ppostfixexpressionNode2 = (PPostfixExpression)nodeArrayList1.get(0);

        punaryexpressionNode1 = new APostfixUnaryExpression(ppostfixexpressionNode2);
        }
	nodeList.add(punaryexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new66() /* reduce AUnaryMultiplicativeExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMultiplicativeExpression pmultiplicativeexpressionNode1;
        {
            // Block
        PUnaryExpression punaryexpressionNode2;
        punaryexpressionNode2 = (PUnaryExpression)nodeArrayList1.get(0);

        pmultiplicativeexpressionNode1 = new AUnaryMultiplicativeExpression(punaryexpressionNode2);
        }
	nodeList.add(pmultiplicativeexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new67() /* reduce AMultiplyMultiplicativeExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMultiplicativeExpression pmultiplicativeexpressionNode1;
        {
            // Block
        PMultiplicativeExpression pmultiplicativeexpressionNode2;
        TStar tstarNode3;
        PUnaryExpression punaryexpressionNode4;
        pmultiplicativeexpressionNode2 = (PMultiplicativeExpression)nodeArrayList1.get(0);
        tstarNode3 = (TStar)nodeArrayList2.get(0);
        punaryexpressionNode4 = (PUnaryExpression)nodeArrayList3.get(0);

        pmultiplicativeexpressionNode1 = new AMultiplyMultiplicativeExpression(pmultiplicativeexpressionNode2, tstarNode3, punaryexpressionNode4);
        }
	nodeList.add(pmultiplicativeexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new68() /* reduce ADivideMultiplicativeExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMultiplicativeExpression pmultiplicativeexpressionNode1;
        {
            // Block
        PMultiplicativeExpression pmultiplicativeexpressionNode2;
        TDivide tdivideNode3;
        PUnaryExpression punaryexpressionNode4;
        pmultiplicativeexpressionNode2 = (PMultiplicativeExpression)nodeArrayList1.get(0);
        tdivideNode3 = (TDivide)nodeArrayList2.get(0);
        punaryexpressionNode4 = (PUnaryExpression)nodeArrayList3.get(0);

        pmultiplicativeexpressionNode1 = new ADivideMultiplicativeExpression(pmultiplicativeexpressionNode2, tdivideNode3, punaryexpressionNode4);
        }
	nodeList.add(pmultiplicativeexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new69() /* reduce AIntdivMultiplicativeExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMultiplicativeExpression pmultiplicativeexpressionNode1;
        {
            // Block
        PMultiplicativeExpression pmultiplicativeexpressionNode2;
        TIntdiv tintdivNode3;
        PUnaryExpression punaryexpressionNode4;
        pmultiplicativeexpressionNode2 = (PMultiplicativeExpression)nodeArrayList1.get(0);
        tintdivNode3 = (TIntdiv)nodeArrayList2.get(0);
        punaryexpressionNode4 = (PUnaryExpression)nodeArrayList3.get(0);

        pmultiplicativeexpressionNode1 = new AIntdivMultiplicativeExpression(pmultiplicativeexpressionNode2, tintdivNode3, punaryexpressionNode4);
        }
	nodeList.add(pmultiplicativeexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new70() /* reduce AModMultiplicativeExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMultiplicativeExpression pmultiplicativeexpressionNode1;
        {
            // Block
        PMultiplicativeExpression pmultiplicativeexpressionNode2;
        TMod tmodNode3;
        PUnaryExpression punaryexpressionNode4;
        pmultiplicativeexpressionNode2 = (PMultiplicativeExpression)nodeArrayList1.get(0);
        tmodNode3 = (TMod)nodeArrayList2.get(0);
        punaryexpressionNode4 = (PUnaryExpression)nodeArrayList3.get(0);

        pmultiplicativeexpressionNode1 = new AModMultiplicativeExpression(pmultiplicativeexpressionNode2, tmodNode3, punaryexpressionNode4);
        }
	nodeList.add(pmultiplicativeexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new71() /* reduce AMaxMultiplicativeExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMultiplicativeExpression pmultiplicativeexpressionNode1;
        {
            // Block
        PMultiplicativeExpression pmultiplicativeexpressionNode2;
        TMax tmaxNode3;
        PUnaryExpression punaryexpressionNode4;
        pmultiplicativeexpressionNode2 = (PMultiplicativeExpression)nodeArrayList1.get(0);
        tmaxNode3 = (TMax)nodeArrayList2.get(0);
        punaryexpressionNode4 = (PUnaryExpression)nodeArrayList3.get(0);

        pmultiplicativeexpressionNode1 = new AMaxMultiplicativeExpression(pmultiplicativeexpressionNode2, tmaxNode3, punaryexpressionNode4);
        }
	nodeList.add(pmultiplicativeexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new72() /* reduce AMinMultiplicativeExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMultiplicativeExpression pmultiplicativeexpressionNode1;
        {
            // Block
        PMultiplicativeExpression pmultiplicativeexpressionNode2;
        TMin tminNode3;
        PUnaryExpression punaryexpressionNode4;
        pmultiplicativeexpressionNode2 = (PMultiplicativeExpression)nodeArrayList1.get(0);
        tminNode3 = (TMin)nodeArrayList2.get(0);
        punaryexpressionNode4 = (PUnaryExpression)nodeArrayList3.get(0);

        pmultiplicativeexpressionNode1 = new AMinMultiplicativeExpression(pmultiplicativeexpressionNode2, tminNode3, punaryexpressionNode4);
        }
	nodeList.add(pmultiplicativeexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new73() /* reduce AMultiplyAdditiveExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAdditiveExpression padditiveexpressionNode1;
        {
            // Block
        PMultiplicativeExpression pmultiplicativeexpressionNode2;
        pmultiplicativeexpressionNode2 = (PMultiplicativeExpression)nodeArrayList1.get(0);

        padditiveexpressionNode1 = new AMultiplyAdditiveExpression(pmultiplicativeexpressionNode2);
        }
	nodeList.add(padditiveexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new74() /* reduce APlusAdditiveExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAdditiveExpression padditiveexpressionNode1;
        {
            // Block
        PAdditiveExpression padditiveexpressionNode2;
        TPlus tplusNode3;
        PMultiplicativeExpression pmultiplicativeexpressionNode4;
        padditiveexpressionNode2 = (PAdditiveExpression)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pmultiplicativeexpressionNode4 = (PMultiplicativeExpression)nodeArrayList3.get(0);

        padditiveexpressionNode1 = new APlusAdditiveExpression(padditiveexpressionNode2, tplusNode3, pmultiplicativeexpressionNode4);
        }
	nodeList.add(padditiveexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new75() /* reduce AMinusAdditiveExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAdditiveExpression padditiveexpressionNode1;
        {
            // Block
        PAdditiveExpression padditiveexpressionNode2;
        TMinus tminusNode3;
        PMultiplicativeExpression pmultiplicativeexpressionNode4;
        padditiveexpressionNode2 = (PAdditiveExpression)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pmultiplicativeexpressionNode4 = (PMultiplicativeExpression)nodeArrayList3.get(0);

        padditiveexpressionNode1 = new AMinusAdditiveExpression(padditiveexpressionNode2, tminusNode3, pmultiplicativeexpressionNode4);
        }
	nodeList.add(padditiveexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new76() /* reduce AAdditiveExpressionRelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelationalExpression prelationalexpressionNode1;
        {
            // Block
        PAdditiveExpression padditiveexpressionNode2;
        padditiveexpressionNode2 = (PAdditiveExpression)nodeArrayList1.get(0);

        prelationalexpressionNode1 = new AAdditiveExpressionRelationalExpression(padditiveexpressionNode2);
        }
	nodeList.add(prelationalexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new77() /* reduce ALtRelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelationalExpression prelationalexpressionNode1;
        {
            // Block
        PRelationalExpression prelationalexpressionNode2;
        TLt tltNode3;
        PAdditiveExpression padditiveexpressionNode4;
        prelationalexpressionNode2 = (PRelationalExpression)nodeArrayList1.get(0);
        tltNode3 = (TLt)nodeArrayList2.get(0);
        padditiveexpressionNode4 = (PAdditiveExpression)nodeArrayList3.get(0);

        prelationalexpressionNode1 = new ALtRelationalExpression(prelationalexpressionNode2, tltNode3, padditiveexpressionNode4);
        }
	nodeList.add(prelationalexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new78() /* reduce AGtRelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelationalExpression prelationalexpressionNode1;
        {
            // Block
        PRelationalExpression prelationalexpressionNode2;
        TGt tgtNode3;
        PAdditiveExpression padditiveexpressionNode4;
        prelationalexpressionNode2 = (PRelationalExpression)nodeArrayList1.get(0);
        tgtNode3 = (TGt)nodeArrayList2.get(0);
        padditiveexpressionNode4 = (PAdditiveExpression)nodeArrayList3.get(0);

        prelationalexpressionNode1 = new AGtRelationalExpression(prelationalexpressionNode2, tgtNode3, padditiveexpressionNode4);
        }
	nodeList.add(prelationalexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new79() /* reduce ALteqRelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelationalExpression prelationalexpressionNode1;
        {
            // Block
        PRelationalExpression prelationalexpressionNode2;
        TLteq tlteqNode3;
        PAdditiveExpression padditiveexpressionNode4;
        prelationalexpressionNode2 = (PRelationalExpression)nodeArrayList1.get(0);
        tlteqNode3 = (TLteq)nodeArrayList2.get(0);
        padditiveexpressionNode4 = (PAdditiveExpression)nodeArrayList3.get(0);

        prelationalexpressionNode1 = new ALteqRelationalExpression(prelationalexpressionNode2, tlteqNode3, padditiveexpressionNode4);
        }
	nodeList.add(prelationalexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new80() /* reduce AGteqRelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelationalExpression prelationalexpressionNode1;
        {
            // Block
        PRelationalExpression prelationalexpressionNode2;
        TGteq tgteqNode3;
        PAdditiveExpression padditiveexpressionNode4;
        prelationalexpressionNode2 = (PRelationalExpression)nodeArrayList1.get(0);
        tgteqNode3 = (TGteq)nodeArrayList2.get(0);
        padditiveexpressionNode4 = (PAdditiveExpression)nodeArrayList3.get(0);

        prelationalexpressionNode1 = new AGteqRelationalExpression(prelationalexpressionNode2, tgteqNode3, padditiveexpressionNode4);
        }
	nodeList.add(prelationalexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new81() /* reduce AEqRelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelationalExpression prelationalexpressionNode1;
        {
            // Block
        PRelationalExpression prelationalexpressionNode2;
        TEq teqNode3;
        PAdditiveExpression padditiveexpressionNode4;
        prelationalexpressionNode2 = (PRelationalExpression)nodeArrayList1.get(0);
        teqNode3 = (TEq)nodeArrayList2.get(0);
        padditiveexpressionNode4 = (PAdditiveExpression)nodeArrayList3.get(0);

        prelationalexpressionNode1 = new AEqRelationalExpression(prelationalexpressionNode2, teqNode3, padditiveexpressionNode4);
        }
	nodeList.add(prelationalexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new82() /* reduce ANeqRelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelationalExpression prelationalexpressionNode1;
        {
            // Block
        PRelationalExpression prelationalexpressionNode2;
        TNeq tneqNode3;
        PAdditiveExpression padditiveexpressionNode4;
        prelationalexpressionNode2 = (PRelationalExpression)nodeArrayList1.get(0);
        tneqNode3 = (TNeq)nodeArrayList2.get(0);
        padditiveexpressionNode4 = (PAdditiveExpression)nodeArrayList3.get(0);

        prelationalexpressionNode1 = new ANeqRelationalExpression(prelationalexpressionNode2, tneqNode3, padditiveexpressionNode4);
        }
	nodeList.add(prelationalexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new83() /* reduce ARelationalConditionalAndExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConditionalAndExpression pconditionalandexpressionNode1;
        {
            // Block
        PRelationalExpression prelationalexpressionNode2;
        prelationalexpressionNode2 = (PRelationalExpression)nodeArrayList1.get(0);

        pconditionalandexpressionNode1 = new ARelationalConditionalAndExpression(prelationalexpressionNode2);
        }
	nodeList.add(pconditionalandexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new84() /* reduce AAndConditionalAndExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConditionalAndExpression pconditionalandexpressionNode1;
        {
            // Block
        PConditionalAndExpression pconditionalandexpressionNode2;
        TAnd tandNode3;
        PRelationalExpression prelationalexpressionNode4;
        pconditionalandexpressionNode2 = (PConditionalAndExpression)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        prelationalexpressionNode4 = (PRelationalExpression)nodeArrayList3.get(0);

        pconditionalandexpressionNode1 = new AAndConditionalAndExpression(pconditionalandexpressionNode2, tandNode3, prelationalexpressionNode4);
        }
	nodeList.add(pconditionalandexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new85() /* reduce AAndConditionalOrExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConditionalOrExpression pconditionalorexpressionNode1;
        {
            // Block
        PConditionalAndExpression pconditionalandexpressionNode2;
        pconditionalandexpressionNode2 = (PConditionalAndExpression)nodeArrayList1.get(0);

        pconditionalorexpressionNode1 = new AAndConditionalOrExpression(pconditionalandexpressionNode2);
        }
	nodeList.add(pconditionalorexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new86() /* reduce AOrConditionalOrExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConditionalOrExpression pconditionalorexpressionNode1;
        {
            // Block
        PConditionalOrExpression pconditionalorexpressionNode2;
        TOr torNode3;
        PConditionalAndExpression pconditionalandexpressionNode4;
        pconditionalorexpressionNode2 = (PConditionalOrExpression)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        pconditionalandexpressionNode4 = (PConditionalAndExpression)nodeArrayList3.get(0);

        pconditionalorexpressionNode1 = new AOrConditionalOrExpression(pconditionalorexpressionNode2, torNode3, pconditionalandexpressionNode4);
        }
	nodeList.add(pconditionalorexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new87() /* reduce AXorConditionalOrExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConditionalOrExpression pconditionalorexpressionNode1;
        {
            // Block
        PConditionalOrExpression pconditionalorexpressionNode2;
        TXor txorNode3;
        PConditionalAndExpression pconditionalandexpressionNode4;
        pconditionalorexpressionNode2 = (PConditionalOrExpression)nodeArrayList1.get(0);
        txorNode3 = (TXor)nodeArrayList2.get(0);
        pconditionalandexpressionNode4 = (PConditionalAndExpression)nodeArrayList3.get(0);

        pconditionalorexpressionNode1 = new AXorConditionalOrExpression(pconditionalorexpressionNode2, txorNode3, pconditionalandexpressionNode4);
        }
	nodeList.add(pconditionalorexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new88() /* reduce AOrConditionalExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConditionalExpression pconditionalexpressionNode1;
        {
            // Block
        PConditionalOrExpression pconditionalorexpressionNode2;
        pconditionalorexpressionNode2 = (PConditionalOrExpression)nodeArrayList1.get(0);

        pconditionalexpressionNode1 = new AOrConditionalExpression(pconditionalorexpressionNode2);
        }
	nodeList.add(pconditionalexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new89() /* reduce AImpliesConditionalExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConditionalExpression pconditionalexpressionNode1;
        {
            // Block
        PConditionalExpression pconditionalexpressionNode2;
        TImplies timpliesNode3;
        PConditionalOrExpression pconditionalorexpressionNode4;
        pconditionalexpressionNode2 = (PConditionalExpression)nodeArrayList1.get(0);
        timpliesNode3 = (TImplies)nodeArrayList2.get(0);
        pconditionalorexpressionNode4 = (PConditionalOrExpression)nodeArrayList3.get(0);

        pconditionalexpressionNode1 = new AImpliesConditionalExpression(pconditionalexpressionNode2, timpliesNode3, pconditionalorexpressionNode4);
        }
	nodeList.add(pconditionalexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new90() /* reduce AExpressionCollectionLiteralArgument */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCollectionLiteralArgument pcollectionliteralargumentNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        pcollectionliteralargumentNode1 = new AExpressionCollectionLiteralArgument(pexpressionNode2);
        }
	nodeList.add(pcollectionliteralargumentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new91() /* reduce ARangeCollectionLiteralArgument */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCollectionLiteralArgument pcollectionliteralargumentNode1;
        {
            // Block
        TLBracket tlbracketNode2;
        PExpression pexpressionNode3;
        TDotdot tdotdotNode4;
        PExpression pexpressionNode5;
        TRBracket trbracketNode6;
        tlbracketNode2 = (TLBracket)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tdotdotNode4 = (TDotdot)nodeArrayList3.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList4.get(0);
        trbracketNode6 = (TRBracket)nodeArrayList5.get(0);

        pcollectionliteralargumentNode1 = new ARangeCollectionLiteralArgument(tlbracketNode2, pexpressionNode3, tdotdotNode4, pexpressionNode5, trbracketNode6);
        }
	nodeList.add(pcollectionliteralargumentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new92() /* reduce ASingleCollectionList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCollectionList pcollectionlistNode1;
        {
            // Block
        PCollectionLiteralArgument pcollectionliteralargumentNode2;
        pcollectionliteralargumentNode2 = (PCollectionLiteralArgument)nodeArrayList1.get(0);

        pcollectionlistNode1 = new ASingleCollectionList(pcollectionliteralargumentNode2);
        }
	nodeList.add(pcollectionlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new93() /* reduce AListCollectionList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCollectionList pcollectionlistNode1;
        {
            // Block
        PCollectionList pcollectionlistNode2;
        TComma tcommaNode3;
        PCollectionLiteralArgument pcollectionliteralargumentNode4;
        pcollectionlistNode2 = (PCollectionList)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pcollectionliteralargumentNode4 = (PCollectionLiteralArgument)nodeArrayList3.get(0);

        pcollectionlistNode1 = new AListCollectionList(pcollectionlistNode2, tcommaNode3, pcollectionliteralargumentNode4);
        }
	nodeList.add(pcollectionlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new94() /* reduce AAcollectionliteral1CollectionLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCollectionLiteral pcollectionliteralNode1;
        {
            // Block
        PCollectionType pcollectiontypeNode2;
        TLBrace tlbraceNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRBrace trbraceNode5;
        pcollectiontypeNode2 = (PCollectionType)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        trbraceNode5 = (TRBrace)nodeArrayList3.get(0);

        pcollectionliteralNode1 = new ACollectionLiteral(pcollectiontypeNode2, tlbraceNode3, null, trbraceNode5);
        }
	nodeList.add(pcollectionliteralNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new95() /* reduce AAcollectionliteral2CollectionLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCollectionLiteral pcollectionliteralNode1;
        {
            // Block
        PCollectionType pcollectiontypeNode2;
        TLBrace tlbraceNode3;
        PCollectionList pcollectionlistNode4;
        TRBrace trbraceNode5;
        pcollectiontypeNode2 = (PCollectionType)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        pcollectionlistNode4 = (PCollectionList)nodeArrayList3.get(0);
        trbraceNode5 = (TRBrace)nodeArrayList4.get(0);

        pcollectionliteralNode1 = new ACollectionLiteral(pcollectiontypeNode2, tlbraceNode3, pcollectionlistNode4, trbraceNode5);
        }
	nodeList.add(pcollectionliteralNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new96() /* reduce ATypedVarDefinition */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTypedVarDefinition ptypedvardefinitionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TColon tcolonNode3;
        PType ptypeNode4;
        TEq teqNode5;
        PExpression pexpressionNode6;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        ptypeNode4 = (PType)nodeArrayList3.get(0);
        teqNode5 = (TEq)nodeArrayList4.get(0);
        pexpressionNode6 = (PExpression)nodeArrayList5.get(0);

        ptypedvardefinitionNode1 = new ATypedVarDefinition(tidentifierNode2, tcolonNode3, ptypeNode4, teqNode5, pexpressionNode6);
        }
	nodeList.add(ptypedvardefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new97() /* reduce ABindingTupleLiteralList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTupleLiteralList ptupleliterallistNode1;
        {
            // Block
        PTypedVarDefinition ptypedvardefinitionNode2;
        ptypedvardefinitionNode2 = (PTypedVarDefinition)nodeArrayList1.get(0);

        ptupleliterallistNode1 = new ABindingTupleLiteralList(ptypedvardefinitionNode2);
        }
	nodeList.add(ptupleliterallistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new98() /* reduce AListTupleLiteralList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTupleLiteralList ptupleliterallistNode1;
        {
            // Block
        PTupleLiteralList ptupleliterallistNode2;
        TComma tcommaNode3;
        PTypedVarDefinition ptypedvardefinitionNode4;
        ptupleliterallistNode2 = (PTupleLiteralList)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        ptypedvardefinitionNode4 = (PTypedVarDefinition)nodeArrayList3.get(0);

        ptupleliterallistNode1 = new AListTupleLiteralList(ptupleliterallistNode2, tcommaNode3, ptypedvardefinitionNode4);
        }
	nodeList.add(ptupleliterallistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new99() /* reduce AAtupleliteral1TupleLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTupleLiteral ptupleliteralNode1;
        {
            // Block
        TTuple ttupleNode2;
        TLBrace tlbraceNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRBrace trbraceNode5;
        ttupleNode2 = (TTuple)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        trbraceNode5 = (TRBrace)nodeArrayList3.get(0);

        ptupleliteralNode1 = new ATupleLiteral(ttupleNode2, tlbraceNode3, null, trbraceNode5);
        }
	nodeList.add(ptupleliteralNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new100() /* reduce AAtupleliteral2TupleLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTupleLiteral ptupleliteralNode1;
        {
            // Block
        TTuple ttupleNode2;
        TLBrace tlbraceNode3;
        PTupleLiteralList ptupleliterallistNode4;
        TRBrace trbraceNode5;
        ttupleNode2 = (TTuple)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        ptupleliterallistNode4 = (PTupleLiteralList)nodeArrayList3.get(0);
        trbraceNode5 = (TRBrace)nodeArrayList4.get(0);

        ptupleliteralNode1 = new ATupleLiteral(ttupleNode2, tlbraceNode3, ptupleliterallistNode4, trbraceNode5);
        }
	nodeList.add(ptupleliteralNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, {4, SHIFT, 2}, {6, SHIFT, 3}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 1}, {0, SHIFT, 1}, {4, SHIFT, 2}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 2}, {51, SHIFT, 37}, },
			{{-1, ERROR, 3}, {51, SHIFT, 38}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 7}, {40, SHIFT, 39}, },
			{{-1, ERROR, 8}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 9}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 10}, {0, SHIFT, 1}, {4, SHIFT, 2}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 15}, {52, ACCEPT, -1}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 62}, {17, SHIFT, 43}, {21, SHIFT, 44}, {38, SHIFT, 45}, },
			{{-1, ERROR, 22}, {40, SHIFT, 46}, },
			{{-1, REDUCE, 61}, {17, SHIFT, 47}, {21, SHIFT, 48}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 73}, {20, SHIFT, 49}, {27, SHIFT, 50}, {30, SHIFT, 51}, {31, SHIFT, 52}, {33, SHIFT, 53}, {45, SHIFT, 54}, },
			{{-1, REDUCE, 76}, {32, SHIFT, 55}, {37, SHIFT, 56}, },
			{{-1, REDUCE, 83}, {23, SHIFT, 57}, {24, SHIFT, 58}, {25, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {34, SHIFT, 62}, },
			{{-1, REDUCE, 85}, {16, SHIFT, 63}, },
			{{-1, REDUCE, 88}, {36, SHIFT, 64}, {47, SHIFT, 65}, },
			{{-1, REDUCE, 9}, {26, SHIFT, 66}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 36}, {1, SHIFT, 67}, },
			{{-1, ERROR, 37}, {18, SHIFT, 68}, },
			{{-1, ERROR, 38}, {5, SHIFT, 69}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 39}, {41, SHIFT, 71}, {51, SHIFT, 72}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 42}, {39, SHIFT, 75}, },
			{{-1, ERROR, 43}, {51, SHIFT, 76}, },
			{{-1, ERROR, 44}, {51, SHIFT, 77}, },
			{{-1, ERROR, 45}, {0, SHIFT, 1}, {4, SHIFT, 2}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {39, SHIFT, 78}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 46}, {0, SHIFT, 1}, {4, SHIFT, 2}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {41, SHIFT, 81}, {42, SHIFT, 82}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 47}, {51, SHIFT, 86}, },
			{{-1, ERROR, 48}, {51, SHIFT, 87}, },
			{{-1, ERROR, 49}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 50}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 51}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 52}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 53}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 54}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 55}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 56}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 57}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 58}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 59}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 60}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 61}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 62}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 63}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 64}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 65}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 66}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 67}, {0, SHIFT, 1}, {4, SHIFT, 2}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 68}, {8, SHIFT, 107}, {9, SHIFT, 108}, {10, SHIFT, 109}, {11, SHIFT, 110}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 111}, {51, SHIFT, 112}, },
			{{-1, ERROR, 69}, {0, SHIFT, 1}, {4, SHIFT, 2}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 70}, {5, SHIFT, 119}, {26, SHIFT, 66}, },
			{{-1, REDUCE, 99}, },
			{{-1, ERROR, 72}, {18, SHIFT, 120}, },
			{{-1, REDUCE, 97}, },
			{{-1, ERROR, 74}, {19, SHIFT, 121}, {41, SHIFT, 122}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 76}, {38, SHIFT, 123}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 80}, {19, SHIFT, 124}, {39, SHIFT, 125}, },
			{{-1, REDUCE, 94}, },
			{{-1, ERROR, 82}, {0, SHIFT, 1}, {4, SHIFT, 2}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 92}, },
			{{-1, ERROR, 85}, {19, SHIFT, 127}, {41, SHIFT, 128}, },
			{{-1, ERROR, 86}, {38, SHIFT, 129}, },
			{{-1, REDUCE, 35}, {38, SHIFT, 130}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 75}, {20, SHIFT, 49}, {27, SHIFT, 50}, {30, SHIFT, 51}, {31, SHIFT, 52}, {33, SHIFT, 53}, {45, SHIFT, 54}, },
			{{-1, REDUCE, 74}, {20, SHIFT, 49}, {27, SHIFT, 50}, {30, SHIFT, 51}, {31, SHIFT, 52}, {33, SHIFT, 53}, {45, SHIFT, 54}, },
			{{-1, REDUCE, 81}, {32, SHIFT, 55}, {37, SHIFT, 56}, },
			{{-1, REDUCE, 80}, {32, SHIFT, 55}, {37, SHIFT, 56}, },
			{{-1, REDUCE, 78}, {32, SHIFT, 55}, {37, SHIFT, 56}, },
			{{-1, REDUCE, 79}, {32, SHIFT, 55}, {37, SHIFT, 56}, },
			{{-1, REDUCE, 77}, {32, SHIFT, 55}, {37, SHIFT, 56}, },
			{{-1, REDUCE, 82}, {32, SHIFT, 55}, {37, SHIFT, 56}, },
			{{-1, REDUCE, 84}, {23, SHIFT, 57}, {24, SHIFT, 58}, {25, SHIFT, 59}, {28, SHIFT, 60}, {29, SHIFT, 61}, {34, SHIFT, 62}, },
			{{-1, REDUCE, 86}, {16, SHIFT, 63}, },
			{{-1, REDUCE, 87}, {16, SHIFT, 63}, },
			{{-1, REDUCE, 89}, {36, SHIFT, 64}, {47, SHIFT, 65}, },
			{{-1, ERROR, 106}, {2, SHIFT, 131}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 117}, {23, SHIFT, 132}, },
			{{-1, ERROR, 118}, {7, SHIFT, 133}, },
			{{-1, ERROR, 119}, {0, SHIFT, 1}, {4, SHIFT, 2}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 120}, {8, SHIFT, 107}, {9, SHIFT, 108}, {10, SHIFT, 109}, {11, SHIFT, 110}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 111}, {51, SHIFT, 112}, },
			{{-1, ERROR, 121}, {51, SHIFT, 72}, },
			{{-1, REDUCE, 100}, },
			{{-1, ERROR, 123}, {0, SHIFT, 1}, {4, SHIFT, 2}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {39, SHIFT, 137}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 138}, },
			{{-1, ERROR, 124}, {0, SHIFT, 1}, {4, SHIFT, 2}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 126}, {22, SHIFT, 145}, },
			{{-1, ERROR, 127}, {0, SHIFT, 1}, {4, SHIFT, 2}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {42, SHIFT, 82}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, REDUCE, 95}, },
			{{-1, ERROR, 129}, {0, SHIFT, 1}, {4, SHIFT, 2}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {39, SHIFT, 147}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 138}, },
			{{-1, ERROR, 130}, {0, SHIFT, 1}, {4, SHIFT, 2}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {39, SHIFT, 150}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 131}, {0, SHIFT, 1}, {4, SHIFT, 2}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 132}, {0, SHIFT, 1}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 134}, {7, SHIFT, 154}, },
			{{-1, ERROR, 135}, {23, SHIFT, 155}, },
			{{-1, REDUCE, 98}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 16}, {5, SHIFT, 156}, {18, SHIFT, 157}, {19, REDUCE, 52}, {44, REDUCE, 52}, {46, SHIFT, 158}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 140}, {39, SHIFT, 159}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 142}, {19, SHIFT, 160}, {44, SHIFT, 161}, },
			{{-1, ERROR, 143}, {39, SHIFT, 162}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 145}, {0, SHIFT, 1}, {4, SHIFT, 2}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 148}, {39, SHIFT, 164}, },
			{{-1, ERROR, 149}, {39, SHIFT, 165}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 151}, {19, SHIFT, 124}, {39, SHIFT, 166}, },
			{{-1, ERROR, 152}, {3, SHIFT, 167}, },
			{{-1, REDUCE, 6}, {5, SHIFT, 168}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 155}, {0, SHIFT, 1}, {4, SHIFT, 2}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 156}, {51, SHIFT, 171}, },
			{{-1, ERROR, 157}, {8, SHIFT, 107}, {9, SHIFT, 108}, {10, SHIFT, 109}, {11, SHIFT, 110}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 111}, {51, SHIFT, 112}, },
			{{-1, ERROR, 158}, {0, SHIFT, 1}, {4, SHIFT, 2}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 160}, {51, SHIFT, 174}, },
			{{-1, ERROR, 161}, {51, SHIFT, 176}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 163}, {43, SHIFT, 179}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 168}, {0, SHIFT, 1}, {4, SHIFT, 2}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 172}, {44, SHIFT, 181}, {46, SHIFT, 182}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 52}, {5, SHIFT, 156}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 176}, {21, SHIFT, 183}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 178}, {19, SHIFT, 184}, {44, SHIFT, 185}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 181}, {51, SHIFT, 186}, },
			{{-1, ERROR, 182}, {0, SHIFT, 1}, {4, SHIFT, 2}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 183}, {51, SHIFT, 188}, },
			{{-1, ERROR, 184}, {51, SHIFT, 176}, },
			{{-1, ERROR, 185}, {0, SHIFT, 1}, {4, SHIFT, 2}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 186}, {18, SHIFT, 191}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 59}, {44, SHIFT, 192}, },
			{{-1, ERROR, 191}, {8, SHIFT, 107}, {9, SHIFT, 108}, {10, SHIFT, 109}, {11, SHIFT, 110}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 111}, {51, SHIFT, 112}, },
			{{-1, ERROR, 192}, {0, SHIFT, 1}, {4, SHIFT, 2}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 193}, {23, SHIFT, 195}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 195}, {0, SHIFT, 1}, {4, SHIFT, 2}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 196}, {46, SHIFT, 197}, },
			{{-1, ERROR, 197}, {0, SHIFT, 1}, {4, SHIFT, 2}, {12, SHIFT, 4}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {32, SHIFT, 8}, {35, SHIFT, 9}, {38, SHIFT, 10}, {48, SHIFT, 11}, {49, SHIFT, 12}, {50, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, REDUCE, 51}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 15}, },
			{{-1, 16}, },
			{{-1, 83}, {0, 17}, {1, 36}, {10, 42}, {45, 79}, {67, 106}, {69, 118}, {82, 126}, {119, 134}, {123, 139}, {124, 144}, {129, 139}, {130, 79}, {131, 152}, {145, 163}, {155, 170}, {158, 173}, {168, 180}, {182, 187}, {185, 190}, {192, 194}, {195, 196}, {197, 198}, },
			{{-1, 18}, },
			{{-1, 169}, },
			{{-1, 19}, {132, 153}, },
			{{-1, 20}, },
			{{-1, 21}, },
			{{-1, 113}, },
			{{-1, 114}, },
			{{-1, 22}, {68, 115}, {120, 115}, {157, 115}, {191, 115}, },
			{{-1, 116}, },
			{{-1, 23}, },
			{{-1, 80}, {130, 151}, },
			{{-1, 24}, },
			{{-1, 25}, },
			{{-1, 117}, {120, 135}, {157, 172}, {191, 193}, },
			{{-1, 140}, {129, 148}, },
			{{-1, 141}, {160, 175}, },
			{{-1, 142}, },
			{{-1, 177}, {184, 189}, },
			{{-1, 178}, },
			{{-1, 143}, {129, 149}, },
			{{-1, 26}, },
			{{-1, 27}, {8, 40}, {9, 41}, {49, 88}, {50, 89}, {51, 90}, {52, 91}, {53, 92}, {54, 93}, },
			{{-1, 28}, {55, 94}, {56, 95}, },
			{{-1, 29}, {57, 96}, {58, 97}, {59, 98}, {60, 99}, {61, 100}, {62, 101}, },
			{{-1, 30}, {63, 102}, },
			{{-1, 31}, {64, 103}, {65, 104}, },
			{{-1, 32}, {66, 105}, },
			{{-1, 33}, {38, 70}, },
			{{-1, 84}, {127, 146}, },
			{{-1, 85}, },
			{{-1, 34}, },
			{{-1, 73}, {121, 136}, },
			{{-1, 74}, },
			{{-1, 35}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: if, let, 'context', 'set', 'bag', 'sequence', 'tuple', '-', not, '(', decimal integer literal, floating point literal, string literal, identifier",
			"expecting: if, let, 'set', 'bag', 'sequence', 'tuple', '-', not, '(', decimal integer literal, floating point literal, string literal, identifier",
			"expecting: identifier",
			"expecting: '=', '{', ';', '|'",
			"expecting: '{'",
			"expecting: 'set', 'bag', 'sequence', 'tuple', '-', not, '(', decimal integer literal, floating point literal, string literal, identifier",
			"expecting: 'then', 'else', 'endif', 'in', 'endContext', and, '->', ',', '/', '.', '..', '=', '>=', '>', 'implies', 'div', '<=', '<', 'max', 'min', '-', 'mod', neq, 'or', '+', ')', '}', ']', ';', '*', '|', xor, EOF",
			"expecting: 'then', 'else', 'endif', 'in', 'endContext', and, '->', ',', '/', '.', '..', '=', '>=', '>', 'implies', 'div', '<=', '<', 'max', 'min', '-', 'mod', neq, 'or', '+', '(', ')', '}', ']', ';', '*', '|', xor, EOF",
			"expecting: EOF",
			"expecting: 'then', 'else', 'endif', 'endContext', ',', '..', ')', '}', ']', ';', '|', EOF",
			"expecting: 'then', 'else', 'endif', 'in', 'endContext', and, ',', '/', '..', '=', '>=', '>', 'implies', 'div', '<=', '<', 'max', 'min', '-', 'mod', neq, 'or', '+', ')', '}', ']', ';', '*', '|', xor, EOF",
			"expecting: 'then', 'else', 'endif', 'in', 'endContext', and, ',', '..', '=', '>=', '>', 'implies', '<=', '<', '-', neq, 'or', '+', ')', '}', ']', ';', '|', xor, EOF",
			"expecting: 'then', 'else', 'endif', 'in', 'endContext', and, ',', '..', '=', '>=', '>', 'implies', '<=', '<', neq, 'or', ')', '}', ']', ';', '|', xor, EOF",
			"expecting: 'then', 'else', 'endif', 'in', 'endContext', and, ',', '..', 'implies', 'or', ')', '}', ']', ';', '|', xor, EOF",
			"expecting: 'then', 'else', 'endif', 'in', 'endContext', ',', '..', 'implies', 'or', ')', '}', ']', ';', '|', xor, EOF",
			"expecting: 'then', 'else', 'endif', 'in', 'endContext', ',', '..', 'implies', ')', '}', ']', ';', '|', EOF",
			"expecting: 'then'",
			"expecting: ':'",
			"expecting: 'in', 'set', 'bag', 'sequence', 'tuple', '-', not, '(', decimal integer literal, floating point literal, string literal, identifier",
			"expecting: '}', identifier",
			"expecting: ')'",
			"expecting: if, let, 'set', 'bag', 'sequence', 'tuple', '-', not, '(', ')', decimal integer literal, floating point literal, string literal, identifier",
			"expecting: if, let, 'set', 'bag', 'sequence', 'tuple', '-', not, '(', '}', '[', decimal integer literal, floating point literal, string literal, identifier",
			"expecting: 'boolean', 'integer', 'real', 'string', 'set', 'bag', 'sequence', 'tuple', identifier",
			"expecting: 'in', 'implies'",
			"expecting: ',', '}'",
			"expecting: '('",
			"expecting: ',', ')'",
			"expecting: 'else'",
			"expecting: '=', ';', '|'",
			"expecting: '='",
			"expecting: 'endContext'",
			"expecting: '..'",
			"expecting: if, let, 'set', 'bag', 'sequence', 'tuple', '-', not, '(', '[', decimal integer literal, floating point literal, string literal, identifier",
			"expecting: if, 'set', 'bag', 'sequence', 'tuple', '-', not, '(', decimal integer literal, floating point literal, string literal, identifier",
			"expecting: 'in', and, '->', ':', ',', '/', '.', '=', '>=', '>', 'implies', 'div', '<=', '<', 'max', 'min', '-', 'mod', neq, 'or', '+', '(', ')', ';', '*', '|', xor",
			"expecting: ',', ';'",
			"expecting: 'endif'",
			"expecting: 'then', 'else', 'endif', 'in', 'endContext', ',', '..', ')', '}', ']', ';', '|', EOF",
			"expecting: ']'",
			"expecting: ';', '|'",
			"expecting: 'in', ',', ';'",
			"expecting: '.'",
			"expecting: ')', ';'",
			"expecting: '|'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 3, 3, 4, 5, 5, 1, 6, 6, 6, 7, 8, 8, 8, 9, 9, 6, 7, 4, 6, 6, 6, 10, 10, 10, 11, 12, 13, 14, 15, 6, 6, 16, 17, 18, 19, 10, 10, 20, 2, 2, 21, 22, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 23, 1, 24, 6, 17, 25, 25, 6, 26, 7, 6, 27, 27, 6, 1, 25, 25, 25, 26, 7, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 12, 13, 13, 14, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 30, 31, 1, 23, 2, 6, 21, 1, 6, 32, 33, 6, 21, 21, 1, 34, 8, 31, 30, 25, 6, 35, 20, 20, 36, 36, 20, 27, 1, 25, 6, 20, 20, 6, 27, 37, 38, 8, 1, 2, 23, 1, 6, 2, 2, 6, 39, 6, 6, 6, 38, 1, 9, 25, 36, 40, 20, 41, 36, 42, 36, 36, 25, 9, 2, 1, 2, 2, 1, 17, 20, 36, 36, 43, 23, 1, 30, 20, 1, 44, 1, 20, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
