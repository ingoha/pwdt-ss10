<HTML>
<HEAD>
        <TITLE>Integrator Level II Training</TITLE><LINK href="training.css" type=text/css rel=stylesheet>
</HEAD>
<BODY>



<h1>
<img src="images/hie_box.gif" align="middle" hspace=7>
 Integrator - Level II Training </H1>

<h1> Module 120: Commandline tools </h1>





The following Command-specific options apply to all GUI executables:<br>
<br>
Command-specific options:<br>
-display:        Display to use<br>
-geometry:       Initial geometry for window<br>
-name:           Name to use for application<br>
-sync:           Use synchronous mode for display server<br>
<br>
Generic options for all commands:<br>
-help:          Print summary of command-line options and abort<br>


<p>
<TABLE>

<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hciaccess</B><BR>

Starts the launch pad from the command line.

<BR> Usage: hciaccess
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcialertconfig</B><BR>
Starts the alert configurator from the command line.
<BR> Usage: hcialertconfig [alert]
<BR> Examples:
<PRE>
</PRE>
</TD></TR>

<!------------ no more alertd !

<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcialertd</B><BR>
Start the alert daemon.<br>
Usage: hcialertd [-nd] [-cl ]<br>
where:<br>
-nd             = no daemon mode, operate in foreground<br>
-cl       = specify list of config files to process.<br>
            List must be white space separated.  If
            not specified, uses "default.alrt".
<br>
For normal Integrator Usage, it is better to start the alert 
daemon with hcisitectl
<BR> Examples:
<PRE>
</PRE>
</TD></TR>

--------------------------------------->

<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcialertls</B><BR>
Lists all alert configuartion files.
Usage: hcialertls [-lp]
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hciblaster</B><BR>
Runs the blaster protocol testing program.
<BR> Usage:
hciblaster [-de ] [-dd ] [-D]
       [-i ] [-r ]<br>
where:<br>

    -de <eoc-pttn>    = enable specified EO output<br>
    -dd <eoc-pttn>    = disable specified EO output<br>
    -D          = enable ALL EO output<br>
    -r  <tn>           = report every n records (default 100)<br>
    -i  <file>        = Name of input file (default messages)
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcicatcher</B><BR>
Runs the catcher protocol testing program.
<BR> Usage:

hcicatcher [-de ] [-dd ] [-D]
       [-o ] [-b] [-r ] [-t]<br>
where:<br>

-de  &lteoc-pttn>       = enable specified EO output<br>
-dd  &lteoc-pttn>       = disable specified EO output<br>
-D                      = enable ALL EO output<br>
-r   &ltn>              = report every n records (default 100)<br>
-o   &ltfile>           = Name of output file (default messages)<br>
-b                      = Store caught data in binary format<br>
-t                      = throughput mode, no saving of messages
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcicmd</B><BR>
Command line equivalent to many actions available from 
netmonitor.<br>
Usage:

hcicmd -p <process> [-t <type>] [-h host] [-c <cmd> ...] [-v] [-help]<br>

-h <host>       - engine host machine<br>
-p <process>    - engine process name<br>
-t <type>       - type of process: e (engine) or d (daemon)
                      (defaults to engine)<br>
-c <cmd>          - just execute the command<br>
-v                  - verbose<br>
-help               - show usage help message
<p>
With the engine running, hcicmd -p <process> gets you to a 
hcicmd prompt, which allows interactive communication with the 
engine processes command thread.
<p>
From the hcicmd prompt these commands , may be executed  with the 
following syntax.
<p>
Valid commands are:<br>

die            stop the engine                  :: . die
eo_alias       apply output alias               :: <conn> eo_alias
<alias>
eo_en          enable trace output              :: <conn> eo_en
<eoc_pat>
eo_dis         disable trace output             :: <conn> eo_dis
<eoc_pat>
output_cycle   Cycle engine output file         :: . output_cycle
purgex         purge translation caches         :: . purgex
pstart         start a connection               :: <conn> pstart
pstop          stop a connection                :: <conn> pstop
phold_obd      hold OB data messages            :: <conn> phold_obd
prls_obd       release OB data messages         :: <conn> prls_obd
reindex        reload Tcl auto-load indices     :: <conn> reindex
reload         reload Tcl procedure             :: <conn> reload
<procname>
resend         resend message(s)                :: <conn> resend <ib|ob>
<data|reply> <pri> <filename> <len10|nl>
save_start     start saving protocol msgs       :: <conn> save_start
{in|out} <file>
save_stop      stop saving protocol msgs        :: <conn> save_stop
{in|out}
save_cycle     cycle save message file          :: <conn> save_cycle
{in|out}
xhold_post     hold post-xlate queue            :: <xlt> xhold_post
<conn>
xrel_post      release post-xlate queue         :: <xlt> xrel_post
<conn>
<p>
All of these commands may also be executed in a non-interactive 
manner directly from the command line useing the "-c" argument 
to hcicmd.

<BR> Examples:
<PRE>
# To stop the thread name test1 in the running engine 
# process testhub:

hcicmd -p testhub -c 'test1 pstop'

# To resend an outbound data message to the same thread in 
# the same process,as in the previous example, where the 
# data message is named /tmp/resend_test1, priority is 
# 5120(the default), and the file is newline termiated:

hcicmd -p testhub -c 'test1 resend ob data 5120 /tmp/resend nl'
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hciconndisplay</B><BR>

This command actually starts the metrics GUI for either the group,
process or thread (conn).

<BR> Usage:  hciconndisplay [-G group | -P process] [-C conn[,conn...]] 
    [-i interval]
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hciconndump</B><BR>

Displays information from the netconfig file on threads and processes
from within the site.

<BR> Usage:       hciconndump [-v] {-p <process> | <conn_name...>}

where:
-v              = verbose dump
-p process      = dump all connections in indicated process
               OR
conn_name...    = name(s) of connection(s) to dump
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hciconnstatus</B><BR>

Provides operational status of process and threads from 
the command line.

<BR> Usage:      hciconnstatus [{-p process | -c connection}]
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcidbadmin</B><BR>

Starts the dbadmin GUI tool from the command line.

<BR> Usage:    hcidbadmin
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcidbdump</B><BR>

Command line equivelant of the dbadmin tool.

<BR> Usage:    hcidbdump [-U userid] [-v] -B [tarfile]
      or
      hcidbdump {-r|-e} [-U userid] [-l] [-L] [-v] [-D] 
                [-f source_system][-o owner_system] 
                [-d dest_system] [-t type] [-s state] 
                [-S time] [-E time] [-M map] [-O time] 
                [-b] [-a] [-F] [-m mid] [Output_file]

    All specified constraints are ANDed together

where:
tarfile         =       Name of file in which to write database backup
                    If not given, tar is written to $DBFPATH/cldb.tar

output_file     =       Name of file in which to write messages
                    If not given, message data is written to stdout

-B              =       Perform database backup
-U userid       =       User ID to use for database 
                    access
-M map          =       Apply map using msgmapdata 
                    command to each message
-r              =       Save message from recovery 
                    database
-e              =       Save messages from error 
                    database
-c              =       Display context from error
                    database
-a              =       append data to output file
-b              =       dump in binary (length-encoded) 
                    format
-D              =       delete messages after processing
-l              =       Long form output (ignored when 
                    Output_file given)
-L              =       Ultra Long form output (overrides -l)
-O time         =       Order by ascending date
                         i = inbound arrival time
                         o = outbound time
                         r = recovery time
                         x = xlate start time
-v              =       verbose operation

-d dest         =       select messages with specified 
                    destination
-f source       =       select messages with specified source
-o owner        =       select messages with specified owner
-s state        =       select messages with specified state
-S time         =       select messages at or after specified 
                    date/time
-E time         =       select messages at or before specified 
                    date/time
-t type         =       select messages with specified type
                         D = Data
                         R = Reply
                         U = Unknown
-m mid          =       select message with specified mid(s)
                         x.y.z         = only this message
                         x.y.z1:x.y.z2 = x.y messages z1 through z2
                         -m overrides all other restrictions
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcidbinit</B><BR>
Reinitializes the various Integrator data bases.
<BR> Usage:          hcidbinit [-A] [-r] [-e] [-i] [-C] [-f]

Where:
-A              =       initialize ALL databases
-r              =       initialize the recovery 
                    database
-e              =       initialize the error database
-i              =       initialize the ICL registry
                     database
-C              =       clean control files
-f              =       force execution, skip query

If all of the databases are initialized with the 
-A flag, use the -C argument as well.
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcidbsetvers</B><BR>

<BR> Usage:  hcidbsetvers [-O] [-f] [-q] [-u userid] [-v]
Where:
-O              =       One User database access
                    (dangerous)
                    This skips the use of the 
                    lockmgr 
-f              =       force action - skip user 
                    query
-q              =       Query version only, no 
                    update
-u userid       =       DB user id to use
-v              =       verbose operation
<BR> Examples:
<PRE>
</PRE>
</TD></TR>




<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcidoc</B><BR>

This is the command to start the on-line docs 
from the command line.

<BR> Usage:   hcidoc
<BR> Examples:
<PRE>
</PRE>
</TD></TR>

<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcidptcl</B><BR>

dptcl interactive shell

<BR> Usage:   hcidptcl
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcidriverconfig</B><BR>
Blaster and Catcher GUI configurator
<BR> Usage: hcidriverconfig
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hciedifactconfig</B><BR>

<BR> Usage:  hciedifactconfig [edifact_config_file]

Starts the Edifact configurator from the command 
line. Theedifact_config_file argument forces a the 
tool to start with that file pre-loaded.
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcienginerun</B><BR>
Start an engine process, and with the -s argument 
threads that are not autostart.

<BR> Usage: hcienginerun -p <process> 
   [-s <thread>[,<thread>...]] -- <allElse>

To start an engine process with full debug output from the
command line:

hcienginerun -p <engine_process_name> -- -D 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>

<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcienginestop </B><BR>
Stop an engine process. 

<BR> Usage: hcienginestop -p <process> 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>

<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcieoconfig </B><BR>
Start the EO Aliase Configurator GUI from the command line. 
The eo_alias argument to hcieoconfig starts the tool with that eo_alias
pre-loaded. 

<BR> Usage: hcieoconfig [eo_alias] 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>

<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcieols </B><BR>
List all eo aliases. 

<BR> Usage: hcieols 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>

<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcifm </B><BR>
Starts the Integrator file manager from the command line. 

<BR> Usage: hcifm 

<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcifrlconfig </B><BR>
Starts the FRL configurator from the command line. 
The frl_configurationargument to hcifrlconfig starts the tool with that
file pre-loaded. 

<BR> Usage: hcifrlconfig [frl_configruation] 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>

<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcifrlconvert </B><BR>
Seems to be used for converting the format of flat record configuration
file between versions.

<BR> Usage: hcifrlconvert [filename] 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>

<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcifrlls </B><BR>
Lists the frl configuration files in a site. 

<BR> Usage: hcifrlls 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>

<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcifrltest </B><BR>
Used to test a flat record configuration against actual data. 

<BR> Usage: hcifrltest [-a] [-d n] [-f format] frl [file] 
        -a = process all records in file 
        -d n = show data at detail level 'n' 
        -f format = file format specifier 
        frl = name of FRL to test 
        file = data file to test with format values: 
                len10 = 10-byte length encoded 
                nl = newline-terminated (default) 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcifsmgen </B><BR>
Creates compiled version of HL7 message, possible segment. 

<BR> Usage: hcifsmgen [-H version] [-v variant] msgId [...] 
        version = HL7 encoding version (defaults to 2.1) 
        variant = name of site-specific variant definition 
        msgId = name of message to compile (e.g., ADT_A01) 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hciguidoc </B><BR>
Starts the on-line documentaion from the command line. Seems to do the
same thing as hcidoc.

<BR> Usage: hciguidoc 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hciguimsg </B><BR>
Displays a user defined message to the X display. 

<BR> Usage: hciguimsg Syntax: hciguimsg [-input |-message ] [-title ]
[-error|-alert|-fg -bg ] [-font ] [-label ] [-width ] [-height ] [-bell
repeatInterval]

For example, to display the message "hello there" to the X display
namedtesthub in a red box: 
        hciguimsg -message "hello there" -error -display testhub:0.0 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hciguiprocedit </B><BR>
Starts the the Custom Proc Editor GUI from the command line. 

<BR> Usage: hciguiprocedit 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hciguisitectl </B><BR>
Starts the GUI interface to hcisitectl, providing control for the
Integrator daemons lockmanager, status daemon, and alert daemon

<BR> Usage: hciguisitectl 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hciguismat </B><BR>
Starts the SMAT GUI tool from the command line 

<BR> Usage: hciguismat 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcihd </B><BR>
Outputs a hex dump of file. Suggestion: pipe output to less 

<BR> Usage: hcihd [file] 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcihl7config </B><BR>
Starts the HL7 configurator GUI from the command line. 

<BR> Usage: hcihl7config 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcihl7convert </B><BR>
Used in upgrades from one major release to another. Specifically from
v3.0.x Integrator to v3.1.x Integrator.

It updates hl7 configuration files format. Remember to remove *.fsm file
if any exist in the new root.

<BR> Usage: hcihl7convert 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcihl7test </B><BR>
Used to test user defined HL7 configuration against actual data. 

<BR> Usage: hcihl7test [-a] [-d n] [-f format] [-V version] [-v variant] file 
        -a = process all records in file 
        -d n = show data at detail level 'n' 
        -f format = file format specifier 
        -V version = HL7 version (defaults to 2.1) 
        -v variant = HL7 variant (defaults to '') 
        file = data file to test with format values: 
                len10 = 10-byte length encoded 
                nl = newline-terminated (default) 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcilen10dump </B><BR>
Displays length encoded messages in a file. 

<BR> Usage: hcilen10dump [-h] filename(s) 
        -h enables hex dump of messaget 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcilicset </B><BR>
Tool used to enter a machine's license key. 

<BR> Usage: hcilicset 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcimsiutil </B><BR>
Displays from the command line the same approximately the information as
requesting a thread's status from netmonitor.

<BR> Usage: hcimsiutil [-D] [-dh] [-dt] [-da] [-dd thread] [-pd] [-R] [-ur]
[-ut thread] [-Z] [-zt thread]

Where: 
        -D = Enable debug output 
        -dh = Dump region header 
        -dt = Dump region Table of Contents 
        -da = Dump all (region header and TOC) 
        -dd <thread> = Dump data section for thread 
        -pd <proc> = Mark all threads in process as dead 
        -R = Remove the region 
        -ur = Unlock the region control semaphore 
        -ut <thread> = Unlock thread section semaphore 
        -Z = Zero ALL thread section data 
        -zt &ltthread > = Zero thread section data 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcinetcheck </B><BR>
Checks the NetConfig file for configuration errors 

<BR> Usage: hcinetcheck [Netconfig] 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcinetconfig </B><BR>
Starts the netconfig GUI from the command line. 

<BR> Usage: hcinetconfig [NetConfig] 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcinetconvert </B><BR>
Used when upgrading from one major release to another where the format
of the NetConfig configuraion file has changed.

<BR> Usage: hcinetconvert 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcinetdiff </B><BR>

<BR> Usage: hcinetdiff baseNetConfig 
        baseNetConfig = NetConfig file to compare current site against 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcinetmonitor </B><BR>
Starts netmonitor from the command line. 

<BR> Usage: hcinetmonitor 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcipdc </B><BR>
Compiles pdl scripts. 

<BR> Usage: hcipdc [options] file... 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hciprocedit </B><BR>
Assists in creating TCL scripts for use within the engine, by starting
an editing session with a template of the type UPOC specified by the

-create argument. The default editor is vi however this may be
overridden by setting the EDITOR enviorment variable to the editor or
choice.

<BR> Usage: hciprocedit [-xterm] [-create <type>] proc 
               hciprocedit [-xterm] [-create <type>] file 
Where: 
        -xterm - start an Xterm to run the editor within useful when
calling this script from an external GUI

        -create type - specify the type of the new script file. Valid
types are: 
                routetest - hciroutetest 
                end proc tps - TPS module 
                tpstest - hcitpstest 
                end proc trxid - TRXID determination proc 
                xltp - xlate proc (called from within an xlate code
fragment) 
        proc - name of a proc 
        file - basename of file to edit (must include .tcl extension) 

Command line executable to edit and create Integrator TCL procs for
various contexts within the engine such as TPS and Xlate.
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hciprocstatus </B><BR>

<BR> Usage: hciprocstatus [-p process] [-e] 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcirootcopy </B><BR>

<BR> Usage: hcirootcopy [-f] [-n] [-v] sourceRoot 
where: 
        -f = don't query 
        -n = test only 
        -v = verbose 
        sourceRoot = source root directory 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hciroutetest </B><BR>
Used to test interfaces. This test simulates closely what would happen
in the engine if a message were recieved by an inbound thread.

The indicated message is passed to the inbound thread and it run through
all of the UPOCs, trxid determination, translations as if it had
acutally

been processed through the engine. 

<BR> Usage: hciroutetest [-a] [-d] [-e "proc args"] [-f format] [-r thread]
[-s savebase] thread file 
Where: 
       -a = process all records in file 
        -d = process as DATA messages 
        -e "proc args" = end processing config 
        -f format = file format specifier 
        -r thread = process as REPLY to thread 
        -s savebase = save file base name 
        thread = source thread to simulate 
        file = data file to test with format values: 
                len10 = 10-byte length encoded 
                nl = newline-terminated (default) 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hciscriptedit </B><BR>
Basically the same tool as hciprocedit 

<BR> Usage: hciscriptedit [-gui] [-t <type>] script-file 
Where: 
        -gui - start an Xterm to run the editor within (not exactly a
GUI if you ask me...) 
        -t type - specify the type of the new script file. Valid types
are: 
                tps - TPS module 
                trxid - TRXID determination proc 
                xltp - xlate proc (called from withing an xlate code
fragment) 
        script-file - basename of file to edit (.tcl will be added if
it's not present) 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcisetenv </B><BR>
Makes changes to the users environment neccessary to run Integrator. 
This is the command that is run when a user executes the setroot or
setsite commands. 

<BR> Usage: /hci/bin/hcisetenv -root <lang> [rootdir [site]] 
              /hci/bin/hcisetenv -root <lang> -clear 

         or /hci/bin/hcisetenv -site <lang> site 
              /hci/bin/hcisetenv -site <lang> -clear 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcisitearchive </B><BR>
Seems to create a backup of all sites within the current root. 

<BR> Usage: hcisitearchive 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>
hcisiteconvert 
Probably called from within hcirootcopy or hcisitecopy. 

<BR> Usage: hcisiteconvert source-sitedir [log] 
where: 
        source-sitedir = source site directory 
        log = logfile (defaults to siteconvert.log) 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcisitecopy </B><BR>
Used only during the process of upgrading from one Integrator release
to the another. 
It is not used to copy one site to another within the same root. Use tar
instead. Again do not use it for moving a test site. into production.

<BR> Usage: hcisitecopy [-f] [-i file] [-n] [-v] 
where: 
        -f = force (even if file check fails) 
        -i file = input file (defaults to <site.hsc) 
        -n = do not perform copies 
        -v = verbose 

This command should be run from where the .hsc file resides that was
created when hcisitecopyprep was run.

It will not find the .hsc file if it is not run from the directory where
the .hsc file resides. 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcisitecopyprep </B><BR>
Used during the upgrade process. 
Creates a file that hcisitecopy uses for determining what-time and other
files the user wants to copy from a site in an old root to a site in a
new

Integrator root, during the cut-over from an old Integrator root to
the new one. 
It creates a file the ends with the extension .hsc in the local
directory from where itwas executed.

<BR> Usage: hcisitecopyprep [-f] [-o file] 
where: 
        -f = do not prompt for confirmation 
        -o file = output file to create (defaults to <site>.hsc) 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcisitectl </B><BR>
Controls the Integrator site deamons from the command line. 

<BR> Usage: hcisitectl [{ -K | -k <what>}] [{ -R| -r <what>}] [{ -S | -s
<what>}] 
Where: 
        -K = Kill ALL daemon processes 
        -k <what> = Kill specified daemons, what is comma separated list
<what>: 
                l = lockmgr 
                s = hcistatusd 
                a = hcialertd 
        -R = Refresh ALL daemon processes 
        -r <what> = Refresh specified daemons, what is comma separated
list <what>: 
                l = lockmgr 
                s = hcistatusd 
                a = hcialertd 
        -S = Start ALL daemon processes 
        -s <what> = Start specified daemons, what is comma separated
list <what>: 
                l = lockmgr 
                s = hcistatusd 
                a = hcialertd 
        -A <args> = specify startup args for daemons, args is a comma
separated list. Each entry is of the form:<what>=<args>

        where 
                what is l, s, or a (as above) and <args> are the
arguments to pass to that daemon. 

If no options are specified, the status of the daemons is verified and
reported. 
Do not kill the lockmanager without first enshuring that there are no
running engine processes in the site.

Starting the deamons with the "-S" argument starts all of the site
deamons including the alert daemon with the alert configuratioin file
"default.alrt".

If a specific alert configuration needs to be run use the syntax in the
following example. 
To start the alert daemon using the alert configruation file named
"foo.alrt": hcisitectl -s a -A "a=-cl 'foo.alrt'"
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcisiteinit </B><BR>
Creates a new Integrator site. 

<BR> Usage: hcisiteinit [-s] newsite 
Where: 
        -s = Start daemon processes after site creation 
        newsite = Name of new site to create, must not currently exist 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcisiterestore </B><BR>

<BR> Usage: hcisiterestor 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcismat </B><BR>
Starts SMAT GUi tool from the command line. Same thing as hciguismat. 

<BR> Usage: hcismat 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcisn </B><BR>

<BR> Usage: hcisn 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcistatusd </B><BR>
Starts the status daemon if it is not already running. 
The status deamon should generally be started from the command line with
hcisitectl 

<BR> Usage: hcistatusd 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcisysmon </B><BR>
Starts the Integrator system monitor from the command line. 

<BR> Usage: hcisysmon 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcitblconfig </B><BR>
Starts the table configurator GI tool from the command line. 

<BR> Usage: hcitblconfig [filename] 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcitblconvert </B><BR>

<BR> Usage: hcitblconvert 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcitblls </B><BR>
Lists all table lookup configuration files in the site 

<BR> Usage: hcitblls 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcitcl </B><BR>
Starts the hci version of the tcl interactive shell. A good tool for
checking tcl command syntax.

<BR> Usage: hcitcl 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcitcptest </B><BR>
Nifty tool for debuggin tcp/ip interfaces. 
Can be configured as a serveror as a client by specifying a hostname
with the "-h" argument.

<BR> Usage: hcitcptest [-h hostname] [-f file] -t tcp_encoding_type -p port 
Where: -h = an optional hostname to connect to If -h is not specified,
hcitcptest will work as a server, listening on the port specified by the
-p option -f = an optional filename. All data recieved from the host
will be written to this file. (Including any encoding characters) -t =
tcp_encoding_type one of: 2 2 byte length encoding 2e 2 byte length
encoding (exclusive of encoding) 4 4 byte length encoding 4e 4 byte
length encoding (exclusive of encoding) orsos ORSOS 2 byte length
encoding mlp HL7 MLP encoding raw Data is sent "as-is" -p = port to
listen on or connect to 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>

<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcitester</B><BR>
 Starts the Integrator test GUI. <BR> Usage: hcitester  
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcitimegraph</B><BR>
 <BR> Usage: It appears that this command only works when called
by hcisysmon.  
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcitpstest </B><BR>
Tests the operation of user created TCL scripts in various
contexts. <BR> Usage: hcitpstest [-a] [-c caller] [-e "proc args"] [-f
format] [-r runmode] [-S] [-s savebase] file ["proc1 args1" ...] -a =
process all records in file -c caller = caller context name -e "proc
args" = end processing config -f format = file format specifier -r
runmode = run mode (start or run) -S = run message-less Startup -s
savebase = save file base name file = data file to test with "proc args"
= TPS module proc and args<[> caller values: ack_control proto_startup
reply_gen send_data_ok send_data_fail send_reply_ok send_reply_fail
sms_fwd_data sms_ib_data sms_ob_data sms_fwd_reply sms_ib_reply
sms_ob_reply xlt_gen xlt_post xlt_pre xlt_raw format values: len10 =
10-byte length encoded nl = newline-terminated (default)  
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hciverify </B><BR>
Performs a system sanity check. <BR> Usage: verify [-F] [-R] [-W]
[-c] [-hl7] [-p] [-r &ltdir>] [-s &ltsite>] [-u &ltuser>][-v] [-w] [-x]
where: -F = fix file permissions and ownerships -R = Don't verify system
default root -W = suppress warnings -c = Verify for training class
environment -hl7 = verify only HL7 configurartions -p = verify that
expected processes are running ok -r &ltdir> = verify root dir 'dir' as
well as default -s &ltsite> = verify specified site within root -u
&ltuser > = also verify -v = verbose operation -w = make warnings fatal
-x = perform intensive xlate testing. NOTE: You must have 'setroot' into
the root an site you wish to verify for this option to work. hciverify
can only be run as the root user. If it returns error about files that
have an incorrect mode, rerun the command with the "-F" option. The
phrase incorrect mode refers to file permissions.  
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hciwatch</B><BR>
 Redirects stdout from commmand to hciguimsg, causing stdput to
appear in a red alert box. <BR> Usage: hciwatch [-runbg] [ ...] For example:
hciwatch hcisitectl  
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hciwish</B><BR>
 Starts hci version of the tk interactive shell "wish". <BR> Usage:
hciwish  
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcix12config </B><BR>
Starts the X12 Configurator GUI. <BR> Usage: hcix12test [-a] [-d
n] [-f format] [-V version] [-v variant] [-t test] file -a = process all
records in file -d n = show data at detail level 'n' -f format = file
format specifier -V version = X12 version (defaults to 3.5.0) -v variant
= X12 variant (defaults to '') -t test = pick which test to run file =
data file to test with format values: len10 = 10-byte length encoded nl
= newline-terminated (default) test values: numbers = test Nn number
conversions parse = test parse an X12 message (default)  
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcixlatenotify </B><BR>
<BR> Usage: hcixlatenotify cmd [thread[,thread...]] Where :
cmd = command to send to xlate thread (via hcicmd) threads = comma
separated list of threads to use  
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcixltconfig</B><BR>
 Starts the Translation Configurator from the command
line.,P. <BR> Usage: hcixltconfig [filename]  
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcixltconvert</B><BR>
 Converts the format of translation configuration files
from an older version of the Integrator to a newer one. <BR> Usage:
hcixlteconvert  
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcixltls</B><BR>
 Lists all of the translation configuration files in a site.
<BR> Usage: hcixltls  
<BR> Examples:
<PRE>
</PRE>
</TD></TR>


<TR><TD valign="top"  bgcolor=#DDDDDD>
**</TD><TD><B>hcixlttest</B><BR>
 Tests a translation configuration against an acutal data
message. <BR> Usage: hcixlttest [-a] [-d n] [-f format] [-F format] xlt
[infile] [outfile] -a = process all records in file -d n = show data at
detail level 'n' -f format = input file format specifier -F format =
output file format specifier xlt = name of XLT to test infile = data
file to test with outfile = len10 file for raw CONT msgs format values:
len10 = 10-byte length encoded nl = newline-terminated 
<BR> Examples:
<PRE>
</PRE>
</TD></TR>

</TABLE>


<h2> automatische taken <em>cron</em> </h2>

<p>
Copyright 1998 HIE Europe
</BODY>
</HTML>
