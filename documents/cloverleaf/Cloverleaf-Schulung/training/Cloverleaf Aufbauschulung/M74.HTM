<HTML>
<HEAD>
        <TITLE>Integrator Level II Training</TITLE><LINK href="training.css" type=text/css rel=stylesheet>
</HEAD>
<BODY>


<h1>
<img src="images/hie_box.gif" align="middle" hspace=7> 
 Integrator - Level II Training </H1>

<h1> Module 74: Routing Messages </h1>




The routing of messages can be achieved (or: manipulated)
in multiple ways. These include, ordered according to increasing complexity:
<UL>
<LI><b>Static routing</b>; <br>
    Static routing does not depend on the contents of a message. All messages, irrespective
    of their type (a.k.a. transaction Id, trxId), will be routed from a source system to 
    one or more destination systems.
<LI><b>Standard TrxId determination</b>; <br>
    Routing based on message type can be achieved by using the standard TrxId determination 
    features of the engine and a route detail specification for inbound messages.
<LI><b>TPS Message Filters</b>; <br>
    The delivery of messages, and indirectly their routing, can be influenced by
    using filtering TPS procedures in the IB-TPS or the OB-TPS. Messages that don't meet
    certain criteria can be KILLed. These messages won't be processed by the engine
    (when KILLed in the IB-TPS)
    or delivered to their intended destination (when KILLed in other UPoCs).
<LI><b>Non standard TrxId determination</b>; <br>
    Routing based on the contents of a message (i.e. based on multiple or conditional fields)
    can be achieved by
    <UL>
    <LI>Using a TrxId determination procedure;
    <LI>Changing the message type field within the message itself 
        (using grmstore in the IB-protocol TPS).
    </UL>
    Routing based on this (altered) TrxId is then achieved by using the standard TrxId determination 
    features of the engine and a route detail specification for inbound messages. 
<LI><b>Changing the DESTCONN metadata</b>; <br>
    The DESTCONN metadata field contains one or more threadnames the message is to be routed to.
    This field contains valid data when the message is processed by the Xlate thread. 
    Its value can be changed by: 
    <UL>
    <LI> Using xpmmetaset within a Xlate CALL procedure;
    <LI> Using msgmetaset within the Route detail Pre-Proc,
         the Route detail Post Proc or the Raw Proc of the Xlate thread. 
         Msgmetaset can also be used in the IB-Reply TPS to change the 
         default route of a reply message.<BR>
         The message will be placed directly in the protocol queue of the destination
         thread when the SEND disposition is used. After processing all route details
         the messages will be forwarded to the appropriate post-translation queue.
    </UL>
    'Value based routing' can be achieved by changing the value of the DESTCONN metadata field.
    Suppose the standard routing of a message (using a single route detail) is to
    threads A, B and C. Depending on one or more values within the message, one or more
    routes can be removed from the DESTCONN field.
<LI><b>Generate routing</b>; <br>
    Generate routing is the most flexible way to dynamically determine the routing 
    and translation of messages. <em>This feature hasn't been used in any European implementation since 1996, you are referred to the product documentation for details. </em>
</UL>

<!--------------- never used --------
<p>

<h2> GENERATE Routes </h2>

The routing of messages is performed by the translation thread, which suports three 
types of <em>Route Detail Types</em>: Raw, Xlate and Generate.
<p>
The routing of a message can be dynamically determined with the aid of the 
Generate Routes UPoC in the Xlate thread. Determining a routing involves on 
the one hand setting the destination(s) the message will be sent to, and on the
other hand specifying what translation (Xlate, Raw) the message will have to undergo.
This UPoC is often used to <em>remove</em> one or more routing definitions
from the standard list of route detail definitions (as defined in the routing GUI).
<P>
A routing definition is a list of keyed lists, where each keyed list
contains the definition of a single route detail. 
The presence of keys in the keyed list depends on the type of route detail used.
The following keys may occur:
<UL>
<LI><b>PROCS</b> (generate and raw route-details) <BR>
   TPS-stack related data. This keyed list contains information regarding 
   a TPS stack: the procedures within the TPS stack as well as their parameters.
   The PROCS keyed list contains a keyed list with 2 keys:
   <UL>
   <LI><b>PROCS</b> <BR>
   This field contains a list of procedure names, listed in the order in which they
   process a message.
   <LI><b>ARGS</b> <BR>
   This field contains a list of procedure arguments, where the <em>n</em>th item
   in the ARGS list is used as an argument when executing the <em>n</em>th procedure
   in the PROCS list. 
   </UL>
   Example: PROCS { {PROCS {proc1 proc2} } {ARGS {arg1 {arg21 arg22} } }
<LI><b>DEST</b> (raw and xlate route details) <BR>
Destination related data. 
This list contains the names of the threads where the message is to be routed to.
<BR>Example: DEST {thread0 thread1}
<LI><b>XLATE</b> (xlate route detail) <BR>
Translation specification. This field contains the name of the translation specification
(.xlt) that is to be used.
<BR>Example: XLATE a_translation_spec.xlt
<LI><b>PREPROCS</b> (xlate route detail) <BR>
TPS-Stack related data. See PROCS for a description of this keyed list.
<LI><b>POSTPROCS</b> (xlate route detail) <BR>
TPS-Stack related data. See PROCS for a description of this keyed list.
</UL>
Example: The following is the routing definition of messages that are routed using
a raw route detail to the threads "conn_0 and conn_1" and which are also routed
using an xlate route detail to "conn_1".

<PRE>{ {{TYPE raw} 
   {DEST {conn_0 conn_3}}
   {PROCS { {PROCS proc1} 
            {ARGS arg1} }  } 
  }
  {{TYPE xlate} 
   {DEST {conn_1}} 
   {XLATE a_translation.xlt }
   {PREPROCS { {PROCS {proc1 proc2} } 
               {ARGS {arg1 {arg21 {} } }   } } 
   {POSTPROCS { {PROCS {} } 
               {ARGS {} }   } } 
  }
}
</PRE>
<p>
Although the generation of route detail specifications is by far the most flexible way
of dynamically determining the translation and routing of messages, the generation
process can be quite complicated. If you decide to generate route details, test them 
extensively using the Route option in the testing tool.

<P>
Two functions are currently able to manipulate routing information within the generate routes UPoC. 
Use the <em>info command msgrout*</em> command in the hcitcl interpreter to get a full list of 
available routing procedures. The following procedures are available in version 3.3.0P:
<BR>
hcitcl>info command msgrout*<BR>
msgrouteget msgrouteset
<p>

<TABLE>
<TR><TD bgcolor=#999999 valign="top">
*- </TD><TD><b> msgrouteget msgId </b><BR>
   Purpose: This function returns the current routing definition associated with a message.<BR>
   Notes: This function can be used in the generate route UPoC only.
          Routes are mostly changed (generated) by first using msgrouteget, 
          updating the route detail list or removing routes from the list, 
          and finally storing the definition using msgrouteset.<BR>
   Examples:

<PRE>>msgrouteget $mh
{ {TYPE raw} 
  {DEST lab}
  {PROCS { {PROCS proc1} 
           {ARGS arg1} }  } 
}
</PRE>
</TD></TR>

<TR><TD bgcolor=#999999 valign="top">
*- </TD><TD><b>msgrouteset msgId list </b><BR>
   Purpose: This function changes the routing definition associated with a message.
            If the route detail list does not have a correct format, the message
            will be stored in the error database.<BR>
   Notes: This function can be used in the generate route UPoC only.
          Routes are mostly changed (generated) by first using msgrouteget, 
          updating the route detail list or removing routes from the list, 
          and finally storing the definition using msgrouteset.<BR>
   Examples:

<PRE>>keylset myroute TYPE raw PROCS.PROCS {} PROCS.ARGS {} DEST lab
>msgrouteset $mh $myroute
</PRE>
</TD></TR>
</TABLE>



Generate Procs may continue messages using any disposition.
Messages that are CONTINUEd have to have a valid routing definition.
The message will retain its original routing definition if 
msgrouteset is not used in the generate procedure.

---------------------------------------------------->

<p>
<h3> Routes - Testing Tool </h3>

The routing definitions can be tested with the aid of the Routes option of the testing tool.
If the routing is changed by one or more Tcl procedures, you are advised to thoroughly
test them using the testing tool.


<h2> Forwarding </h2>

Message forwarding can be
controlled dynamically (versions 3.5 and up). Forwarding can be
controlled by specifying what conditions start and stop message forwarding.
<p>
When forwarding is enabled, the messages are moved one by one from the outbound queue
of the original thread and placed on the outbound queue of the forwarded thread.
The message's <em>is_forwarded</em> FLAG is set and the message is run through
the forwarded thread's Outbound TPS if there is one.
<p>
The forwarding of messages that were forwarded (chained forwarding) should be kept
to an absolute minumum. 
<p>
hcicmd contains four message forwarding commands, which can be called from
alerts, the shell, or hcinetmonitor:
<UL>
<LI><b>hcicmd -p &lt;process> '&lt;thread> fwd_start'</b><br>
      Start forwarding data messages to the thread specified by the
     'forwardthread' network configuration entry.
<LI><b>hcicmd -p &lt;process> '&lt;thread> fwd_stop' </b><br>
      Stop forwarding data messages.
<LI><b>hcicmd -p &lt;process> '&lt;thread> fwdr_start' </b><br>
      Start forwarding reply messages to the thread specied by the
     'forwardthread' network configuration entry.
<LI><b>hcicmd -p &lt;process> '&lt;thread> fwdr_stop'</b><br>
      Stop forwarding reply messages.
</UL>
See <a href="m105.htm">Module 105: THREADCTL extensions</a> for information related to Tcl extensions that allow
for the starting/stopping of message forwarding.

<p>
Copyright 1998,2002 Health-Comm GmbH [15]
</BODY>
</HTML>
