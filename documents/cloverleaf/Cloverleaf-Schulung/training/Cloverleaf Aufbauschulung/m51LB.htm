<HTML>
<HEAD>
        <TITLE>Integrator Level II Training</TITLE><LINK href="training.css" type=text/css rel=stylesheet>
</HEAD>
<BODY>



<h1>
<img src="images/hie_box.gif" align="middle" hspace=7>
 Integrator - Level II Training </H1>

<h1> Module 51: Lab: IB-TPS/OB-TPS Tcl Procedures (F) </h1>





Hints when testing TPS procedures using the testing tool:
<BR>If the TPS initializes variables in its 'start' mode, please don't forget to 
use this mode in the testing tool.
<BR>
After having been processed by one or more Tcl procedures in a TPS Stack,
the message normally is handed iover to the engine for further processing.
When testing TPS Stack in the testing tool you have to either write te resulting messages
to a file or you have to specify a <b>TPS Endproc</b>.

A procedure of this type can be created using the Custom Scripts editor:
the message content is echoed to the screen and the message object is destroyed.<BR>
See the <em>gc_endprocTPSshowMsg</em> procedure in gen_debug_procs.tcl for an example.

<p>
<b>1.</b> Priority adjustment<BR>
Create an IB TPS Proc with the following functionality: <BR>
Create a GRM object associated with the message grammar FRL deal_oe.frl
(use your own site-dependent FRL name) and associate 
the GRM with a message content.
Fetch the value of the currency codes stores in the 
DealDetails.[1] and DealDetails.[3] fields. 
Change the priority (a metadata field) of the message to 6000 
if the value of one of the fields equals 1 (a Dollar transaction).
Destroy any datum and GRM objects that were created, and forward the mesage using 
a CONTINUE disposition.<BR>
Test the procedure with the aid of the testing tool and the file
 /tmp/class/deal_oe.dat. Use the 'save to file' option
using file base /tmp/std#51. (# being your student number).
Check the output files generated by the testing tool.<BR>

<p>
<b>2.</b> Filter Procedures<br>
<b>2.1</b> IB Filter <BR>
Create an IB TPS Proc <em>filterDealStatus</em> with the following functionality: <BR>
Create a GRM object associated with the message grammar deal_oe.frl and parse the message content.
Fetch the value of the Deal Status Flag field. 
Use a CONTINUE disposition if the value of this field is equal to "V" (Validated), 
KILL the message otherwise.
Destroy any datum and GRM objects that were created.
<BR>
Test the procedure with the aid of the testing tool and the file
/tmp/class/deal_oe.dat. Use the TPS-endproc <em>gc_endprocTPSshowMsg</em> for
TPS end processing.

<BR>
<b>2.2</b> OB Filter <BR>
Create an OB TPS Proc <em>filterOB_4006</em> with the following functionality: <BR>
If the value of the User Number field equals "4006", KILL the message. Otherwise,
use the CONTINUE disposition. These messages have to be killed because they
are automaitcally generated and do not constituta a real deal.
<BR>
Test the procedure with the aid of the testing tool and the file
/tmp/class/deal_ms.dat. Use the TPS-endproc <em>gc_endprocTPSshowMsg</em> for
TPS end processing. <BR>
<b>2.2</b> (theory) <BR>
Note that using a filter in the IB TPS prevents the translation of the message,
resulting in one ore more messages not being delivered, whereas a filter
applied in an OB-TPS prevents one message from being deliverd.
<br>

<p>
<b>3.</b> Splitting or Cloning procedure <BR>
Create an IB TPS Proc <em>splitMessageInHalves</em> with the following functionality: <BR>
If the length of the message is larger than 10 characters, split the contents in half and
forward both halves as separate messages into the engine. Note that you have to create one
new message object (using either <b>msgcopy</b> or <b>msgcreate</b>) 
to accompish this and that both messages need to be separately referred to in the
disposition list.
<BR>
Test the procedure with the aid of the testing tool and one of the data files.
Use the TPS-endproc <em>gc_endprocTPSshowMsg</em> for
TPS end processing. <BR>

<p>
Copyright 1998 HIE Europe [30(1/2)]
</BODY>
</HTML>
