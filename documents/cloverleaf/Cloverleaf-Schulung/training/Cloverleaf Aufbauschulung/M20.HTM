<HTML>
<HEAD>
        <TITLE>Integrator Level II Training</TITLE><LINK href="training.css" type=text/css rel=stylesheet>
</HEAD>
<BODY>



<h1>
<img src="images/hie_box.gif" align="middle" hspace=7> 
 Integrator - Level II Training </H1>

<h1> Module 20: Msg Tcl extensions </h1>





<h2> The Message Object </h2>

The basic object processed by the Integrator is the <em>message</em>. 
The message object contains the 'content' of the message as well as its
<em> metadata </em>.
The metadata associated with a message object reflects its current state
and/or determines the way the message is routed and/or translated.
<p>
<center><img src="images/message.gif"><BR>&nbsp; <BR>
<em><b>Fig. 20.1 Message and message handle</b></em></center>
<p>
The Integrator message extensions to Tcl allow the manipulation of message objects. 
The content of a message can have a maximum size of 4 Gb. (i.e. 32 bits).

<p>


<h2> Message Tcl Extensions </h2>

<P>
A large number of functions can be used to manipulate message objects. 
Use the <em>info command msg*</em> command in the hcitcl interpreter to get a full list of available
message procedures. The following procedures are available in version 3.8.1P:

<P>
hcitcl>info command msg* <BR>
msgappend msgappread msgcopy msgcreate 
msgdestroy msgdump msgerror msgfindchar msgfinduchar msgget msggetdat msginsert 
msginsread msglength msglist msglock msgmapdata msgmetaget msgmetaset msgread 
msgrouteget msgrouteset msgset msgstats msgwrite
<p>
The list below contains a description and the usage of the message manipulating functions.
The flag that preceeds the procedure name (**,* or --) indicates
the frequency of use of the procedure (frequently, regularly, almost never)
and hence its importance.

<P>
<TABLE>
<TR><TD bgcolor=#999999 valign="top">
** </TD><TD><b>msgcreate ?-recover? ?-class {protocol | engine}? ?-type {data | reply}? ?-meta {key value ?key value?...}?  ?data? </b><BR>
   Purpose: This function creates a new message, accessable via its message handle.
            The result of this function is the newly created message handle.<BR>
   Notes: When creating a message, the values of some metadata fields can be set as well.
          The following metadata fields are usually set when creating a message:<BR>
               CLASS: Set by using -class or -meta. The class of a message is either <em>engine</em> or <em>protocol</em>. (default: engine)<BR>
               TYPE: Set by using -type or -meta. The type of a message is either <em>data</em> or <em>reply</em>. (default:data)<BR>
               USERECOVERDB: Set by -recover or -meta. A boolean flag, indicating whether or not the message
                             will be stored in the recovery database during processing.
                             The default value is FALSE. <BR>
   Examples:

<PRE>hcitcl>msgcreate "foo" 
message0
hcitcl>set msgHandle [ msgcreate "foo 2u2!" ]
hcitcl>echo $msgHandle
message1
hcitcl>msgcreate -class protocol -type reply "hello"  
       ;# the above has the same result as next line
hcitcl>msgcreate -meta {CLASS protocol TYPE reply} "hello"
message2
hcitcl># note that the recovery database is *not* used as a 
       # default, so use the -recover option !
hcitcl>set mh [msgcreate -recover -type data] ;# same result as next line
hcitcl>set mh [msgcreate -meta {USERECOVERDB true TYPE data}]
</PRE>
</TD><TR>

<TR><TD bgcolor=#999999 valign="top">
** </TD><TD><b> msgget msgId ?offset? ?length? </b><BR>
   Purpose: This function returns (part of) the message content.<BR>
   Examples:

<PRE>hcitcl>set msgHandle [ msgcreate "quod erat demonstrandum" ]
hcitcl>msgget $msgHandle
quod erat demonstrandum
hcitcl>msgget $msgHandle 5
erat demonstrandum
hcitcl>msgget $msgHandle 5 end
erat demonstrandum
hcitcl>msgget $msgHandle 10 4
demo
</PRE>
</TD></TR>

<TR><TD bgcolor=#999999 valign="top">
-- </TD><TD><b> msggetdat ?-type type? msgId ?offset? ?length? </b><BR>
   Purpose: This function returns (part of) the message content in the form of a datum object. 
            The function returns the datum handle of a newly created datum object. <BR>
   Notes: Only used if the message content is likely to contain null characters.
          See <a href="m40.htm"> Module 40: Datums </a>. <BR>
   Examples:

<PRE>hcitcl>set msgHandle [ msgcreate "foobar" ]
hcitcl>msggetdat $msgHandle
datum0
</PRE>
</TD></TR>

<TR><TD bgcolor=#999999 valign="top">
** </TD><TD><b> msgset msgId data ?offset? ?length? </b><BR>
   Purpose: This function associates a (partly) new message content with a message object. 
            This is the most generic method of changing the message content.  <BR>
   Examples:

<PRE>hcitcl>set mh [ msgcreate ]
hcitcl>msgset $mh "foo"
hcitcl>msgget $mh
foo
hcitcl>msgset $mh "onetwothree"
hcitcl>msgset $mh four 3 3  ;# replace
hcitcl>msgget $mh
onefourthree
hcitcl>msgset $mh five 3 ; msgget $mh  ;# append/replace
onefive
hcitcl>msgset $mh {} 3 4 ; msgget $mh  ;# delete 
one
hcitcl>msgset $mh zo 1 0 ; msgget $mh ;# insert
ozone
</PRE>
</TD></TR>

<TR><TD bgcolor=#999999 valign="top">
*- </TD><TD><b> msgappend  msgId data </b><BR>
   Purpose: This function appends a string to the current message contents.<BR>
   Notes: Often used to append control characters to the end of a message.<BR>
   Examples:

<PRE>hcitcl>set mh [ msgcreate "one" ]
hcitcl>msgappend $mh two
hcitcl>msgget $mh
onetwo
</PRE>
</TD></TR>

<TR><TD bgcolor=#999999 valign="top">
-- </TD><TD><b>msginsert  msgId data ?offset? </b><BR>
   Purpose: This function inserts a string into the current message contents.<BR>
   Notes: Often used to insert control characters at the start of a message.<BR>
   Examples:

<PRE>hcitcl>set mh [ msgcreate "onethree" ]
hcitcl>msginsert $mh two 3
hcitcl>msgget $mh
onetwothree
hcitcl>msginsert $mh \x05 0
 onetwothree
</PRE>
</TD></TR>

<TR><TD bgcolor=#999999 valign="top">
* </TD><TD><b> msglength msgId </b><BR>
   Purpose: This function returns the length of the message content, 
            expressed in bytes/characters. <BR>
   Notes: The length of a message can be up to 4 GB. Null characters will
          be included in the calculation of the length just as any other character.<BR>
   Examples:

<PRE>hcitcl>set mh [ msgcreate "onethree" ]
hcitcl>echo [ msglength $mh ] 
8 
</PRE>
</TD></TR>

<!------------ never used

<TR><TD bgcolor=#999999 valign="top">
-- </TD><TD><b> msgfindchar msgId char ?offset? ?length? </b><BR>
   Purpose: This function tries to locate a character within a predefined part of the message content.
   The result of this function is either the first position of the character within the range
   or -1 if the character could not be found. The special character {} can be used to find the
   <em>null</em> character. <BR>
   Examples:

<PRE>hcitcl>set mh [ msgcreate "onethree" ]
hcitcl>msgfindchar $mh t
3
hcitcl>msgfindchar $mh X
-1
hcitcl>msgfindchar $mh t 2 4  # ethr
1
</PRE>
</TD></TR>

------------------->

<TR><TD bgcolor=#999999 valign="top">
*- </TD><TD><b>msgmapdata msgHandle mapName </b><BR>
   Purpose: This function maps the characters within the message content, originally encoded
   using a particular character encoding to
   a different character encoding.<BR>
   Notes: Typically used to translate from EBCDIC to ASCII and vice versa, or for
          translation between codetables used in different localities.  <BR>
   Examples: See <a href="m54.htm">Module 54: Character Encoding </a>.
</TD></TR>

<TR><TD bgcolor=#999999 valign="top">
-- </TD><TD><b> msgerror context msgId ?msgId ...? </b><BR>
   Purpose: This function places the message into the error database with the
            <em>context</em> string attached to it as the error message.
            The procedure will fail if the message was locked with the -nodestroy option. <BR>
   Notes: Used in situations where the message has to placed in the error database but
          where the ERROR disposition can't be used. (i.e. in non-TPS procedures) <BR>
   Examples:

<PRE>hcitcl>set mh [ msgcreate "msg that contains an error" ]
hcitcl>msgerror "error on account of reason XYZ" $mh
</PRE>
</TD></TR>


<TR><TD bgcolor=#999999 valign="top">
-- </TD><TD><b>msglist </b><BR>
   Purpose: This function returns a list of all message handles currently used
            within the interpreter. <BR>
   Notes:   Often used in combination with the msgdestroy function, although 
            this practice is discouraged.<BR>
   Examples:

<PRE>hcitcl>msgcreate ; msgcreate ; msgcreate
hcitcl>msglist
message0 message1 message2
</PRE>
</TD></TR>

<TR><TD bgcolor=#999999 valign="top">
*- </TD><TD><b> msgdestroy msgId ?msgId...? </b><BR>
   Purpose: This function destroys a message object. The message, its message handle
            and the message content are removed from the interpreter.
            The message will also be removed from the recovery database.
            The message can't be destroyed if the message has been locked using
            the nodestroy option. <BR>
   Notes:   Often used in combination with the msglist function, although 
            this practice is discouraged.<BR>
   Examples:

<PRE>hcitcl>set mh [ msgcreate ] ; msgcreate ; msgcreate
hcitcl>msglist
message0 message1 message2
hcitcl>msgdestroy $mh
hcitcl>msglist
message1 message2
hcitcl>foreach mh [ msglist ] { msgdestroy $mh }
</PRE>
</TD></TR>
</TABLE>

<!-------- nulls now supported by Tcl (in 3.8+)

<h2> The Handling of NULL values </h2>

<TABLE>


<TR>
<TD bgcolor=#999999 valign="top"> 
-- </TD><TD><b> msgfinduchar msgId char ?offset? ?length? </b><BR>
   Purpose: This function attempts to find a value that can be used as an alternative
            for the null-character. The function returns the ordinal value of
            an alternative character that isn't contained in the message content. 
            The returned character will have an ordinal value that is larger than the
            ordinal value of the <em>char</em> parameter.<BR>
   Notes: Null characters are mostly replaced by '@' or '\x01'. <BR>
   Examples:

<PRE>hcitcl>set mh [ msgcreate ]
hcitcl>msgset -cvtnull X $mh "exampleXwithXnullXdelimiters" 
hcitcl>set nullReplacementChar [ msgfinduchar $mh A ]  
       # normally "\0" instead of "A"
hcitcl>echo $nullReplacementChar
A
hcitcl>msgget -cvtnull $nullReplacementChar $mh
exampleAwithAnullAdelimiters
</PRE>
</TD></TR>
</TABLE>

-------------->

<h2> Message metadata </h2>

Each Integrator message has metadata associated with it. A metadata field either contains
information about the state of the message or data regarding its routing or translation.

<TABLE>
<TR><TD bgcolor=#999999 valign="top">
*- </TD><TD><b> msgdump msgId </b><BR>
   Purpose: This function shows both the content of the message as well as its metadata.
            The message content is shown under de heading 'message'.
            Non printables will be replaced by their hexadecimal representation. <BR>            
   Notes: The easiest way to check the value of the metadata fields.  <BR>
   Examples:

<PRE>hcitcl>set mh [ msgcreate "onethree" ]
hcitcl>msgdump $mh
msg: 0x140095800
    msgType           : DATA
    msgClass          : ENGINE
    msgState          : Unknown: 0 (0)
    msgPriority       : 5120
    msgRecoveryDbState: 1
    msgFlags          : 0x2
    msgMid            : [0.0.8]
    msgSrcMid         : midNULL
    msgSrcMidGroup    : midNULL
    msgOrigSrcThread  :
    msgOrigDestThread :
    msgSrcThread      :
    msgDestThread     :
    msgXlateThread    :
    msgSkipXlate      : 0
    msgNumRetries     : 0
    msgGroupId        : 0
    msgDriverControl  :
    msgRecordFormat   :
    msgRoutes         :
    msgUserData       :
    msgStaticIsDirty  : 0
    msgVariableIsDirty: 0
    msgTimeStartIb    : 868366416.563
    msgTimeStartOb    : 868366416.563
    msgTimeCurQueStart: 0.000
    msgTimeTotalQue   : 0.000
    msgTimeRecovery   : 868366416.563
    msgEoConfig       : 0x0
    msgData (BO)      : 0x140095080
    message           : 'onethree'
</PRE>
</TD></TR>

<TR><TD bgcolor=#999999 valign="top">
** </TD><TD><b> msgmetaget ?-ro | -rw | -all? msgId ?key? </b><BR>
   Purpose: This function returns a list of available metadata fields or
            the value of an individual metadata field.<BR>
   Examples:

<PRE>hcitcl>set mh [ msgcreate "foobar" ]
hcitcl>msgmetaget -all $mh ;# all metadata fields
CLASS DATAFMT DESTCONN DRIVERCTL FLAGS ISSTATICDIRTY ISVARDIRTY MID 
ORIGDESTCONN ORIGSOURCECONN PRIORITY RETRIES SKIPXLT GROUPID GROUPMID 
SOURCECONN SOURCEMID SOURCEMSIIDX STATE TIMEIN TIMEOUT TIMEQCUR 
TIMEQTOT TIMEXLT TYPE USERDATA USERECOVERDB XLTTHREAD
hcitcl>msgmetaget -rw $mh ;# all RW metadata fields
DATAFMT DESTCONN DRIVERCTL FLAGS PRIORITY SKIPXLT GROUPID SOURCECONN 
USERDATA
hcitcl>msgmetaget $mh TYPE ;# value of a specific metadata field
data
hcitcl>msgmetaget $mh CLASS
engine
hcitcl>msgmetaget $mh USERDATA
{}
hcitcl>msgmetaget $mh FLAGS ;# returns a list of flags that are TRUE
icl_owns_data expect_reply
</PRE>
</TD></TR>

<TR><TD bgcolor=#999999 valign="top">
** </TD><TD><b> msgmetaset msgId key value ?key2 value2...? </b><BR>
   Purpose: This function changes the value of a specific metadata field.
The value of read only metadata fields can't be changed. <BR>
   Notes: Some of the read only metadata fields can however be set when creating messages. <BR>
   Examples:

<PRE># It is recommended to treat the USERDATA field 
# as if it were a keyed list.
hcitcl>set metalist [ msgmetaget $mh USERDATA ] 
hcitcl>keylset metalist MYFLAG TRUE
hcitcl>msgmetaset $mh USERDATA $metalist
# Changing the FLAG metadata..
msgmetaset $mh FLAGS { {expect_reply TRUE} {proto_nak 0} }
</PRE>
</TD></TR>

<TR><TD bgcolor=#999999 valign="top">
*- </TD><TD><b>msgcopy msgId </b><BR>
   Purpose: This function creates a new message object, and copies all metadata information,
            with the exception of the unique message id, from an existing message object
            to the newly created message object. The result of the function is the
            message handle of the newly created message object. <BR>
   Notes: Often used instead of msgcreate, in order to preserve the value of the metadata fields,
          including DESTCONN and SOURCECONN.<BR>
   Examples:

<PRE>hcitcl>set mh [ msgcreate "foobar" ]
hcitcl>set mh2 [ msgcopy $msgHandle ]
hcitcl>msgget $mh2
foobar
</PRE>
</TD></TR>
</TABLE>

<h3> Message Metadata Fields </h3>

The functions described above allow the manipulation of the message metadata. 
The metadata fields themselves are discussed below. <BR>

<a name="flags">
<h3> msgFlags - FLAGS </h3>

  The FLAGS metadata field contains the values of a number of boolean flags.
  Some of those flags are readonly, others are read/write. The FLAGS metadata
  field are only used in specific circumstances.

  <TABLE BORDER="1">
  <TR><TD bgcolor=#999999 valign="top">&nbsp;**</TD><TD> expect_reply   </TD><TD>&nbsp;rw</TD>
      <TD> raised if a reply is expected when this message has been delivered. 
           This flag will be set to TRUE automatically when await_replies has been 
           turned on using the network configurator. When set the protocol driver
           will wait for a reply message.
           <BR> See <a href="m60">Module 60: Reply Messages</a> for details. </TD></TR>
  <TR><TD bgcolor=#999999 valign="top">--</TD><TD> is_forwarded   </TD><TD> ro </TD>
      <TD> raised if the message has ever been forwarded from one thread to another. 
          <BR>See also <a href="m74.htm">Module 74: Routing messages</a> </TD></TR>
  <TR><TD bgcolor=#999999 valign="top">--</TD><TD> icl_owns_data  </TD><TD> ro </TD>
      <TD> raised if the local copy of the message has been destroyed when
           the message is being routed between processes. </TD></TR>
  <TR><TD bgcolor=#999999 valign="top">--</TD><TD> is_enqueued    </TD><TD> ro </TD>
      <TD> raised if the message is currently enqueued. </TD></TR>
  <TR><TD bgcolor=#999999 valign="top">--</TD><TD> is_on_disk  </TD><TD> rw </TD>
      <TD> (3.5.1+) raised if the message is currently stored on disk. Messages will
          be stored on disk if (1) the 'keep messages on disk' option is used
          or (2) the process 'disk-based queueing threshold' is reached, which causes
          the process to start storing buffers to disk once an overall virtual
          memory usage limit is reached. The linit can be configured in the Network Configurator. </TD></TR>
  <TR><TD bgcolor=#999999 valign="top">*-</TD><TD> is_resent    </TD><TD> rw </TD>
      <TD> raised if the message was resent back into the engine. </TD></TR>
  <TR><TD bgcolor=#999999 valign="top">--</TD><TD> keep_on_disk </TD><TD> rw </TD>
      <TD> (3.5.1+) raised if the inbound thread is configured to keep messages on disk. 
         Message will be kept on disk (i.e. in the recovery database)
         until the message has been successfully delivered. </TD></TR>
  <TR><TD bgcolor=#999999 valign="top">*-</TD><TD> last_in_group  </TD><TD> rw </TD>
      <TD> raised if the message is the last messsage within a group. 
           This flag is mainly used when processing message batches.
           The value of this flag will be preserved/copied when a message is being translated.
           <BR> See <a href="m56.htm">Module 56: Message Coalescing</a> for details. </TD></TR>
  <TR><TD bgcolor=#999999 valign="top">--</TD><TD> prewrite_done </TD><TD> ro </TD>
      <TD> raised if the message has a pre-write procedure.
           </TD></TR>
  <TR><TD bgcolor=#999999 valign="top">--</TD><TD> proto_nak      </TD><TD> rw </TD>
      <TD> raised by the protocol driver if the message was NAKed at the protocol level. 
           This flag can be helpful within the SENDFAIL TPS UPoC.</TD></TR>
  <TR><TD bgcolor=#999999 valign="top">--</TD><TD> proto_timeout  </TD><TD> rw </TD>
      <TD> raised by the protocol driver if a timeout occured when delivering
           the message. This flag can be helpful within the
           SENDFAIL TPS UPoC.  </TD></TR>  
 <TR><TD bgcolor=#999999 valign="top">--</TD><TD> should_be_freed</TD><TD> ro </TD>
      <TD> raised if local memory can be released; used by the
           internal memory manager. </TD></TR>
  <TR><TD bgcolor=#999999 valign="top">--</TD><TD> recovered </TD><TD> rw </TD>
      <TD> raised when message was re-queued in the engine from the recovery database.
           </TD></TR>
  <TR><TD bgcolor=#999999 valign="top">--</TD><TD> use_rdb  </TD><TD> ro </TD>
      <TD> (3.5.1+) raised if the message is to be stored in the recovery database 
           throughout its lifecycle. </TD></TR>
 
  </TABLE>

  Known problem: PR2197: The FLAGS metadata doesn't allow access to the flag value
    denoting Protocol Startup message status.
  

<h3> msgUserData - USERDATA </h3>

The USERDATA metadata field isn't used by the engine itself. This metadata field
can be used by the Integrator programmer to attach uninterpreted metadata
to the message, e.g. to exchange information between TPS
procedures by including flow control specific information
in the message metadata.<BR>
You are advised to treat the value of the USERDATA metadata field as if it were
a keyed list. This to allow multiple TPS procedures to use the userdata metadata field.

<h3> msgDestThread - DESTCONN </h3>

The DESTCONN metadata field contains a list of thread names. The message is 
to be routed to these threads. The name of an individual thread can't exceed
64 characters.

<h3> msSrcThread - SOURCECONN </h3>

The SOURCECONN metadata field contains the name of the thread the message originated from.
Reply messages are routed to the originating thread of the data message.
The value of this metadata field is sometimes changed when constructing/creating
a reply in an OB-TPS, in combination with an OVER disposition. 
See <a href="m60.htm">Module 60: Reply messages</a> for details.

<h3> msgPriority - PRIORITY </h3>

The priority of a message can contain a value between 4096 (lowest priority) 
and 8192 (highest priority). 
The default value is 5120. Messages in queues are processed according to their
priority.

<h3> msgDriverControl - DRIVERCTL </h3>

Information in the DRIVERCTL metadata field is used by the protocol driver. 
The behaviour of a protocol driver is normally uniquely determined by its
configuration in the Network Configurator. If the
DRIVERCTL metadata field contains configuration information, then the
default configuration of the protocol driver will be overridden. 
The driverctl metadata field is a keyed list. The number and type
of keys within this list varies, depending on the protocol driver used.
See <a href="m95.htm">Module 95: Protocol Driver Control</a> for details.

<h3> msgSkipXlate - SKIPXLT </h3>

If the SKIPXLT metadata field contains a non-empty value,
 indicating whether the current message
shouldn't or should be translated before it is forwarded to the destination
protocol thread(s). The engine sets this field to 1 when the SEND disposition is 
used or when a message is being forwarded to an alternative thread. 
If one of your procedures changes this metadata field we suggest using the value '1'.

<h3> msgSepChars - SEPCHARS </h3> (3.5+)

The SEPCHARS metadata field is used to allow the default separators to be
overridden on a per message base (EDI, HL7 & X12). 
If this field is NULL the default separators
will be used to parse or encode the message. The value of this field is a keyed list 
with the following keys: FIELD, COMPONENT, REPEAT, ESCAPE, SEGMENT, DECIMAL.
REPEAT, ESCAPE, and DECIMAL only have meaning to EDIFACT messages and ESCAPE is what
EDIFACT refers to as the <em>release</em> character.
<p>
The default value of these keys (for EDIFACT) is: SEGMENT ('), FIELD (+), COMPONENT (:), 
ESCAPE (?), REPEAT (&nbsp;), and DECIMAL (.).
<p>
Note: To encode a outbound message using non-standard separators (3.5.1P+),
the SEPCHARS metadata has to be set using the <em>xpmmetaset</em> command. 
Inbound messages that use non-standard separators can be parsed by setting the
SEPCHARS metadata field in an IB-TPS (3.5.2P+).
Changing the SEPCHARS metadata in an OB-TPS has no effect on the process of encoding.

<h3> msgRecordFormat - DATAFMT </h3>
This field is set by the translation thread when creating an outbound message. It contains
the hub name, root, and name of the format (filename or variant name).

<!----------

<h2>File based messages</h2>

The content of a message object can be directly written to a file or read from a file.
Three storage methodologies (<em>styles</em> in the Integrator terminology) are supported:
len10 (10 byte len encoded), nl (newline terminated) and raw. The fourth style 'eof' is only to be used when reading from a file, and will result in the entire file being read.
When the raw style is used and a message is to be read the number of bytes that 
are to be read has to be supplied
via the readlen parameter.
<BR>
<TABLE>
<TR><TD bgcolor=#999999 valign="top">
--</TD><TD><b> msgread ?-stats statsVar? style msgId fileId ?readlen? ?offset? ?length? </b><BR>
   Purpose: This function associates a message handle with a message content read from a file.
            The functionality of this function can be compared with msgset.
            The style parameter indicates the type of file. (nl/len10/raw/eof)
            The function returns the number of bytes read.
            If the -stats option is used in combination with a variable-name, the number
            of bytes read and the number of bytes remaining will be returned in the
            variable in the form of a Tcl list. <BR> 
   Note: The eof style is available in versions 3.8 and higher. <br>
   Examples:

<PRE>hcitcl>set fh [ open /etc/passwd ]
# Note: on Windows platfoms, the following statement MUST be used to
# avoid characters contained in the file from being converted by Tcl:
hcitcl>fconfigure $fh -translation {binary binary}
hcitcl>set mh [ msgcreate ]
hcitcl>msgread nl $mh $fh 
55
hcitcl>msgget $mh
root:fh80BPpJwI:0:1:system PRIVILEGED account:/:/bin/sh
hcitcl>close $fh
</PRE>
</TD></TR>

<TR><TD bgcolor=#999999 valign="top">
-- </TD><TD><b>msgwrite style msgId fileId ?offset? ?length? </b><BR>
   Purpose: This function writes the content of a message object to a file.
            NULL characters will also be written to the file. 
            The offset and length parameters can be used if a part of the message 
            content has to be written to the file. <BR>
   Examples:

<PRE>hcitcl>set mh [ msgcreate "onetwothree" ]
hcitcl>msgwrite len10 $mh stdout ; echo \n
0000000011onetwothree
hcitcl>msgwrite nl $mh stdout
onetwothree
hcitcl>set fh [ open /tmp/newfile ] ; msgwrite nl $mh $fh ; close $fh
</PRE>
The following code transforms the style of a message stored
in a file.

<PRE>set fh_in [open "len10_file" r]
set fh_out [open "nl_file" w]
set mh [msgcreate]
msgread len10 $mh $fh_in
msgwrite nl $mh $fh_out
close $fh_in
close $fh_out
msgdestroy $mh
</PRE>
</TD></TR>
</TABLE>

--------------------->

<p>
Copyright 2003 Health-Comm GmbH [30][30][35][25][25][40][35][30][30][55][20]
</BODY>
</HTML>
