<HTML>
<HEAD>
        <TITLE>Integrator Level II Training</TITLE><LINK href="training.css" type=text/css rel=stylesheet>
</HEAD>
<BODY>



<h1>
 <img src="images/hie_box.gif" align="middle" hspace=7> 
 Integrator - Level II Training </H1>

<h1> Module 51: Inbound TPS & Outbound TPS (IB-TPS/OB-TPS)</h1>





TPS Procedures, introduced in the previous module, are mainly called from the following UPoCs:
<UL>
<LI>IB Data TPS & IB Reply TPS;
<LI>OB Data TPS & OB reply TPS;
<LI>XLT Route-Detail Pre-Processor (or the Raw routing equivalent: Raw Routes).
</UL>
<p> 
<center><img src="images/preproc.gif"><BR>
Figure 51.1 TPS UPoCs 
</center>
<h2>IB TPS</h2>
An IB TPS may contain multiple Tcl procedures that change the content of the message
after it has been received. 
The input of the TPS Stack consists of Protocol messages that have just been read by the
protocol driver, its output consists of Engine messages that will be forwarded to the Xlate
thread. <BR>
Examples: The coalescing of messages (many to one), 
splitting the content of a message (in case it's a batch),
character conversions,
filtering of message types,
generation of replies for the original sending system.

<h2>OB data TPS</h2>
An OB TPS may contain multiple Tcl procedures that change the content of the message
just before it will be delivered. 
The input of the TPS Stack consists of Engine messages that have been translated and have been
forwarded to the protocol thread for delivery, 
its output consists of Protocol messages that will be delivered by the 
protocol driver. <BR>
Examples: The coalescing of messages (in order to create a bach message), 
splitting the content of a message (in case the receiver uses a buffer
of limited length),
character conversions,
filtering of message types.

<h2>XLT Route-Detail Pre-Processor</h2>
The XLT Route detail Pre-processor may contain multiple Tcl procedures that change 
the content of the message or its routing
just before it is translated. 
The XLT Route detail Pre-processor TPS will only be executed if an <em>Xlate Route Detail</em>
is used. This TPS Stack is to be used in those situations where <em>route-dependent</em>
message manipulations have to be performed.

The input of the TPS Stack consists of Engine messages that were forwarded to the Xlate thread by
the protocol thread.

The functionality of the XLT Route detail Pre-processor TPS can be compared
to that of the IB TPS, albeit that this TPS is exclusively related to a particular route.
An IB TPS is always executed and is able to transform all messages independent of the routing
definition. <BR>
Examples: The coalescing of messages (in order to create a batch message), 
splitting the content of a message (in case the receiver uses a buffer
of limited length),
character conversions,
filtering of message types,
changing the message routing.

<h2>XLT Route-detail Post-Processor</h2>

Whereas the functionality of the Xlt Route Detail Pre-Processor TPS can be compared to the functionality
provided by the IB TPS, the functionality of the XLT Route Detail Post-Processor TPS
can be compared to that of the OB TPS. XLT Route-Detail post-processors are rarely used.

<h2>Raw Routes</h2>

The functionality provided by the Raw Routes TPS can be compared to the functionality
provided by the XLT Route-Detail Pre-Processor TPS. This UPoC is mostly used to change
the routing of messages.
<BR>
Examples: Changing the message routing, character conversions,
filtering of message types.

<BR>
See also <a href="m74.htm">Module 74: Routing Messages</a>.

<p>
Copyright 1998,2001 Health-Comm GmbH [15]
</BODY>
</HTML>
