<HTML>
<HEAD>
        <TITLE>Integrator Level II Training</TITLE><LINK href="training.css" type=text/css rel=stylesheet>
</HEAD>
<BODY>



<h1>
<img src="images/hie_box.gif" align="middle" hspace=7> 
 Integrator - Level II Training </H1>

<h1> Module 51: Lab: IB-TPS/OB-TPS Tcl Procedures </h1>





Hints when testing TPS procedures using the testing tool:
<UL>
<LI>If the TPS initializes variables in its 'start' mode, please don't forget to 
use this mode in the testing tool.
<LI>
After having been processed by one or more Tcl procedures in a TPS Stack,
the message will be normally handed over to the engine for further processing.
When testing TPS procedures in the testing tool you have to either write the resulting messages
to a file or you have to specify a <b>TPS Endproc</b>. This is a special procedural type which is <b>not</b>
equal to a normal TPS procedure.

Procedure of type <b>TPS Endproc</b> can be created using the Custom Scripts editor:
these procedures usually echo the message content to the screen and destroy the message object.<BR>
See <em>gc_endprocTPSshowMsg</em> procedure in the gen_debug_procs.tcl file for an example.
The default TPS Endproc is the one shipped with the Integrator: <em>hcitpstestshowbydisp</em>. 
</UL>


<p>
<b>1.</b> Priority adjustment <img src="images/java2.gif"><BR>
Create an IB TPS Proc with the following functionality: <BR>
Create a GRM object associated with the message grammar FRL jka_sfp.frl
(use your own site-dependent FRL name) and associate 
the GRM with a message content.
Fetch the value of the MsgType field (use the name as specified in your FRL).
Change the priority (a metadata field) of the message to 6000 
if the value of the field equals "SFP".
Destroy any datum and GRM objects that were created, and forward the mesage using 
a CONTINUE disposition.<BR>
Test the procedure with the aid of the testing tool and the file
 $HCIROOT/class_files/java_sfp.dat. Use the 'save to file' option to save the file to $HCIROOT/tmp/std#51.
 (# being your student number).
Check the output files generated by the testing tool.<BR>

<p>
<b>2.</b> Filter <img src="images/java2.gif"><BR>
<b>2.1</b>Inbound (IB) Filter <BR>
Create an IB TPS Proc <em>filterIB_942</em> with the following functionality: <BR>

Create a GRM object associated with the message grammar 
(<b>HL7-track</b>) HL7 2.2 variant "HIS" message ADT_A01, 
 or (<b>Edifact-track</b>) Edifact 95B variant "diet_system" message MEDDIE,
 or (<b>XML track</b>) the XML "Diet Order System" package,
and parse the message content. <br>

Fetch the value of the Liquid Food Code field. 
Use a KILL disposition if the value of this field equals (<b>HL7 and XML tracks</b>) "942" or (<b>Edifact-track</b>) "102", CONTINUE the message
otherwise. (<b>Edifact-track</b>): RFF is a repeating segment in a
repeating group. For the sake of simplicity, assume that 3(0).0(0).RFF(3) contains
the RFF containing the liquid foodcode. <br>

Destroy any datum and GRM objects that were created.
<BR>
Test the procedure with the aid of the testing tool. Use the TPS-endproc <em>gc_endprocTPSshowMsg</em> for
TPS end processing.

<BR>
<b>2.2</b>Outbound (OB) Filter <BR>
Create an OB TPS Proc <em>filterOB_1234</em> with the following functionality: <BR>
If the value of the Solid Food Code field equals "1234", KILL the message. Otherwise,
use the CONTINUE disposition. 
<BR>
Test the procedure with the aid of the testing tool and the file
$HCIROOT/class_files/java_sfp.dat. Use the TPS-endproc <em>gc_endprocTPSshowMsg</em> for
TPS end processing. <BR>
<b>2.2</b> (theory) <BR>
Note that using a filter in the IB TPS prevents the translation of the message,
resulting in one or more messages not being delivered, whereas a filter
applied in an OB-TPS prevents one message from being delivered.

<p>
<center>
<TABLE BORDER="1">
<TR><TD>std1</TD><TD>std2</TD><TD>std3</TD><TD>std4</TD><TD>std5</TD><TD>std6</TD><TD>std7</TD><TD>std8</TD><TD>std9</TD><TD>std10</TD><TD>std11</TD><TD>std12</TD><TD>std13</TD><TD>std14</TD><TD>std15</TD></TR>
<TR><TD>4160</TD><TD>4260</TD><TD>4360</TD><TD>4460</TD><TD>4560</TD><TD>4660</TD><TD>4760</TD><TD>4860</TD><TD>4960</TD><TD>5060</TD><TD>5160</TD><TD>5260</TD><TD>5360</TD><TD>5460</TD><TD>5560</TD></TR>
</TABLE>
<br> <em><b>Table 51L.1 </b></em>
</center>

<p>
<b>3.</b> Write an IB-TPS procedure that creates a 'reply' message<img src="images/java2.gif"><BR>
Update the current Network Configuration used in the JKA lab: <br> 
Create a new 'cardio' thread and set its protocol to
TCP/IP server, on the portnumber displayed in table 51.1L, with 4 bytes, exclusive,
length encoding of the messages.
Route all messages, using a raw route detail, to the archive thread. 
The 'cardio' system expects a reply for each message it sends. The acknowledgement
messages consist of the constant string "ACK" followed by the first ten bytes
of the original message. <br>
Develop a IB TPS procedure called <em>createReply</em> 
that creates an acknowledgement message based on the data
message it processes. Use the OVER disposition. 
Apply the <em>createReply</em> TPS procedure in the Network Configurator
using the appropriate UPoC.
<BR>
<b>3.1</b>
Test your procedure with the aid of the testing tool.
<BR>
<b>3.2</b> Test the Network Configuration<BR>
Run the engine and use the <em>hcitcptest</em> commandline tool to simulate
the cardio system. Send a number of messages with a random content to Integrator and
check the replies.

<p>
Copyright 2001,2003 Health-Comm GmbH [(1/2)90][115]
</BODY>
</HTML>
