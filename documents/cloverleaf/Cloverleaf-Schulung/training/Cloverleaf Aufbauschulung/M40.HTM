<HTML>
<HEAD>
        <TITLE>Integrator Level II Training</TITLE><LINK href="training.css" type=text/css rel=stylesheet>
</HEAD>
<BODY>



<h1>
 <img src="images/hie_box.gif" align="middle" hspace=7> 
 Integrator - Level II Training </H1>

<h1> Module 40: Datums </h1>





<p>
The <em>Datum</em> object is the atomic element a message object is constructed of.
A datum can be compared with the most elementary element of a message grammar,
e.g. an HL7 or FRL subfield, a SWIFT subfield part, an EDIFACT data element or a HRL or VRL sub-subfield.
<p>
<center><img src="images/datum.gif"><BR>&nbsp; <BR>
<em><b>Fig. 40.1 Datum object and datum handle</b></em></center>
<p>
A datum is conceptually equal to a record (or a keyed list) with 2 fields:
<UL>
<LI>VALUE- The value of the data associated with (i.e. the value of) the datum object;
<LI>TYPE - The data type of the data.
</UL>
Datum objects can be accessed via a <em>datum handle</em>, which can 
be compared to a pointer in most 3GL programming languages. 
A datum handle takes the form of an alfanumeric string.
Datum objects are created and/or used by 
<a href="m41.htm">Generic Record Managers (GRM) and Translation Pseudo Machines (XPM)</a> (See Module 41). 
A translation specification, created with the aid of the GUIs, can be seen
as a mapping between datum objects in the inbound message and datum objects in the
outbound message.
<p>
This module aims to introduce the various datum procedures. The examples
in this module can be executed using the commandline interpreter. The full functionality
of these procedures will become clear when these procedures are used in combination
with Integrator Tcl features that are to be introduced in the next modules.

<h2> Datum Tcl extensions </h2>

<P>
A large number of functions can be used to manipulate datum objects. 
Use the <em>info command dat*</em> command in the hcitcl interpreter to get a full list of available
message procedures. The following procedures are available in version 3.8.1P:
<BR>
hcitcl>info command dat*<BR>
datcreate datdestroy datdump datget datlist datset
<P>
The list below contains a description and the usage of the datum manipulating functions.
The flag that preceeds the procedure name (**,* or --) indicates
the frequency of use of the procedure (frequently, regularly, almost never)
and hence its importance.

<P>
<TABLE>
<TR><TD bgcolor=#DDDDDD valign="top">
-- </TD><TD> <B>datcreate ?value? ?type? </B><BR>
Purpose: This function creates a new datum object and returns its <em>datum handle</em>.
The <em>value</em> and <em>type</em> values will be associated with the datum object.
The default value is "" (=null), the default data type is "ch" (=String). 
<BR>
Notes: This function is rarely used. Datum objects are usually created by the following
procedures:
<a href="m41.htm">Module 41: grmfetch</a>, 
<a href="m41.htm">Module 41: xpmfetch</a> 
or <a href="m20.htm">Module 20: msggetdat</a> <BR>
Examples:

<PRE>hcitcl>datcreate "five six" ch
datum1
hcitcl>datcreate
datum2
</PRE>

  The following table contains the valid datum data types. The types are mainly used
  within the translation process, it allows Integrator to automatically convert
  data types.
  <TABLE BORDER="1">
  <TR><TD>ch </TD><TD> String (equivalent to the st type)  </TD></TR>
  <TR><TD>st </TD><TD> String (equivalent to the ch type)  </TD></TR>

  <TR><TD>ai </TD><TD> [+|-]digits - ASCII integer, digits (0-9)  </TD></TR>
  <TR><TD>nm </TD><TD> [+|-]digits[.digits] - ASCII numeric real </TD></TR>
 
  <TR><TD>dt </TD><TD> [cc]yymmdd - Date </TD></TR>
  <TR><TD>ed </TD><TD> ddmm[cc]yy - Date </TD></TR>
  <TR><TD>fd </TD><TD> mm/dd/[cc]yy - Date </TD></TR>
  <TR><TD>fe </TD><TD> dd/mm/[cc]yy - Date </TD></TR>
  <TR><TD>jd </TD><TD> [[cc]yy]ddd - Julian date </TD></TR>
  <TR><TD>yd </TD><TD> mmdd[cc]yy - Date </TD></TR>
  <TR><TD>tm </TD><TD> hhmm[ss][+zzzz|-zzzz] - Time and optional timezone </TD></TR>
  <TR><TD>ts </TD><TD> ccyymmddhhmm[ss][+zzzz|-zzzz]  </TD></TR>
  <TR><TD>ut </TD><TD> Day Mon dd hh:mm:ss ccyy </TD></TR>

  <TR><TD>null </TD><TD> The 'empty' value (a.k.a. 'active null')</TD></TR>
  </TABLE>
</TD></TR>

<TR><TD bgcolor=#DDDDDD valign="top">
** </TD><TD> <B>datget datId ?key? </B><BR>
Purpose: This function returns the data associated with a datum object. 
The datum can be accessed as if it were a keyed list with two keys: TYPE and VALUE.<BR>
Notes: A datum value may contain ASCII 0 characters.<BR>
Examples:

<PRE>hcitcl>set dh [ datcreate "five six" ch ]
hcitcl>datget $dh
TYPE VALUE
hcitcl>datget $dh TYPE
ch
hcitcl>datget $dh VALUE
five six
hcitcl>datget $dh FOO
Error: bad key "FOO"
hcitcl>datget $nonExistingDatumHandle
Error: bad datId "nonExistingDatumHandle"
hcitcl>datdestroy $dh
</PRE>
Note: The VALUE may be equal to "" (=null), possibly combined with 
TYPE null. The use of data type null depends on the message format used
(FRL,HL7,EDIFACT,...).
</TD></TR>

<TR><TD bgcolor=#DDDDDD valign="top">
* </TD><TD> <B>datset datId key value ?key2 value2...? </B><BR>
Purpose: This function changes the data associated with a datum object.
The datum can be accessed as if it were a keyed list with two keys: TYPE and VALUE.<BR>
Notes: Changing the data TYPE has no effect whatsoever on the VALUE, i.e.
the value isn't automatically converted when the data type changes. <BR>
Examples:

<PRE>hcitcl>set dh [ datcreate "five six" ch ]
hcitcl>datset $dh VALUE "seven eight"
hcitcl>datget $dh VALUE
seven eight
hcitcl>datdestroy $dh
</PRE>
</TD></TR>

<!---
<TR><TD bgcolor=#DDDDDD valign="top">
- </TD><TD> <B>datdump datId</B><BR>
Purpose: This function dumps the data associated with a datum object.<BR>
Notes: Used for development and debugging purposes. <BR>
Examples:

<PRE>hcitcl>set dh [ datcreate "01311997" yd ]
hcitcl>datdump $dh
GrmData: 0x14007f0f0
    grmdKind     : 6
    grmdDataType : 25
    grmdStr      : 01311997
hcitcl>datget $dh TYPE
yd                           ;# yd is equivalent with 25
hcitcl>datdestroy $dh
hcitcl>set dh [ datcreate "five six" ch ]
hcitcl>datdump $dh
GrmData: 0x14007f060
    grmdKind     : 6
    grmdDataType : 3
    grmdStr      : five six
hcitcl>datdestroy $dh
</PRE>
</TD></TR>
--->

<TR><TD bgcolor=#DDDDDD valign="top">
- </TD><TD> <B>datlist </B><BR>
Purpose: This function returns a list of datum handles available
in the interpreter. <BR>
Notes: Often used in combination with <em> datdestroy </em>. <BR>
Examples:

<PRE>hcitcl>datlist
datum0 datum1 datum2 datum3 datum4
</PRE>
</TD></TR>

<TR><TD bgcolor=#DDDDDD valign="top">
** </TD><TD> <B>datdestroy ?-list? args </B><BR>
Purpose: This function destroys one or more datum objects and their datum handles.
The memory used by these objects is released.
Datums and datum handles, created by datcreate, grmfetch, xpmfetch or msggetdat are
available in the interpreter until they are explicitely destroyed with datdestroy. <br>
Notes: Because of the fact that the interpreter itself is unable to perform
garbage collection when it comes to datum objects you'll have to make
sure that all Tcl procedures that create datum objects also destroy these datum objects.
Any 'leakage' can be detected by testing the Tcl procedures with the aid of the testing tool. <BR>
Examples:

<PRE>hcitcl>set dh [ datcreate "foo bar" st ]
hcitcl>datdestroy $dh
hcitcl>datdestroy -list [ datlist ]  
       ;# removes all available datum handles
</PRE>
Quovadx has created a variation of the datdestroy function in order to facilitate the destruction
of datum objects by a Tcl procedure. The function <b> hcidatlistreset ?datHandleList? </b>
destroys <b>all</b> datum objects, with the exception of those datum objects of which
the datum handle is contained in the datHandleList list.<BR>
Example:

<PRE># create a list with datum handles that are already in use
set oldHandles [ datlist ]
# perform some actions, that may or may not create datum objects
# ...
# remove all datum handles - except those in the stored list
hcidatlistreset $oldHandles
</PRE>
</TD></TR>

</TABLE>


Copyright 1998,2001 Health-Comm GmbH [10][5]
</BODY>
</HTML>
